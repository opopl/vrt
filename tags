!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
""	ftplugin/sh.vim	/^nnoremap    <buffer>   ""   ciW""<Esc>P$/;"	m
#	indent/dictconf.vim	/^inoremap <buffer> # X#$/;"	m
#	indent/dictdconf.vim	/^inoremap <buffer> # X#$/;"	m
$	tutor/tutor.cs	/^		$ (do konce øádku), atd.$/;"	m
$TUTOR	tutor/tutor.vim	/^  let $TUTOR = $VIMRUNTIME . s:tutorfile$/;"	v
$TUTOR	tutor/tutor.vim	/^  let $TUTOR = s:tutorxx$/;"	v
%	macros/less.vim	/^noremap <script> % %<SID>L$/;"	m
%	macros/matchit.vim	/^nnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'n') <CR>$/;"	m
%	macros/matchit.vim	/^onoremap <silent> %  v:<C-U>call <SID>Match_wrapper('',1,'o') <CR>$/;"	m
%	macros/matchit.vim	/^vnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'v') <CR>m'gv``$/;"	m
%	plugin/matchit.vim	/^nnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'n') <CR>$/;"	m
%	plugin/matchit.vim	/^onoremap <silent> %  v:<C-U>call <SID>Match_wrapper('',1,'o') <CR>$/;"	m
%	plugin/matchit.vim	/^vnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'v') <CR>m'gv``$/;"	m
%	plugin/plugin/matchit.vim	/^nnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'n') <CR>$/;"	m
%	plugin/plugin/matchit.vim	/^onoremap <silent> %  v:<C-U>call <SID>Match_wrapper('',1,'o') <CR>$/;"	m
%	plugin/plugin/matchit.vim	/^vnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'v') <CR>m'gv``$/;"	m
&	macros/life/life.vim	/^map & :%s\/^\\(-[ A-Z]*-\\)\\(-[ A-Z]*-\\)\\(-[.]*-\\)$\/\\2\\3\\3\/$/;"	m
&Edit.&Find\.\.\.		y:promptfind	menu.vim	/^  vnoremenu <silent>	 &Edit.&Find\\.\\.\\.		y:promptfind <C-R>=<SID>FixFText()<CR><CR>$/;"	m
&Edit.&Paste<Tab>"+gP		<C-R>+	menu.vim	/^cnoremenu	 &Edit.&Paste<Tab>"+gP		<C-R>+$/;"	m
&Edit.Find\	menu.vim	/^  vnoremenu	 &Edit.Find\\ and\\ Rep&lace<Tab>:s	:s\/$/;"	m
&Edit.Find\	menu.vim	/^  vnoremenu <silent>	 &Edit.Find\\ and\\ Rep&lace\\.\\.\\. y:promptrepl <C-R>=<SID>FixFText()<CR><CR>$/;"	m
&Edit.Put\	menu.vim	/^inoremenu	 &Edit.Put\\ &After<Tab>]p	<C-O>]p$/;"	m
&Edit.Put\	menu.vim	/^inoremenu	 &Edit.Put\\ &Before<Tab>[p	<C-O>[p$/;"	m
&File.&Print			:hardcopy<CR>	menu.vim	/^  vnoremenu &File.&Print			:hardcopy<CR>$/;"	m
&File.&Print			:w	menu.vim	/^  vnoremenu &File.&Print			:w !lpr<CR>$/;"	m
&Tools.&Diff.&Get\	menu.vim	/^  vnoremenu &Tools.&Diff.&Get\\ Block		:diffget<CR>$/;"	m
&Tools.&Diff.&Put\	menu.vim	/^  vnoremenu &Tools.&Diff.&Put\\ Block		:diffput<CR>$/;"	m
&Tools.&Jump\	menu.vim	/^vnoremenu &Tools.&Jump\\ to\\ this\\ tag<Tab>g^]	g<C-]>$/;"	m
''	ftplugin/sh.vim	/^nnoremap    <buffer>   ''   ciW''<Esc>P$/;"	m
(	macros/life/life.vim	/^map ( ,s,i,X0i?^#A $/;"	m
)0	macros/life/life.vim	/^map )0 o-                    --....................--....................-$/;"	m
)1	macros/life/life.vim	/^map )1 o-        VIM         --....................--....................-$/;"	m
)2	macros/life/life.vim	/^map )2 o-       LIVES        --....................--....................-$/;"	m
*	macros/urm/urm.vim	/^map * 1G\/INIT$/;"	m
+	macros/life/life.vim	/^map + <1C<2$/;"	m
+	vimrc.vim	/^   map + <C-W>+$/;"	m
,	vimrc.vim	/^   map , <C-W><$/;"	m
,!	macros/life/life.vim	/^map ,! "byy$/;"	m
,#	macros/life/life.vim	/^map ,# "bP$/;"	m
,$	macros/life/life.vim	/^map ,$ dd$/;"	m
,%	macros/life/life.vim	/^map ,% "cp$/;"	m
,&	macros/life/life.vim	/^map ,& 0"gd\$$/;"	m
,*	macros/life/life.vim	/^map ,* @g$/;"	m
,-	macros/life/life.vim	/^map ,- :s\/.\/-\/g$/;"	m
,1	macros/life/life.vim	/^map ,1 y G$p$/;"	m
,2	macros/life/life.vim	/^map ,2 2y G$p$/;"	m
,3	macros/life/life.vim	/^map ,3 3y G$p$/;"	m
,@	macros/life/life.vim	/^map ,@ "cyy$/;"	m
,IIN	macros/life/life.vim	/^map ,IIN G?^top$/;"	m
,Iaa	macros/life/life.vim	/^map ,Iaa o=AB =BC =CD =DE =EF =FG =GH =HI =IJ =JK =KL =LM =MN =NO =OP =PQ =QR$/;"	m
,Iab	macros/life/life.vim	/^map ,Iab o=RS =ST =TU =UV =VW =WX =XY =YZ =Z $/;"	m
,Id0	macros/life/life.vim	/^map ,Id0 o#  .`a22lr $/;"	m
,Id1	macros/life/life.vim	/^map ,Id1 o# X .`a22lr $/;"	m
,Id2	macros/life/life.vim	/^map ,Id2 o# XX .`a22lr $/;"	m
,Id3	macros/life/life.vim	/^map ,Id3 o# XXX .`a22lrA$/;"	m
,Id4	macros/life/life.vim	/^map ,Id4 o# XXXX .`a22lr $/;"	m
,Id5	macros/life/life.vim	/^map ,Id5 o# XXXXX .`a22lr $/;"	m
,Id6	macros/life/life.vim	/^map ,Id6 o# XXXXXX .`a22lr $/;"	m
,Id7	macros/life/life.vim	/^map ,Id7 o# XXXXXXX .`a22lr $/;"	m
,Id8	macros/life/life.vim	/^map ,Id8 o# XXXXXXXX .`a22lr $/;"	m
,Il0	macros/life/life.vim	/^map ,Il0 o#XX .`a22lr $/;"	m
,Il1	macros/life/life.vim	/^map ,Il1 o#XXX .`a22lr $/;"	m
,Il2	macros/life/life.vim	/^map ,Il2 o#XXXX .,a$/;"	m
,Il3	macros/life/life.vim	/^map ,Il3 o#XXXXX .,a$/;"	m
,Il4	macros/life/life.vim	/^map ,Il4 o#XXXXXX .`a22lr $/;"	m
,Il5	macros/life/life.vim	/^map ,Il5 o#XXXXXXX .`a22lr $/;"	m
,Il6	macros/life/life.vim	/^map ,Il6 o#XXXXXXXX .`a22lr $/;"	m
,Il7	macros/life/life.vim	/^map ,Il7 o#XXXXXXXXX .`a22lr $/;"	m
,Il8	macros/life/life.vim	/^map ,Il8 O#XXXXXXXXXX .`a22lr $/;"	m
,R	macros/life/life.vim	/^map ,R 03stop$/;"	m
,X	macros/life/life.vim	/^map ,X :.g\/[A-Z]\/s\/\/X\/g$/;"	m
,Y	macros/life/life.vim	/^map ,Y "qy$@q$/;"	m
,^	macros/life/life.vim	/^map ,^ AiC$/;"	m
,a	macros/life/life.vim	/^map ,a `a,jGi?=,ma$/;"	m
,c	macros/life/life.vim	/^map ,c c$$/;"	m
,ca	plugin/NERD_commenter.vim	/^        nmap ,ca <plug>NERDCommenterAltDelims$/;"	m
,d	macros/life/life.vim	/^map ,d "qd$@q$/;"	m
,gq	macros/justify.vim	/^nmap ,gq :%s\/\\s\\+\/ \/g<CR>gq1G$/;"	m
,gq	macros/justify.vim	/^vmap ,gq :s\/\\s\\+\/ \/g<CR>gvgq$/;"	m
,i	macros/life/life.vim	/^map ,i `ay GP$/;"	m
,j	macros/life/life.vim	/^map ,j y $/;"	m
,m	macros/life/life.vim	/^map ,m p$/;"	m
,n	macros/life/life.vim	/^map ,n x$/;"	m
,o	macros/life/life.vim	/^map ,o oPut 'X's in the left box, then hit 'C' or 'R'$/;"	m
,r	macros/life/life.vim	/^map ,r makh,2`akF-l,1`ah,2`aF-l,1`ajh,2`ajF-l,1($/;"	m
,s	macros/life/life.vim	/^map ,s :.g\/ \/s\/\/\/g$/;"	m
-	vimrc.vim	/^   map - <C-W>-$/;"	m
.	vimrc.vim	/^   map . <C-W>>$/;"	m
/	macros/less.vim	/^noremap <script> \/ H$:call <SID>Forward()<CR>\/$/;"	m
/*	ftplugin/c.vim	/^inoremap  <buffer>  \/*       \/*<Space><Space>*\/<Left><Left><Left>$/;"	m
/*	ftplugin/c.vim	/^vnoremap  <buffer>  \/*      s\/*<Space><Space>*\/<Left><Left><Left><Esc>p$/;"	m
/*<CR>	ftplugin/c.vim	/^inoremap  <buffer>  \/*<CR>  \/*<CR><CR>\/<Esc>kA<Space>$/;"	m
0	syntax/hitest.vim	/^normal 0$/;"	m
1.100	menu.vim	/^cnoremenu <script> <silent> 1.100 PopUp.Select\\ &All	<C-U>call <SID>SelectAll()<CR>$/;"	m
1.100	menu.vim	/^inoremenu <script> <silent> 1.100 PopUp.Select\\ &All	<C-O>:call <SID>SelectAll()<CR>$/;"	m
1.100	menu.vim	/^noremenu  <script> <silent> 1.100 PopUp.Select\\ &All	:<C-U>call <SID>SelectAll()<CR>$/;"	m
1.20	menu.vim	/^vnoremenu 1.20 PopUp.Cu&t		"+x$/;"	m
1.200	ftplugin/html/HTML.vim	/^  vmenu           1.200 ToolBar.Cut       "*x$/;"	m
1.210	ftplugin/html/HTML.vim	/^  vmenu           1.210 ToolBar.Copy      "*y$/;"	m
1.220	ftplugin/html/HTML.vim	/^  nmenu           1.220 ToolBar.Paste     i<C-R>*<Esc>$/;"	m
1.220	ftplugin/html/HTML.vim	/^  vmenu           1.220 ToolBar.Paste     "-xi<C-R>*<Esc>$/;"	m
1.30	menu.vim	/^cnoremenu 1.30 PopUp.&Copy		<C-Y>$/;"	m
1.30	menu.vim	/^vnoremenu 1.30 PopUp.&Copy		"+y$/;"	m
1.40	menu.vim	/^cnoremenu 1.40 PopUp.&Paste		<C-R>+$/;"	m
1.40	menu.vim	/^nnoremenu 1.40 PopUp.&Paste		"+gP$/;"	m
1.50	menu.vim	/^vnoremenu 1.50 PopUp.&Delete		x$/;"	m
1.60	menu.vim	/^vnoremenu 1.60 PopUp.Select\\ Blockwise	<C-V>$/;"	m
1.70	menu.vim	/^  vnoremenu 1.70 ToolBar.Cut		"+x$/;"	m
1.70	menu.vim	/^cnoremenu 1.70 PopUp.Select\\ &Word	<C-C>vaw$/;"	m
1.70	menu.vim	/^inoremenu 1.70 PopUp.Select\\ &Word	<C-O>vaw$/;"	m
1.70	menu.vim	/^nnoremenu 1.70 PopUp.Select\\ &Word	vaw$/;"	m
1.70	menu.vim	/^onoremenu 1.70 PopUp.Select\\ &Word	aw$/;"	m
1.70	menu.vim	/^vnoremenu 1.70 PopUp.Select\\ &Word	<C-C>vaw$/;"	m
1.73	menu.vim	/^cnoremenu 1.73 PopUp.Select\\ &Sentence	<C-C>vas$/;"	m
1.73	menu.vim	/^inoremenu 1.73 PopUp.Select\\ &Sentence	<C-O>vas$/;"	m
1.73	menu.vim	/^nnoremenu 1.73 PopUp.Select\\ &Sentence	vas$/;"	m
1.73	menu.vim	/^onoremenu 1.73 PopUp.Select\\ &Sentence	as$/;"	m
1.73	menu.vim	/^vnoremenu 1.73 PopUp.Select\\ &Sentence	<C-C>vas$/;"	m
1.77	menu.vim	/^cnoremenu 1.77 PopUp.Select\\ Pa&ragraph	<C-C>vap$/;"	m
1.77	menu.vim	/^inoremenu 1.77 PopUp.Select\\ Pa&ragraph	<C-O>vap$/;"	m
1.77	menu.vim	/^nnoremenu 1.77 PopUp.Select\\ Pa&ragraph	vap$/;"	m
1.77	menu.vim	/^onoremenu 1.77 PopUp.Select\\ Pa&ragraph	ap$/;"	m
1.77	menu.vim	/^vnoremenu 1.77 PopUp.Select\\ Pa&ragraph	<C-C>vap$/;"	m
1.80	menu.vim	/^  cnoremenu 1.80 ToolBar.Copy		<C-Y>$/;"	m
1.80	menu.vim	/^  vnoremenu 1.80 ToolBar.Copy		"+y$/;"	m
1.80	menu.vim	/^cnoremenu 1.80 PopUp.Select\\ &Line	<C-C>V$/;"	m
1.80	menu.vim	/^inoremenu 1.80 PopUp.Select\\ &Line	<C-O>V$/;"	m
1.80	menu.vim	/^nnoremenu 1.80 PopUp.Select\\ &Line	V$/;"	m
1.80	menu.vim	/^onoremenu 1.80 PopUp.Select\\ &Line	<C-C>V$/;"	m
1.80	menu.vim	/^vnoremenu 1.80 PopUp.Select\\ &Line	<C-C>V$/;"	m
1.90	menu.vim	/^  nnoremenu 1.90 ToolBar.Paste		"+gP$/;"	m
1.90	menu.vim	/^cnoremenu 1.90 PopUp.Select\\ &Block	<C-C><C-V>$/;"	m
1.90	menu.vim	/^inoremenu 1.90 PopUp.Select\\ &Block	<C-O><C-V>$/;"	m
1.90	menu.vim	/^nnoremenu 1.90 PopUp.Select\\ &Block	<C-V>$/;"	m
1.90	menu.vim	/^onoremenu 1.90 PopUp.Select\\ &Block	<C-C><C-V>$/;"	m
1.90	menu.vim	/^vnoremenu 1.90 PopUp.Select\\ &Block	<C-C><C-V>$/;"	m
1.91	ftplugin/html/HTML.vim	/^cnoremenu 1.91 PopUp.Select\\ Ta&g <C-C>vat$/;"	m
1.91	ftplugin/html/HTML.vim	/^inoremenu 1.91 PopUp.Select\\ Ta&g <C-O>vat$/;"	m
1.91	ftplugin/html/HTML.vim	/^nnoremenu 1.91 PopUp.Select\\ Ta&g vat$/;"	m
1.91	ftplugin/html/HTML.vim	/^onoremenu 1.91 PopUp.Select\\ Ta&g at$/;"	m
1.91	ftplugin/html/HTML.vim	/^vnoremenu 1.91 PopUp.Select\\ Ta&g <C-C>vat$/;"	m
1.92	ftplugin/html/HTML.vim	/^cnoremenu 1.92 PopUp.Select\\ &Inner\\ Ta&g <C-C>vit$/;"	m
1.92	ftplugin/html/HTML.vim	/^inoremenu 1.92 PopUp.Select\\ &Inner\\ Ta&g <C-O>vit$/;"	m
1.92	ftplugin/html/HTML.vim	/^nnoremenu 1.92 PopUp.Select\\ &Inner\\ Ta&g vit$/;"	m
1.92	ftplugin/html/HTML.vim	/^onoremenu 1.92 PopUp.Select\\ &Inner\\ Ta&g it$/;"	m
1.92	ftplugin/html/HTML.vim	/^vnoremenu 1.92 PopUp.Select\\ &Inner\\ Ta&g <C-C>vit$/;"	m
20.340	menu.vim	/^vnoremenu 20.340 &Edit.Cu&t<Tab>"+x		"+x$/;"	m
20.350	menu.vim	/^cnoremenu 20.350 &Edit.&Copy<Tab>"+y		<C-Y>$/;"	m
20.350	menu.vim	/^vnoremenu 20.350 &Edit.&Copy<Tab>"+y		"+y$/;"	m
20.360	menu.vim	/^nnoremenu 20.360 &Edit.&Paste<Tab>"+gP		"+gP$/;"	m
20.370	menu.vim	/^nnoremenu 20.370 &Edit.Put\\ &Before<Tab>[p	[p$/;"	m
20.380	menu.vim	/^nnoremenu 20.380 &Edit.Put\\ &After<Tab>]p	]p$/;"	m
20.390	menu.vim	/^  vnoremenu 20.390 &Edit.&Delete<Tab>x		x$/;"	m
20.400	menu.vim	/^cnoremenu <script> <silent> 20.400 &Edit.&Select\\ All<Tab>ggVG	<C-U>call <SID>SelectAll()<CR>$/;"	m
20.400	menu.vim	/^inoremenu <script> <silent> 20.400 &Edit.&Select\\ All<Tab>ggVG	<C-O>:call <SID>SelectAll()<CR>$/;"	m
20.400	menu.vim	/^noremenu  <script> <silent> 20.400 &Edit.&Select\\ All<Tab>ggVG	:<C-U>call <SID>SelectAll()<CR>$/;"	m
40.340.220	menu.vim	/^  vnoremenu 40.340.220 &Tools.&Folding.Create\\ &Fold<Tab>zf	zf$/;"	m
;;ex	vimrc.vim	/^nmap <silent> ;;ex :set fdm=expr<CR>$/;"	m
;;i	vimrc.vim	/^ 	 	nmap <silent> ;;i :call InsEndFold(i)<CR>$/;"	m
;;in	vimrc.vim	/^nmap <silent> ;;in :set fdm=indent<CR>$/;"	m
;;ma	vimrc.vim	/^nmap <silent> ;;ma :set fdm=marker<CR>$/;"	m
;;rc	vimrc.vim	/^nmap <silent> ;;rc :so $MYVIMRC<CR>$/;"	m
;;sy	vimrc.vim	/^nmap <silent> ;;sy :set fdm=syntax<CR>$/;"	m
;ai	fortran_stubs.vim	/^inoremap  ;ai        integer, intent(in out) ::$/;"	m
;ar	fortran_stubs.vim	/^inoremap  ;ar        real(kind=dr), intent(in out) ::$/;"	m
;av	fortran_stubs.vim	/^inoremap  ;av        real(kind=dr), dimension(:), intent(in out) ::$/;"	m
;c	fortran_stubs.vim	/^inoremap  ;c         character(len=) ::$/;"	m
;i	fortran_stubs.vim	/^inoremap  ;i         integer ::$/;"	m
;i	vimrc.vim	/^ 	 	nmap <silent> ;i  :call InsBeginFold(i)<CR>$/;"	m
;pi	fortran_stubs.vim	/^inoremap  ;pi        integer, parameter ::$/;"	m
;pr	fortran_stubs.vim	/^inoremap  ;pr        real(kind=dr), parameter ::$/;"	m
;r	fortran_stubs.vim	/^inoremap  ;r         real(kind=dr) ::$/;"	m
;vi	fortran_stubs.vim	/^inoremap  ;vi        integer, dimension(:) ::$/;"	m
;vr	fortran_stubs.vim	/^inoremap  ;vr        real(kind=dr), dimension(:) ::$/;"	m
<	ftplugin/cobol.vim	/^        nnoremap <silent> <buffer> < :set opfunc=<SID>DecreaseFunc<CR>g@$/;"	m
<	ftplugin/cobol.vim	/^    vnoremap <silent> <buffer> < :call CobolIndentBlock(-v:count1)<CR>$/;"	m
<	macros/less.vim	/^map < g$/;"	m
<1	macros/life/life.vim	/^map <1 G?^top$/;"	m
<2	macros/life/life.vim	/^map <2 G?^top$/;"	m
<2-LeftMouse>	<2-RightMouse>	macros/swapmous.vim	/^noremap	 <2-LeftMouse>	<2-RightMouse>$/;"	m
<2-RightMouse>	<2-LeftMouse>	macros/swapmous.vim	/^noremap	 <2-RightMouse>	<2-LeftMouse>$/;"	m
<3-LeftMouse>	<3-RightMouse>	macros/swapmous.vim	/^noremap	 <3-LeftMouse>	<3-RightMouse>$/;"	m
<3-RightMouse>	<3-LeftMouse>	macros/swapmous.vim	/^noremap	 <3-RightMouse>	<3-LeftMouse>$/;"	m
<4-LeftMouse>	<4-RightMouse>	macros/swapmous.vim	/^noremap	 <4-LeftMouse>	<4-RightMouse>$/;"	m
<4-RightMouse>	<4-LeftMouse>	macros/swapmous.vim	/^noremap	 <4-RightMouse>	<4-LeftMouse>$/;"	m
<<	ftplugin/cobol.vim	/^    nnoremap <silent> <buffer> << :call CobolIndentBlock(-1)<CR>$/;"	m
<<	macros/life/life.vim	/^map << :r!date$/;"	m
<A-F9>	ftplugin/c.vim	/^ map  <buffer>  <silent>  <A-F9>       :call C_Compile()<CR>:call C_HlMessage()<CR>$/;"	m
<A-F9>	ftplugin/c.vim	/^imap  <buffer>  <silent>  <A-F9>  <C-C>:call C_Compile()<CR>:call C_HlMessage()<CR>$/;"	m
<A-F9>	ftplugin/sh.vim	/^   map  <buffer>  <silent>  <A-F9>        :call BASH_SyntaxCheck()<CR>$/;"	m
<A-F9>	ftplugin/sh.vim	/^  imap  <buffer>  <silent>  <A-F9>   <C-C>:call BASH_SyntaxCheck()<CR>$/;"	m
<BS>	mswin.vim	/^vnoremap <BS> d$/;"	m
<C-A>	mswin.vim	/^cnoremap <C-A> <C-C>gggH<C-O>G$/;"	m
<C-A>	mswin.vim	/^inoremap <C-A> <C-O>gg<C-O>gH<C-O>G$/;"	m
<C-A>	mswin.vim	/^noremap <C-A> gggH<C-O>G$/;"	m
<C-A>	mswin.vim	/^onoremap <C-A> <C-C>gggH<C-O>G$/;"	m
<C-B>	macros/less.vim	/^map <C-B> b$/;"	m
<C-C>	mswin.vim	/^vnoremap <C-C> "+y$/;"	m
<C-D>	ftplugin/cobol.vim	/^    inoremap <silent> <buffer> <C-D> <C-R>=<SID>DecreaseIndent()<CR><C-R>=<SID>RestoreShiftwidth()<CR>$/;"	m
<C-D>	macros/less.vim	/^map <C-D> d$/;"	m
<C-Down>	vimrc.vim	/^nmap <C-Down> <C-W><<C-W><$/;"	m
<C-E>	macros/less.vim	/^map <C-E> <CR>$/;"	m
<C-F4>	mswin.vim	/^cnoremap <C-F4> <C-C><C-W>c$/;"	m
<C-F4>	mswin.vim	/^inoremap <C-F4> <C-O><C-W>c$/;"	m
<C-F4>	mswin.vim	/^noremap <C-F4> <C-W>c$/;"	m
<C-F4>	mswin.vim	/^onoremap <C-F4> <C-C><C-W>c$/;"	m
<C-F9>	ftplugin/c.vim	/^ map  <buffer>  <silent>  <C-F9>       :call C_Run()<CR>$/;"	m
<C-F9>	ftplugin/c.vim	/^imap  <buffer>  <silent>  <C-F9>  <C-C>:call C_Run()<CR>$/;"	m
<C-F9>	ftplugin/sh.vim	/^    vmap  <buffer>  <silent>  <C-F9>   <C-C>:call BASH_Run("v")<CR>$/;"	m
<C-F9>	ftplugin/sh.vim	/^   map  <buffer>  <silent>  <C-F9>        :call BASH_Run("n")<CR>$/;"	m
<C-F9>	ftplugin/sh.vim	/^  imap  <buffer>  <silent>  <C-F9>   <C-C>:call BASH_Run("n")<CR>$/;"	m
<C-F>	evim.vim	/^cnoremap <C-F> <C-C>:promptfind<CR>$/;"	m
<C-F>	evim.vim	/^inoremap <C-F> <C-O>:promptfind<CR>$/;"	m
<C-F>	evim.vim	/^noremap <C-F> :promptfind<CR>$/;"	m
<C-F>	evim.vim	/^onoremap <C-F> <C-C>:promptfind<CR>$/;"	m
<C-F>	evim.vim	/^vnoremap <C-F> y:promptfind <C-R>"<CR>$/;"	m
<C-F>	macros/less.vim	/^map <C-F> <Space>$/;"	m
<C-Insert>	mswin.vim	/^vnoremap <C-Insert> "+y$/;"	m
<C-J>	macros/less.vim	/^map <C-J> <CR>$/;"	m
<C-J>	plugin/imaps.vim	/^		vmap <C-J> <Plug>IMAP_DeleteAndJumpForward$/;"	m
<C-J>	plugin/imaps.vim	/^		vmap <C-J> <Plug>IMAP_JumpForward$/;"	m
<C-J>	plugin/imaps.vim	/^    imap <C-J> <Plug>IMAP_JumpForward$/;"	m
<C-J>	plugin/imaps.vim	/^    nmap <C-J> <Plug>IMAP_JumpForward$/;"	m
<C-K>	macros/less.vim	/^map <C-K> k$/;"	m
<C-Left>	vimrc.vim	/^nmap <C-Left> <C-W>-<C-W>-$/;"	m
<C-N>	ftplugin/ada.vim	/^      inoremap <unique> <buffer> <C-N> <C-R>=ada#Completion("\\<lt>C-N>")<cr>$/;"	m
<C-N>	macros/less.vim	/^map <C-N> <CR>$/;"	m
<C-P>	ftplugin/ada.vim	/^      inoremap <unique> <buffer> <C-P> <C-R>=ada#Completion("\\<lt>C-P>")<cr>$/;"	m
<C-P>	macros/less.vim	/^map <C-P> k$/;"	m
<C-Q>		<C-V>	mswin.vim	/^noremap <C-Q>		<C-V>$/;"	m
<C-R>	macros/less.vim	/^noremap <script> <C-R> <C-L><SID>L$/;"	m
<C-Right>	vimrc.vim	/^nmap <C-Right> <C-W>+<C-W>+$/;"	m
<C-S>		:update<CR>	mswin.vim	/^noremap <C-S>		:update<CR>$/;"	m
<C-S>		<C-C>:update<CR>	mswin.vim	/^vnoremap <C-S>		<C-C>:update<CR>$/;"	m
<C-S>		<C-O>:update<CR>	mswin.vim	/^inoremap <C-S>		<C-O>:update<CR>$/;"	m
<C-T>	ftplugin/cobol.vim	/^    inoremap <silent> <buffer> <C-T> <C-R>=<SID>IncreaseIndent()<CR><C-R>=<SID>RestoreShiftwidth()<CR>$/;"	m
<C-T>	ftplugin/pdf.vim	/^nnoremap <silent><buffer> <C-T> :if len(b:pdf_tagstack) > 0 <Bar> call setpos('.',remove(b:pdf_tagstack, -1)) <Bar> else <Bar> exe "norm! \\<Lt>C-T>" <Bar> endif<CR>$/;"	m
<C-Tab>	mswin.vim	/^cnoremap <C-Tab> <C-C><C-W>w$/;"	m
<C-Tab>	mswin.vim	/^inoremap <C-Tab> <C-O><C-W>w$/;"	m
<C-Tab>	mswin.vim	/^noremap <C-Tab> <C-W>w$/;"	m
<C-Tab>	mswin.vim	/^onoremap <C-Tab> <C-C><C-W>w$/;"	m
<C-U>	macros/less.vim	/^noremap <script> <C-U> <C-U><SID>L$/;"	m
<C-U>	vimrc_example.vim	/^inoremap <C-U> <C-G>u<C-U>$/;"	m
<C-Up>	vimrc.vim	/^nmap <C-Up> <C-W>><C-W>>$/;"	m
<C-V>		"+gP	mswin.vim	/^map <C-V>		"+gP$/;"	m
<C-V>		<C-R>+	mswin.vim	/^cmap <C-V>		<C-R>+$/;"	m
<C-V>	macros/less.vim	/^map <C-V> <Space>$/;"	m
<C-X>	mswin.vim	/^vnoremap <C-X> "+x$/;"	m
<C-X><C-]>	ftplugin/ada.vim	/^      inoremap <unique> <buffer> <C-X><C-]> <C-R>=<SID>ada#Completion("\\<lt>C-X>\\<lt>C-]>")<cr>$/;"	m
<C-Y>	macros/less.vim	/^map <C-Y> k$/;"	m
<C-Y>	mswin.vim	/^inoremap <C-Y> <C-O><C-R>$/;"	m
<C-Y>	mswin.vim	/^noremap <C-Y> <C-R>$/;"	m
<C-Z>	mswin.vim	/^inoremap <C-Z> <C-O>u$/;"	m
<C-Z>	mswin.vim	/^noremap <C-Z> u$/;"	m
<C-]>	ftplugin/ada.vim	/^	 nnoremap <unique> <buffer> <C-]>    :call ada#Jump_Tag ('', 'tjump')<cr>$/;"	m
<C-]>	ftplugin/ada.vim	/^	 nnoremap <unique> <buffer> <C-]>    :call ada#List_Tag ()<cr>$/;"	m
<C-]>	ftplugin/pdf.vim	/^nnoremap <silent><buffer> <C-]> :call <SID>Tag()<CR>$/;"	m
<C-j>	ftplugin/c.vim	/^  imap    <buffer>  <silent>  <C-j>    <C-R>=C_JumpCtrlJ()<CR>$/;"	m
<C-j>	ftplugin/c.vim	/^  nmap    <buffer>  <silent>  <C-j>   i<C-R>=C_JumpCtrlJ()<CR>$/;"	m
<C-j>	ftplugin/sh.vim	/^  imap    <buffer>  <silent>  <C-j>    <C-R>=BASH_JumpCtrlJ()<CR>$/;"	m
<C-j>	ftplugin/sh.vim	/^  nmap    <buffer>  <silent>  <C-j>   i<C-R>=BASH_JumpCtrlJ()<CR>$/;"	m
<C-o><plug>	ftplugin/latex-suite/elementmacros.vim	/^imap <silent> <script> <C-o><plug> <Nop>$/;"	m
<C-o><plug>	ftplugin/latex-suite/envmacros.vim	/^imap <silent> <script> <C-o><plug> <Nop>$/;"	m
<C-o><plug>	ftplugin/latex-suite/main.vim	/^imap <silent> <script> <C-o><plug> <Nop>$/;"	m
<CR>	macros/less.vim	/^noremap <script> <CR> <C-E><SID>L$/;"	m
<CR>	optwin.vim	/^inoremap <silent> <buffer> <CR> <Esc>:call <SID>CR()<CR>$/;"	m
<CR>	optwin.vim	/^noremap <silent> <buffer> <CR> <C-\\><C-N>:call <SID>CR()<CR>$/;"	m
<Down>	evim.vim	/^inoremap <Down> <C-R>=pumvisible() ? "\\<lt>Down>" : "\\<lt>C-O>gj"<CR>$/;"	m
<Down>	ftplugin/flexwiki.vim	/^      imap <buffer> <Down>   <C-o>gj$/;"	m
<Down>	ftplugin/flexwiki.vim	/^  nmap <buffer> <Down> gj$/;"	m
<Down>	ftplugin/flexwiki.vim	/^  vmap <buffer> <Down> gj$/;"	m
<Esc><	macros/less.vim	/^map <Esc>< g$/;"	m
<Esc><Space>	macros/less.vim	/^map <Esc><Space> <Space>$/;"	m
<Esc>>	macros/less.vim	/^map <Esc>> G$/;"	m
<Esc>v	macros/less.vim	/^map <Esc>v b$/;"	m
<F1>	vimrc.vim	/^nmap <silent> <F1> :copen<CR>$/;"	m
<F2>	vimrc.vim	/^nmap <silent> <F2> :cn<CR> $/;"	m
<F3>	vimrc.vim	/^nmap <silent> <F3> :cp<CR>$/;"	m
<F4>	vimrc.vim	/^nmap <silent> <F4> :make<CR>$/;"	m
<F5>	vimrc.vim	/^nmap <silent> <F5> :compiler gf<CR>$/;"	m
<F7>	ftplugin/fortran_codecomplete.vim	/^imap <F7> :python fortran_complete()<cr>A$/;"	m
<F7>	ftplugin/fortran_codecomplete.vim	/^nmap <F7> :python fortran_complete()<cr>A$/;"	m
<F9>	ftplugin/c.vim	/^ map  <buffer>  <silent>    <F9>       :call C_Link()<CR>:call C_HlMessage()<CR>$/;"	m
<F9>	ftplugin/c.vim	/^imap  <buffer>  <silent>    <F9>  <C-C>:call C_Link()<CR>:call C_HlMessage()<CR>$/;"	m
<F9>	ftplugin/sh.vim	/^   map  <buffer>  <silent>    <F9>        :call BASH_Debugger()<CR>:redraw!<CR>$/;"	m
<F9>	ftplugin/sh.vim	/^  imap  <buffer>  <silent>    <F9>   <C-C>:call BASH_Debugger()<CR>:redraw!<CR>$/;"	m
<Leader>K	ftplugin/man.vim	/^  nmap <Leader>K :call <SID>PreGetPage(0)<CR>$/;"	m
<Leader>be	plugin/bufexplorer.vim	/^nmap <script> <silent> <unique> <Leader>be :BufExplorer<CR>$/;"	m
<Leader>bs	plugin/bufexplorer.vim	/^nmap <script> <silent> <unique> <Leader>bs :BufExplorerHorizontalSplit<CR>$/;"	m
<Leader>bv	plugin/bufexplorer.vim	/^nmap <script> <silent> <unique> <Leader>bv :BufExplorerVerticalSplit<CR>$/;"	m
<Leader>cc	plugin/errormarker.vim	/^nmap <silent> <unique> <Leader>cc :ErrorAtCursor<CR>$/;"	m
<Leader>f	plugin/txtbrowser.vim	/^    nmap <script> <silent> <unique> <Leader>f <ESC>:TFind <cword> <CR>$/;"	m
<Leader>f	plugin/txtbrowser.vim	/^    vmap <script> <silent> <unique> <Leader>f y<ESC>:TFind <c-r>" <CR>$/;"	m
<Leader>g	plugin/txtbrowser.vim	/^    nmap <script> <silent> <unique> <Leader>g <ESC>:TGoto <CR>$/;"	m
<Leader>g	plugin/txtbrowser.vim	/^    vmap <script> <silent> <unique> <Leader>g y<ESC>:TGoto <c-r>" <CR>$/;"	m
<Leader>lbs	plugin/bash-support.vim	/^	nmap    <silent>  <Leader>lbs             :call BASH_CreateGuiMenus()<CR>$/;"	m
<Leader>lcs	plugin/c.vim	/^	nmap  <unique>  <silent>  <Leader>lcs   :call C_CreateGuiMenus()<CR>$/;"	m
<Leader>o	ftplugin/changelog.vim	/^    map <buffer> <silent> <Leader>o <Esc>:call <SID>new_changelog_entry()<CR>$/;"	m
<Leader>o	ftplugin/changelog.vim	/^  nmap <silent> <Leader>o :call <SID>open_changelog()<CR>$/;"	m
<Leader>phtÂ :	vimrc.vim	/^   map <Leader>phtÂ : call PreviewHTML_TextOnly()<CR>$/;"	m
<Leader>s	plugin/txtbrowser.vim	/^    nmap <script> <silent> <unique> <Leader>s <ESC>:TSearch <cword> <CR>$/;"	m
<Leader>s	plugin/txtbrowser.vim	/^    vmap <script> <silent> <unique> <Leader>s y<ESC>:TSearch <c-r>" <CR>$/;"	m
<Leader>ubs	plugin/bash-support.vim	/^	nmap    <silent>  <Leader>ubs             :call BASH_RemoveGuiMenus()<CR>$/;"	m
<Leader>ucs	plugin/c.vim	/^	nmap  <unique>  <silent>  <Leader>ucs   :call C_RemoveGuiMenus()<CR>$/;"	m
<LeftDrag>	<RightDrag>	macros/swapmous.vim	/^noremap	 <LeftDrag>	<RightDrag>$/;"	m
<LeftDrag>	<RightDrag>	macros/swapmous.vim	/^noremap! <LeftDrag>	<RightDrag>$/;"	m
<LeftMouse>	<RightMouse>	macros/swapmous.vim	/^noremap	 <LeftMouse>	<RightMouse>$/;"	m
<LeftMouse>	<RightMouse>	macros/swapmous.vim	/^noremap! <LeftMouse>	<RightMouse>$/;"	m
<LeftRelease>	<RightRelease>	macros/swapmous.vim	/^noremap	 <LeftRelease>	<RightRelease>$/;"	m
<LeftRelease>	<RightRelease>	macros/swapmous.vim	/^noremap! <LeftRelease>	<RightRelease>$/;"	m
<LocalLeader>+ai	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+ai        :call C_InsertTemplate("cpp.accessor-implementation")<CR>$/;"	m
<LocalLeader>+ai	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+ai   <Esc>:call C_InsertTemplate("cpp.accessor-implementation")<CR>$/;"	m
<LocalLeader>+c	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+c         :call C_InsertTemplate("cpp.class-definition")<CR>$/;"	m
<LocalLeader>+c	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+c    <Esc>:call C_InsertTemplate("cpp.class-definition")<CR>$/;"	m
<LocalLeader>+c.	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+c.        :call C_InsertTemplate("cpp.catch-points")<CR>$/;"	m
<LocalLeader>+c.	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+c.   <Esc>:call C_InsertTemplate("cpp.catch-points")<CR>$/;"	m
<LocalLeader>+c.	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>+c.   <Esc>:call C_InsertTemplate("cpp.catch-points", "v")<CR>$/;"	m
<LocalLeader>+ca	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+ca        :call C_InsertTemplate("cpp.catch")<CR>$/;"	m
<LocalLeader>+ca	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+ca   <Esc>:call C_InsertTemplate("cpp.catch")<CR>$/;"	m
<LocalLeader>+ca	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>+ca   <Esc>:call C_InsertTemplate("cpp.catch", "v")<CR>$/;"	m
<LocalLeader>+ci	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+ci        :call C_InsertTemplate("cpp.class-implementation")<CR>$/;"	m
<LocalLeader>+ci	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+ci   <Esc>:call C_InsertTemplate("cpp.class-implementation")<CR>$/;"	m
<LocalLeader>+cn	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+cn        :call C_InsertTemplate("cpp.class-using-new-definition")<CR>$/;"	m
<LocalLeader>+cn	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+cn   <Esc>:call C_InsertTemplate("cpp.class-using-new-definition")<CR>$/;"	m
<LocalLeader>+cni	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+cni       :call C_InsertTemplate("cpp.class-using-new-implementation")<CR>$/;"	m
<LocalLeader>+cni	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+cni  <Esc>:call C_InsertTemplate("cpp.class-using-new-implementation")<CR>$/;"	m
<LocalLeader>+co	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+co        :call C_InsertTemplate("cpp.cout")<CR>$/;"	m
<LocalLeader>+co	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+co   <Esc>:call C_InsertTemplate("cpp.cout")<CR>$/;"	m
<LocalLeader>+ec	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+ec        :call C_InsertTemplate("cpp.error-class")<CR>$/;"	m
<LocalLeader>+ec	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+ec   <Esc>:call C_InsertTemplate("cpp.error-class")<CR>$/;"	m
<LocalLeader>+mi	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+mi        :call C_InsertTemplate("cpp.method-implementation")<CR>$/;"	m
<LocalLeader>+mi	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+mi   <Esc>:call C_InsertTemplate("cpp.method-implementation")<CR>$/;"	m
<LocalLeader>+pc	ftplugin/c.vim	/^ noremap    <buffer>  <LocalLeader>+pc                 :IncludeCppCLibrary<Space>$/;"	m
<LocalLeader>+pc	ftplugin/c.vim	/^inoremap    <buffer>  <LocalLeader>+pc            <Esc>:IncludeCppC9Library<Space>$/;"	m
<LocalLeader>+ps	ftplugin/c.vim	/^ noremap    <buffer>  <LocalLeader>+ps                 :IncludeCppLibrary<Space>$/;"	m
<LocalLeader>+ps	ftplugin/c.vim	/^inoremap    <buffer>  <LocalLeader>+ps            <Esc>:IncludeCppLibrary<Space>$/;"	m
<LocalLeader>+tai	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+tai       :call C_InsertTemplate("cpp.template-accessor-implementation")<CR>$/;"	m
<LocalLeader>+tai	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+tai  <Esc>:call C_InsertTemplate("cpp.template-accessor-implementation")<CR>$/;"	m
<LocalLeader>+tc	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+tc        :call C_InsertTemplate("cpp.template-class-definition")<CR>$/;"	m
<LocalLeader>+tc	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+tc   <Esc>:call C_InsertTemplate("cpp.template-class-definition")<CR>$/;"	m
<LocalLeader>+tci	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+tci       :call C_InsertTemplate("cpp.template-class-implementation")<CR>$/;"	m
<LocalLeader>+tci	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+tci  <Esc>:call C_InsertTemplate("cpp.template-class-implementation")<CR>$/;"	m
<LocalLeader>+tcn	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+tcn       :call C_InsertTemplate("cpp.template-class-using-new-definition")<CR>$/;"	m
<LocalLeader>+tcn	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+tcn  <Esc>:call C_InsertTemplate("cpp.template-class-using-new-definition")<CR>$/;"	m
<LocalLeader>+tcni	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+tcni      :call C_InsertTemplate("cpp.template-class-using-new-implementation")<CR>$/;"	m
<LocalLeader>+tcni	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+tcni <Esc>:call C_InsertTemplate("cpp.template-class-using-new-implementation")<CR>$/;"	m
<LocalLeader>+tf	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+tf        :call C_InsertTemplate("cpp.template-function")<CR>$/;"	m
<LocalLeader>+tf	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+tf   <Esc>:call C_InsertTemplate("cpp.template-function")<CR>$/;"	m
<LocalLeader>+tmi	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+tmi       :call C_InsertTemplate("cpp.template-method-implementation")<CR>$/;"	m
<LocalLeader>+tmi	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+tmi  <Esc>:call C_InsertTemplate("cpp.template-method-implementation")<CR>$/;"	m
<LocalLeader>+tr	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>+tr        :call C_InsertTemplate("cpp.try-catch")<CR>$/;"	m
<LocalLeader>+tr	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>+tr   <Esc>:call C_InsertTemplate("cpp.try-catch")<CR>$/;"	m
<LocalLeader>+tr	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>+tr   <Esc>:call C_InsertTemplate("cpp.try-catch", "v")<CR>$/;"	m
<LocalLeader>C	ftplugin/lprolog.vim	/^    nmap <buffer> <LocalLeader>C <Plug>LUncomOff$/;"	m
<LocalLeader>C	ftplugin/lprolog.vim	/^    vmap <buffer> <LocalLeader>C <Plug>BUncomOff$/;"	m
<LocalLeader>C	ftplugin/ocaml.vim	/^    nmap <buffer> <LocalLeader>C <Plug>LUncomOff$/;"	m
<LocalLeader>C	ftplugin/ocaml.vim	/^    vmap <buffer> <LocalLeader>C <Plug>BUncomOff$/;"	m
<LocalLeader>S	ftplugin/ocaml.vim	/^  map <LocalLeader>S :call OCaml_switch(1)<CR>$/;"	m
<LocalLeader>c	ftplugin/lprolog.vim	/^    nmap <buffer> <LocalLeader>c <Plug>LUncomOn$/;"	m
<LocalLeader>c	ftplugin/lprolog.vim	/^    vmap <buffer> <LocalLeader>c <Plug>BUncomOn$/;"	m
<LocalLeader>c	ftplugin/ocaml.vim	/^    nmap <buffer> <LocalLeader>c <Plug>LUncomOn$/;"	m
<LocalLeader>c	ftplugin/ocaml.vim	/^    vmap <buffer> <LocalLeader>c <Plug>BUncomOn$/;"	m
<LocalLeader>c	ftplugin/spec.vim	/^		map <buffer> <LocalLeader>c <Plug>SpecChangelog$/;"	m
<LocalLeader>c*	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>c*         :call C_CodeComment("a","yes")<CR>:nohlsearch<CR>j$/;"	m
<LocalLeader>c*	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>c*    <Esc>:call C_CodeComment("v","yes")<CR>:nohlsearch<CR>j$/;"	m
<LocalLeader>cc	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cc         :call C_CodeComment("a","no")<CR>:nohlsearch<CR>j$/;"	m
<LocalLeader>cc	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>cc    <Esc>:call C_CodeComment("v","no")<CR>:nohlsearch<CR>j$/;"	m
<LocalLeader>cc	ftplugin/sh.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cc         :call BASH_CommentToggle()<CR>j$/;"	m
<LocalLeader>cc	ftplugin/sh.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>cc    <Esc>:call BASH_CommentToggle()<CR>j$/;"	m
<LocalLeader>cc	ftplugin/sh.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>cc    <Esc>:call BASH_CommentToggleRange()<CR>j$/;"	m
<LocalLeader>ccl	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ccl        :call C_InsertTemplate("comment.class")<CR>$/;"	m
<LocalLeader>ccl	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ccl   <Esc>:call C_InsertTemplate("comment.class")<CR>$/;"	m
<LocalLeader>ccs	ftplugin/c.vim	/^ noremap    <buffer>            <LocalLeader>ccs   <Esc>:CFileSection<Space>$/;"	m
<LocalLeader>ccs	ftplugin/c.vim	/^inoremap    <buffer>            <LocalLeader>ccs   <Esc>:CFileSection<Space>$/;"	m
<LocalLeader>cd	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cd    <Esc>:call C_InsertDateAndTime('d')<CR>$/;"	m
<LocalLeader>cd	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>cd    <Esc>:call C_InsertDateAndTime('d')<CR>a$/;"	m
<LocalLeader>cd	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>cd   s<Esc>:call C_InsertDateAndTime('d')<CR>a$/;"	m
<LocalLeader>cd	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>cd           :call BASH_InsertDateAndTime('d')<CR>$/;"	m
<LocalLeader>cd	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>cd      <Esc>:call BASH_InsertDateAndTime('d')<CR>a$/;"	m
<LocalLeader>cd	ftplugin/sh.vim	/^vnoremap  <buffer>  <silent>  <LocalLeader>cd     s<Esc>:call BASH_InsertDateAndTime('d')<CR>$/;"	m
<LocalLeader>ce	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>ce           ^iecho<Space>"<End>"<Esc>j'$/;"	m
<LocalLeader>ce	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>ce      <C-C>^iecho<Space>"<End>"<Esc>j'$/;"	m
<LocalLeader>cfdh	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cfdh       :call C_InsertTemplate("comment.file-description-header")<CR>$/;"	m
<LocalLeader>cfdh	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>cfdh  <Esc>:call C_InsertTemplate("comment.file-description-header")<CR>$/;"	m
<LocalLeader>cfdi	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cfdi       :call C_InsertTemplate("comment.file-description")<CR>$/;"	m
<LocalLeader>cfdi	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>cfdi  <Esc>:call C_InsertTemplate("comment.file-description")<CR>$/;"	m
<LocalLeader>cfr	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cfr        :call C_InsertTemplate("comment.frame")<CR>$/;"	m
<LocalLeader>cfr	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>cfr   <Esc>:call C_InsertTemplate("comment.frame")<CR>$/;"	m
<LocalLeader>cfr	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>cfr          :call BASH_InsertTemplate("comment.frame")<CR>$/;"	m
<LocalLeader>cfr	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>cfr     <Esc>:call BASH_InsertTemplate("comment.frame")<CR>$/;"	m
<LocalLeader>cfu	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cfu        :call C_InsertTemplate("comment.function")<CR>$/;"	m
<LocalLeader>cfu	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>cfu   <Esc>:call C_InsertTemplate("comment.function")<CR>$/;"	m
<LocalLeader>cfu	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>cfu          :call BASH_InsertTemplate("comment.function")<CR>$/;"	m
<LocalLeader>cfu	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>cfu     <Esc>:call BASH_InsertTemplate("comment.function")<CR>$/;"	m
<LocalLeader>ch	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>ch           :call BASH_InsertTemplate("comment.file-description")<CR>$/;"	m
<LocalLeader>ch	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>ch      <Esc>:call BASH_InsertTemplate("comment.file-description")<CR>$/;"	m
<LocalLeader>chs	ftplugin/c.vim	/^ noremap    <buffer>            <LocalLeader>chs   <Esc>:HFileSection<Space>$/;"	m
<LocalLeader>chs	ftplugin/c.vim	/^inoremap    <buffer>            <LocalLeader>chs   <Esc>:HFileSection<Space>$/;"	m
<LocalLeader>cj	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cj         :call C_AdjustLineEndComm("a")<CR>$/;"	m
<LocalLeader>cj	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>cj    <Esc>:call C_AdjustLineEndComm("a")<CR>a$/;"	m
<LocalLeader>cj	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>cj    <Esc>:call C_AdjustLineEndComm("v")<CR>$/;"	m
<LocalLeader>cj	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>cj           :call BASH_AdjustLineEndComm("a")<CR>$/;"	m
<LocalLeader>cj	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>cj      <Esc>:call BASH_AdjustLineEndComm("a")<CR>$/;"	m
<LocalLeader>cj	ftplugin/sh.vim	/^vnoremap  <buffer>  <silent>  <LocalLeader>cj      <Esc>:call BASH_AdjustLineEndComm("v")<CR>$/;"	m
<LocalLeader>ckb	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>ckb     $:call BASH_InsertTemplate("comment.keyword-bug")       <CR>$/;"	m
<LocalLeader>ckb	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>ckb     <C-C>$:call BASH_InsertTemplate("comment.keyword-bug")       <CR>$/;"	m
<LocalLeader>ckc	ftplugin/c.vim	/^ noremap    <buffer>            <LocalLeader>ckc   <Esc>:KeywordComment<Space>$/;"	m
<LocalLeader>ckc	ftplugin/c.vim	/^inoremap    <buffer>            <LocalLeader>ckc   <Esc>:KeywordComment<Space>$/;"	m
<LocalLeader>ckn	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>ckn     $:call BASH_InsertTemplate("comment.keyword-keyword")   <CR>$/;"	m
<LocalLeader>ckn	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>ckn     <C-C>$:call BASH_InsertTemplate("comment.keyword-keyword")   <CR>$/;"	m
<LocalLeader>cko	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>cko     $:call BASH_InsertTemplate("comment.keyword-workaround")<CR>$/;"	m
<LocalLeader>cko	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>cko     <C-C>$:call BASH_InsertTemplate("comment.keyword-workaround")<CR>$/;"	m
<LocalLeader>ckr	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>ckr     $:call BASH_InsertTemplate("comment.keyword-tricky")    <CR>$/;"	m
<LocalLeader>ckr	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>ckr     <C-C>$:call BASH_InsertTemplate("comment.keyword-tricky")    <CR>$/;"	m
<LocalLeader>ckt	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>ckt     $:call BASH_InsertTemplate("comment.keyword-todo")      <CR>$/;"	m
<LocalLeader>ckt	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>ckt     <C-C>$:call BASH_InsertTemplate("comment.keyword-todo")      <CR>$/;"	m
<LocalLeader>ckw	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>ckw     $:call BASH_InsertTemplate("comment.keyword-warning")   <CR>$/;"	m
<LocalLeader>ckw	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>ckw     <C-C>$:call BASH_InsertTemplate("comment.keyword-warning")   <CR>$/;"	m
<LocalLeader>cl	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cl         :call C_LineEndComment()<CR>$/;"	m
<LocalLeader>cl	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>cl    <Esc>:call C_LineEndComment()<CR>$/;"	m
<LocalLeader>cl	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>cl    <Esc>:call C_MultiLineEndComments()<CR>a$/;"	m
<LocalLeader>cl	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>cl           :call BASH_LineEndComment()<CR>A$/;"	m
<LocalLeader>cl	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>cl      <Esc>:call BASH_LineEndComment()<CR>A$/;"	m
<LocalLeader>cl	ftplugin/sh.vim	/^vnoremap  <buffer>  <silent>  <LocalLeader>cl      <Esc>:call BASH_MultiLineEndComments()<CR>A$/;"	m
<LocalLeader>cme	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cme        :call C_InsertTemplate("comment.method")<CR>$/;"	m
<LocalLeader>cme	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>cme   <Esc>:call C_InsertTemplate("comment.method")<CR>$/;"	m
<LocalLeader>co	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>co         :call C_CommentCode("a")<CR>:nohlsearch<CR>$/;"	m
<LocalLeader>co	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>co    <Esc>:call C_CommentCode("v")<CR>:nohlsearch<CR>$/;"	m
<LocalLeader>cr	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>cr           0:s\/^\\s*echo\\s\\+\\"\/\/ \\| s\/\\s*\\"\\s*$\/\/ \\| :normal ==<CR>j'$/;"	m
<LocalLeader>cr	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>cr      <C-C>0:s\/^\\s*echo\\s\\+\\"\/\/ \\| s\/\\s*\\"\\s*$\/\/ \\| :normal ==<CR>j'$/;"	m
<LocalLeader>cs	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>cs         :call C_GetLineEndCommCol()<CR>$/;"	m
<LocalLeader>cs	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>cs           :call BASH_GetLineEndCommCol()<CR>$/;"	m
<LocalLeader>cs	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>cs      <Esc>:call BASH_GetLineEndCommCol()<CR>$/;"	m
<LocalLeader>csc	ftplugin/c.vim	/^ noremap    <buffer>            <LocalLeader>csc   <Esc>:SpecialComment<Space>$/;"	m
<LocalLeader>csc	ftplugin/c.vim	/^inoremap    <buffer>            <LocalLeader>csc   <Esc>:SpecialComment<Space>$/;"	m
<LocalLeader>ct	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ct    <Esc>:call C_InsertDateAndTime('dt')<CR>$/;"	m
<LocalLeader>ct	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ct    <Esc>:call C_InsertDateAndTime('dt')<CR>a$/;"	m
<LocalLeader>ct	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>ct   s<Esc>:call C_InsertDateAndTime('dt')<CR>a$/;"	m
<LocalLeader>ct	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>ct           :call BASH_InsertDateAndTime('dt')<CR>$/;"	m
<LocalLeader>ct	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>ct      <Esc>:call BASH_InsertDateAndTime('dt')<CR>a$/;"	m
<LocalLeader>ct	ftplugin/sh.vim	/^vnoremap  <buffer>  <silent>  <LocalLeader>ct     s<Esc>:call BASH_InsertDateAndTime('dt')<CR>$/;"	m
<LocalLeader>cv	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>cv           :call BASH_CommentVimModeline()<CR>$/;"	m
<LocalLeader>cv	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>cv      <C-C>:call BASH_CommentVimModeline()<CR>$/;"	m
<LocalLeader>h	ftplugin/man.vim	/^      nmap <buffer> <LocalLeader>h <Plug>ManBS$/;"	m
<LocalLeader>hb	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>hb            :call BASH_help('b')<CR>$/;"	m
<LocalLeader>hb	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>hb       <Esc>:call BASH_help('b')<CR>$/;"	m
<LocalLeader>hh	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>hh            :call BASH_help('h')<CR>$/;"	m
<LocalLeader>hh	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>hh       <Esc>:call BASH_help('h')<CR>$/;"	m
<LocalLeader>hm	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>hm         :call C_Help("m")<CR>$/;"	m
<LocalLeader>hm	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>hm    <C-C>:call C_Help("m")<CR>$/;"	m
<LocalLeader>hm	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>hm            :call BASH_help('m')<CR>$/;"	m
<LocalLeader>hm	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>hm       <Esc>:call BASH_help('m')<CR>$/;"	m
<LocalLeader>hp	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>hp         :call C_HelpCsupport()<CR>$/;"	m
<LocalLeader>hp	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>hp    <C-C>:call C_HelpCsupport()<CR>$/;"	m
<LocalLeader>hp	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>hp           :call BASH_HelpBASHsupport()<CR>$/;"	m
<LocalLeader>hp	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>hp      <Esc>:call BASH_HelpBASHsupport()<CR>$/;"	m
<LocalLeader>i0	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>i0         :call C_CodeFor("up"  , "a")<CR>$/;"	m
<LocalLeader>i0	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>i0    <Esc>:call C_CodeFor("up"  , "a")<CR>i$/;"	m
<LocalLeader>i0	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>i0    <Esc>:call C_CodeFor("up"  , "v")<CR>$/;"	m
<LocalLeader>ias	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ias        :call C_InsertTemplate("idioms.assert")<CR>$/;"	m
<LocalLeader>ias	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ias   <Esc>:call C_InsertTemplate("idioms.assert")<CR>$/;"	m
<LocalLeader>ias	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>ias   <Esc>:call C_InsertTemplate("idioms.assert", "v")<CR>$/;"	m
<LocalLeader>ica	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ica        :call C_InsertTemplate("idioms.calloc")<CR>$/;"	m
<LocalLeader>ica	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ica   <Esc>:call C_InsertTemplate("idioms.calloc")<CR>$/;"	m
<LocalLeader>ie	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ie         :call C_InsertTemplate("idioms.enum")<CR>$/;"	m
<LocalLeader>ie	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ie    <Esc>:call C_InsertTemplate("idioms.enum")<CR>$/;"	m
<LocalLeader>ie	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>ie    <Esc>:call C_InsertTemplate("idioms.enum"  , "v")<CR>$/;"	m
<LocalLeader>if	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>if         :call C_InsertTemplate("idioms.function")<CR>$/;"	m
<LocalLeader>if	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>if    <Esc>:call C_InsertTemplate("idioms.function")<CR>$/;"	m
<LocalLeader>if	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>if    <Esc>:call C_InsertTemplate("idioms.function", "v")<CR>$/;"	m
<LocalLeader>ii	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ii         :call C_InsertTemplate("idioms.open-input-file")<CR>$/;"	m
<LocalLeader>ii	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ii    <Esc>:call C_InsertTemplate("idioms.open-input-file")<CR>$/;"	m
<LocalLeader>ii	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>ii    <Esc>:call C_InsertTemplate("idioms.open-input-file", "v")<CR>$/;"	m
<LocalLeader>im	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>im         :call C_InsertTemplate("idioms.main")<CR>$/;"	m
<LocalLeader>im	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>im    <Esc>:call C_InsertTemplate("idioms.main")<CR>$/;"	m
<LocalLeader>im	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>im    <Esc>:call C_InsertTemplate("idioms.main", "v")<CR>$/;"	m
<LocalLeader>ima	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ima        :call C_InsertTemplate("idioms.malloc")<CR>$/;"	m
<LocalLeader>ima	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ima   <Esc>:call C_InsertTemplate("idioms.malloc")<CR>$/;"	m
<LocalLeader>in	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>in         :call C_CodeFor("down", "a")<CR>$/;"	m
<LocalLeader>in	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>in    <Esc>:call C_CodeFor("down", "a")<CR>i$/;"	m
<LocalLeader>in	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>in    <Esc>:call C_CodeFor("down", "v")<CR>$/;"	m
<LocalLeader>io	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>io         :call C_InsertTemplate("idioms.open-output-file")<CR>$/;"	m
<LocalLeader>io	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>io    <Esc>:call C_InsertTemplate("idioms.open-output-file")<CR>$/;"	m
<LocalLeader>io	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>io    <Esc>:call C_InsertTemplate("idioms.open-output-file", "v")<CR>$/;"	m
<LocalLeader>ip	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ip         :call C_InsertTemplate("idioms.printf")<CR>$/;"	m
<LocalLeader>ip	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ip    <Esc>:call C_InsertTemplate("idioms.printf")<CR>$/;"	m
<LocalLeader>is	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>is         :call C_InsertTemplate("idioms.struct")<CR>$/;"	m
<LocalLeader>is	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>is    <Esc>:call C_InsertTemplate("idioms.struct")<CR>$/;"	m
<LocalLeader>is	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>is    <Esc>:call C_InsertTemplate("idioms.struct", "v")<CR>$/;"	m
<LocalLeader>isc	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>isc        :call C_InsertTemplate("idioms.scanf")<CR>$/;"	m
<LocalLeader>isc	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>isc   <Esc>:call C_InsertTemplate("idioms.scanf")<CR>$/;"	m
<LocalLeader>isf	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>isf        :call C_InsertTemplate("idioms.function-static")<CR>$/;"	m
<LocalLeader>isf	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>isf   <Esc>:call C_InsertTemplate("idioms.function-static")<CR>$/;"	m
<LocalLeader>isf	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>isf   <Esc>:call C_InsertTemplate("idioms.function-static", "v")<CR>$/;"	m
<LocalLeader>isi	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>isi        :call C_InsertTemplate("idioms.sizeof")<CR>$/;"	m
<LocalLeader>isi	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>isi   <Esc>:call C_InsertTemplate("idioms.sizeof")<CR>$/;"	m
<LocalLeader>isi	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>isi   <Esc>:call C_InsertTemplate("idioms.sizeof", "v")<CR>$/;"	m
<LocalLeader>iu	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>iu         :call C_InsertTemplate("idioms.union")<CR>$/;"	m
<LocalLeader>iu	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>iu    <Esc>:call C_InsertTemplate("idioms.union")<CR>$/;"	m
<LocalLeader>iu	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>iu    <Esc>:call C_InsertTemplate("idioms.union" , "v")<CR>$/;"	m
<LocalLeader>nc	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>nc         :call C_ProtoClear()<CR>$/;"	m
<LocalLeader>nc	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>nc    <Esc>:call C_ProtoClear()<CR>$/;"	m
<LocalLeader>ne	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ne         :call C_CodeSnippet("e")<CR>$/;"	m
<LocalLeader>ne	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ne    <Esc>:call C_CodeSnippet("e")<CR>$/;"	m
<LocalLeader>ne	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>ne         :call BASH_CodeSnippets("e")<CR>$/;"	m
<LocalLeader>ni	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ni         :call C_ProtoInsert()<CR>$/;"	m
<LocalLeader>ni	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ni    <Esc>:call C_ProtoInsert()<CR>$/;"	m
<LocalLeader>np	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>np         :call C_ProtoPick("n")<CR>$/;"	m
<LocalLeader>np	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>np    <Esc>:call C_ProtoPick("n")<CR>$/;"	m
<LocalLeader>np	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>np    <Esc>:call C_ProtoPick("v")<CR>$/;"	m
<LocalLeader>nr	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>nr         :call C_CodeSnippet("r")<CR>$/;"	m
<LocalLeader>nr	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>nr    <Esc>:call C_CodeSnippet("r")<CR>$/;"	m
<LocalLeader>nr	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>nr         :call BASH_CodeSnippets("r")<CR>$/;"	m
<LocalLeader>ns	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ns         :call C_ProtoShow()<CR>$/;"	m
<LocalLeader>ns	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ns    <Esc>:call C_ProtoShow()<CR>$/;"	m
<LocalLeader>ntg	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ntg        :call C_EditTemplates("global")<CR>$/;"	m
<LocalLeader>ntg	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>ntg        :call BASH_EditTemplates("global")<CR>$/;"	m
<LocalLeader>ntl	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ntl        :call C_EditTemplates("local")<CR>$/;"	m
<LocalLeader>ntl	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>ntl        :call BASH_EditTemplates("local")<CR>$/;"	m
<LocalLeader>ntr	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ntr        :call C_RereadTemplates()<CR>$/;"	m
<LocalLeader>ntr	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>ntr        :call BASH_RereadTemplates()<CR>$/;"	m
<LocalLeader>nts	ftplugin/c.vim	/^ noremap    <buffer>            <LocalLeader>nts   <Esc>:CStyle<Space>$/;"	m
<LocalLeader>nts	ftplugin/sh.vim	/^ noremap  <buffer>            <LocalLeader>nts   <Esc>:BashStyle<Space>$/;"	m
<LocalLeader>nw	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>nw         :call C_CodeSnippet("w")<CR>$/;"	m
<LocalLeader>nw	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>nw    <Esc>:call C_CodeSnippet("w")<CR>$/;"	m
<LocalLeader>nw	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>nw    <Esc>:call C_CodeSnippet("wv")<CR>$/;"	m
<LocalLeader>nw	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>nw         :call BASH_CodeSnippets("w")<CR>$/;"	m
<LocalLeader>nw	ftplugin/sh.vim	/^vnoremap  <buffer>  <silent>  <LocalLeader>nw    <C-C>:call BASH_CodeSnippets("wv")<CR>$/;"	m
<LocalLeader>p"	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>p"        :call C_InsertTemplate("preprocessor.include-local")<CR>$/;"	m
<LocalLeader>p"	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>p"   <Esc>:call C_InsertTemplate("preprocessor.include-local")<CR>$/;"	m
<LocalLeader>p<	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>p<        :call C_InsertTemplate("preprocessor.include-global")<CR>$/;"	m
<LocalLeader>p<	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>p<   <Esc>:call C_InsertTemplate("preprocessor.include-global")<CR>$/;"	m
<LocalLeader>pal	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>pal   [:alpha:]$/;"	m
<LocalLeader>pal	ftplugin/sh.vim	/^nnoremap  <buffer>  <silent>  <LocalLeader>pal    a[:alpha:]<Esc>$/;"	m
<LocalLeader>pan	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>pan   [:alnum:]$/;"	m
<LocalLeader>pan	ftplugin/sh.vim	/^nnoremap  <buffer>  <silent>  <LocalLeader>pan   a[:alnum:]<Esc>$/;"	m
<LocalLeader>pas	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>pas   [:ascii:]$/;"	m
<LocalLeader>pas	ftplugin/sh.vim	/^nnoremap  <buffer>  <silent>  <LocalLeader>pas    a[:ascii:]<Esc>$/;"	m
<LocalLeader>pb	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>pb    [:blank:]$/;"	m
<LocalLeader>pb	ftplugin/sh.vim	/^nnoremap  <buffer>  <silent>  <LocalLeader>pb    a[:blank:]<Esc>$/;"	m
<LocalLeader>pc	ftplugin/c.vim	/^ noremap    <buffer>  <LocalLeader>pc                  :IncludeC99Library<Space>$/;"	m
<LocalLeader>pc	ftplugin/c.vim	/^inoremap    <buffer>  <LocalLeader>pc             <Esc>:IncludeC99Library<Space>$/;"	m
<LocalLeader>pc	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>pc    [:cntrl:]$/;"	m
<LocalLeader>pc	ftplugin/sh.vim	/^nnoremap  <buffer>  <silent>  <LocalLeader>pc    a[:cntrl:]<Esc>$/;"	m
<LocalLeader>pd	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pd        :call C_InsertTemplate("preprocessor.define")<CR>$/;"	m
<LocalLeader>pd	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pd   <Esc>:call C_InsertTemplate("preprocessor.define")<CR>$/;"	m
<LocalLeader>pd	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>pd    [:digit:]$/;"	m
<LocalLeader>pd	ftplugin/sh.vim	/^nnoremap  <buffer>  <silent>  <LocalLeader>pd    a[:digit:]<Esc>$/;"	m
<LocalLeader>pe	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pe        :call C_InsertTemplate("preprocessor.error")<CR>$/;"	m
<LocalLeader>pe	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pe   <Esc>:call C_InsertTemplate("preprocessor.error")<CR>$/;"	m
<LocalLeader>pg	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>pg    [:graph:]$/;"	m
<LocalLeader>pg	ftplugin/sh.vim	/^nnoremap  <buffer>  <silent>  <LocalLeader>pg    a[:graph:]<Esc>$/;"	m
<LocalLeader>pi0	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pi0       :call C_PPIf0("a")<CR>2ji$/;"	m
<LocalLeader>pi0	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pi0  <Esc>:call C_PPIf0("a")<CR>2ji$/;"	m
<LocalLeader>pi0	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>pi0  <Esc>:call C_PPIf0("v")<CR>$/;"	m
<LocalLeader>pid	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pid       :call C_InsertTemplate("preprocessor.ifdef-else-endif")<CR>$/;"	m
<LocalLeader>pid	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pid  <Esc>:call C_InsertTemplate("preprocessor.ifdef-else-endif")<CR>$/;"	m
<LocalLeader>pid	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>pid  <Esc>:call C_InsertTemplate("preprocessor.ifdef-else-endif", "v")<CR>$/;"	m
<LocalLeader>pie	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pie       :call C_InsertTemplate("preprocessor.if-else-endif")<CR>$/;"	m
<LocalLeader>pie	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pie  <Esc>:call C_InsertTemplate("preprocessor.if-else-endif")<CR>$/;"	m
<LocalLeader>pie	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>pie  <Esc>:call C_InsertTemplate("preprocessor.if-else-endif", "v")<CR>$/;"	m
<LocalLeader>pin	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pin       :call C_InsertTemplate("preprocessor.ifndef-else-endif")<CR>$/;"	m
<LocalLeader>pin	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pin  <Esc>:call C_InsertTemplate("preprocessor.ifndef-else-endif")<CR>$/;"	m
<LocalLeader>pin	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>pin  <Esc>:call C_InsertTemplate("preprocessor.ifndef-else-endif", "v")<CR>$/;"	m
<LocalLeader>pind	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pind      :call C_InsertTemplate("preprocessor.ifndef-def-endif")<CR>$/;"	m
<LocalLeader>pind	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pind <Esc>:call C_InsertTemplate("preprocessor.ifndef-def-endif")<CR>$/;"	m
<LocalLeader>pind	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>pind <Esc>:call C_InsertTemplate("preprocessor.ifndef-def-endif", "v")<CR>$/;"	m
<LocalLeader>pl	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pl        :call C_InsertTemplate("preprocessor.line")<CR>$/;"	m
<LocalLeader>pl	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pl   <Esc>:call C_InsertTemplate("preprocessor.line")<CR>$/;"	m
<LocalLeader>pl	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>pl    [:lower:]$/;"	m
<LocalLeader>pl	ftplugin/sh.vim	/^nnoremap  <buffer>  <silent>  <LocalLeader>pl    a[:lower:]<Esc>$/;"	m
<LocalLeader>pp	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pp        :call C_InsertTemplate("preprocessor.pragma")<CR>$/;"	m
<LocalLeader>pp	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pp   <Esc>:call C_InsertTemplate("preprocessor.pragma")<CR>$/;"	m
<LocalLeader>ppr	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>ppr   [:print:]$/;"	m
<LocalLeader>ppr	ftplugin/sh.vim	/^nnoremap  <buffer>  <silent>  <LocalLeader>ppr   a[:print:]<Esc>$/;"	m
<LocalLeader>ppu	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>ppu   [:punct:]$/;"	m
<LocalLeader>ppu	ftplugin/sh.vim	/^nnoremap  <buffer>  <silent>  <LocalLeader>ppu   a[:punct:]<Esc>$/;"	m
<LocalLeader>pr0	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pr0       :call C_PPIf0Remove()<CR>$/;"	m
<LocalLeader>pr0	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pr0  <Esc>:call C_PPIf0Remove()<CR>$/;"	m
<LocalLeader>ps	ftplugin/c.vim	/^ noremap    <buffer>  <LocalLeader>ps                  :IncludeStdLibrary<Space>$/;"	m
<LocalLeader>ps	ftplugin/c.vim	/^inoremap    <buffer>  <LocalLeader>ps             <Esc>:IncludeStdLibrary<Space>$/;"	m
<LocalLeader>ps	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>ps    [:space:]$/;"	m
<LocalLeader>ps	ftplugin/sh.vim	/^nnoremap  <buffer>  <silent>  <LocalLeader>ps    a[:space:]<Esc>$/;"	m
<LocalLeader>pu	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>pu        :call C_InsertTemplate("preprocessor.undefine")<CR>$/;"	m
<LocalLeader>pu	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>pu   <Esc>:call C_InsertTemplate("preprocessor.undefine")<CR>$/;"	m
<LocalLeader>pu	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>pu    [:upper:]$/;"	m
<LocalLeader>pu	ftplugin/sh.vim	/^nnoremap  <buffer>  <silent>  <LocalLeader>pu    a[:upper:]<Esc>$/;"	m
<LocalLeader>pw	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>pw    [:word:]$/;"	m
<LocalLeader>pw	ftplugin/sh.vim	/^nnoremap  <buffer>  <silent>  <LocalLeader>pw    a[:word:]<Esc>$/;"	m
<LocalLeader>px	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>px    [:xdigit:]$/;"	m
<LocalLeader>px	ftplugin/sh.vim	/^nnoremap  <buffer>  <silent>  <LocalLeader>px    a[:xdigit:]<Esc>$/;"	m
<LocalLeader>q	ftplugin/mail.vim	/^    nmap <buffer> <LocalLeader>q <Plug>MailQuote$/;"	m
<LocalLeader>q	ftplugin/mail.vim	/^    vmap <buffer> <LocalLeader>q <Plug>MailQuote$/;"	m
<LocalLeader>ra	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>ra         :call C_Arguments()<CR>$/;"	m
<LocalLeader>ra	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>ra    <C-C>:call C_Arguments()<CR>$/;"	m
<LocalLeader>ra	ftplugin/sh.vim	/^ map  <buffer>  <silent>  <LocalLeader>ra           :call BASH_CmdLineArguments()<CR>$/;"	m
<LocalLeader>ra	ftplugin/sh.vim	/^imap  <buffer>  <silent>  <LocalLeader>ra      <Esc>:call BASH_CmdLineArguments()<CR>$/;"	m
<LocalLeader>rc	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rc         :call C_Compile()<CR>:call C_HlMessage()<CR>$/;"	m
<LocalLeader>rc	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rc    <C-C>:call C_Compile()<CR>:call C_HlMessage()<CR>$/;"	m
<LocalLeader>rc	ftplugin/sh.vim	/^   map  <buffer>  <silent>  <LocalLeader>rc           :call BASH_SyntaxCheck()<CR>$/;"	m
<LocalLeader>rc	ftplugin/sh.vim	/^  imap  <buffer>  <silent>  <LocalLeader>rc      <Esc>:call BASH_SyntaxCheck()<CR>$/;"	m
<LocalLeader>rco	ftplugin/sh.vim	/^   map  <buffer>  <silent>  <LocalLeader>rco          :call BASH_SyntaxCheckOptionsLocal()<CR>$/;"	m
<LocalLeader>rco	ftplugin/sh.vim	/^  imap  <buffer>  <silent>  <LocalLeader>rco     <Esc>:call BASH_SyntaxCheckOptionsLocal()<CR>$/;"	m
<LocalLeader>rd	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rd         :call C_Indent()<CR>$/;"	m
<LocalLeader>rd	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rd    <C-C>:call C_Indent()<CR>$/;"	m
<LocalLeader>rd	ftplugin/sh.vim	/^   map  <buffer>  <silent>  <LocalLeader>rd           :call BASH_Debugger()<CR>:redraw!<CR>$/;"	m
<LocalLeader>rd	ftplugin/sh.vim	/^  imap  <buffer>  <silent>  <LocalLeader>rd      <Esc>:call BASH_Debugger()<CR>:redraw!<CR>$/;"	m
<LocalLeader>re	ftplugin/c.vim	/^  map    <buffer>  <silent>  <LocalLeader>re         :call C_CodeCheckArguments()<CR>$/;"	m
<LocalLeader>re	ftplugin/c.vim	/^ imap    <buffer>  <silent>  <LocalLeader>re    <C-C>:call C_CodeCheckArguments()<CR>$/;"	m
<LocalLeader>re	ftplugin/sh.vim	/^   map  <buffer>  <silent>  <LocalLeader>re           :call BASH_MakeScriptExecutable()<CR>$/;"	m
<LocalLeader>re	ftplugin/sh.vim	/^  imap  <buffer>  <silent>  <LocalLeader>re      <Esc>:call BASH_MakeScriptExecutable()<CR>$/;"	m
<LocalLeader>rg	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rg         :call C_MakeArguments()<CR>$/;"	m
<LocalLeader>rg	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rg    <C-C>:call C_MakeArguments()<CR>$/;"	m
<LocalLeader>rh	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rh         :call C_Hardcopy("n")<CR>$/;"	m
<LocalLeader>rh	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rh    <C-C>:call C_Hardcopy("n")<CR>$/;"	m
<LocalLeader>rh	ftplugin/c.vim	/^vmap    <buffer>  <silent>  <LocalLeader>rh    <C-C>:call C_Hardcopy("v")<CR>$/;"	m
<LocalLeader>rh	ftplugin/sh.vim	/^ map  <buffer>  <silent>  <LocalLeader>rh           :call BASH_Hardcopy("n")<CR>$/;"	m
<LocalLeader>rh	ftplugin/sh.vim	/^imap  <buffer>  <silent>  <LocalLeader>rh      <Esc>:call BASH_Hardcopy("n")<CR>$/;"	m
<LocalLeader>rh	ftplugin/sh.vim	/^vmap  <buffer>  <silent>  <LocalLeader>rh      <Esc>:call BASH_Hardcopy("v")<CR>$/;"	m
<LocalLeader>ri	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>ri         :call C_SplintArguments()<CR>$/;"	m
<LocalLeader>ri	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>ri    <C-C>:call C_SplintArguments()<CR>$/;"	m
<LocalLeader>rk	ftplugin/c.vim	/^  map    <buffer>  <silent>  <LocalLeader>rk         :call C_CodeCheck()<CR>:call C_HlMessage()<CR>$/;"	m
<LocalLeader>rk	ftplugin/c.vim	/^ imap    <buffer>  <silent>  <LocalLeader>rk    <C-C>:call C_CodeCheck()<CR>:call C_HlMessage()<CR>$/;"	m
<LocalLeader>rl	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rl         :call C_Link()<CR>:call C_HlMessage()<CR>$/;"	m
<LocalLeader>rl	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rl    <C-C>:call C_Link()<CR>:call C_HlMessage()<CR>$/;"	m
<LocalLeader>rm	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rm         :call C_Make()<CR>$/;"	m
<LocalLeader>rm	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rm    <C-C>:call C_Make()<CR>$/;"	m
<LocalLeader>ro	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>ro         :call C_Toggle_Gvim_Xterm()<CR>$/;"	m
<LocalLeader>ro	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>ro    <C-C>:call C_Toggle_Gvim_Xterm()<CR>$/;"	m
<LocalLeader>ro	ftplugin/sh.vim	/^   map  <buffer>  <silent>  <LocalLeader>ro           :call BASH_Toggle_Gvim_Xterm()<CR>$/;"	m
<LocalLeader>ro	ftplugin/sh.vim	/^   map  <buffer>  <silent>  <LocalLeader>ro           :call BASH_Toggle_Gvim_Xterm_MS()<CR>$/;"	m
<LocalLeader>ro	ftplugin/sh.vim	/^  imap  <buffer>  <silent>  <LocalLeader>ro      <Esc>:call BASH_Toggle_Gvim_Xterm()<CR>$/;"	m
<LocalLeader>ro	ftplugin/sh.vim	/^  imap  <buffer>  <silent>  <LocalLeader>ro      <Esc>:call BASH_Toggle_Gvim_Xterm_MS()<CR>$/;"	m
<LocalLeader>rp	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rp         :call C_SplintCheck()<CR>:call C_HlMessage()<CR>$/;"	m
<LocalLeader>rp	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rp    <C-C>:call C_SplintCheck()<CR>:call C_HlMessage()<CR>$/;"	m
<LocalLeader>rr	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rr         :call C_Run()<CR>$/;"	m
<LocalLeader>rr	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rr    <C-C>:call C_Run()<CR>$/;"	m
<LocalLeader>rr	ftplugin/sh.vim	/^  vmap  <buffer>  <silent>  <LocalLeader>rr      <Esc>:call BASH_Run("v")<CR>$/;"	m
<LocalLeader>rr	ftplugin/sh.vim	/^ map  <buffer>  <silent>  <LocalLeader>rr           :call BASH_Run("n")<CR>$/;"	m
<LocalLeader>rr	ftplugin/sh.vim	/^imap  <buffer>  <silent>  <LocalLeader>rr      <Esc>:call BASH_Run("n")<CR>$/;"	m
<LocalLeader>rs	ftplugin/c.vim	/^ map    <buffer>  <silent>  <LocalLeader>rs         :call C_Settings()<CR>$/;"	m
<LocalLeader>rs	ftplugin/c.vim	/^imap    <buffer>  <silent>  <LocalLeader>rs    <C-C>:call C_Settings()<CR>$/;"	m
<LocalLeader>rs	ftplugin/sh.vim	/^ map  <buffer>  <silent>  <LocalLeader>rs           :call BASH_Settings()<CR>$/;"	m
<LocalLeader>rs	ftplugin/sh.vim	/^imap  <buffer>  <silent>  <LocalLeader>rs      <Esc>:call BASH_Settings()<CR>$/;"	m
<LocalLeader>rt	ftplugin/sh.vim	/^     map  <buffer>  <silent>  <LocalLeader>rt           :call BASH_XtermSize()<CR>$/;"	m
<LocalLeader>rt	ftplugin/sh.vim	/^    imap  <buffer>  <silent>  <LocalLeader>rt      <Esc>:call BASH_XtermSize()<CR>$/;"	m
<LocalLeader>rx	ftplugin/c.vim	/^   map    <buffer>  <silent>  <LocalLeader>rx         :call C_XtermSize()<CR>$/;"	m
<LocalLeader>rx	ftplugin/c.vim	/^  imap    <buffer>  <silent>  <LocalLeader>rx    <C-C>:call C_XtermSize()<CR>$/;"	m
<LocalLeader>s	ftplugin/ocaml.vim	/^  map <LocalLeader>s :call OCaml_switch(0)<CR>$/;"	m
<LocalLeader>sa	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>sa      a${[]}<Left><Left><Left>$/;"	m
<LocalLeader>sa	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>sa       ${[]}<Left><Left><Left>$/;"	m
<LocalLeader>sa	ftplugin/sh.vim	/^vnoremap  <buffer>  <silent>  <LocalLeader>sa      s${[]}<Left><Left><Esc>P$/;"	m
<LocalLeader>sas	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>sas     a${[@]}<Left><Left><Left><Left>$/;"	m
<LocalLeader>sas	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>sas      ${[@]}<Left><Left><Left><Left>$/;"	m
<LocalLeader>sas	ftplugin/sh.vim	/^vnoremap  <buffer>  <silent>  <LocalLeader>sas     s${[@]}<Left><Left><Left><Esc>P$/;"	m
<LocalLeader>sb	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>sb         :call C_InsertTemplate("statements.block")<CR>$/;"	m
<LocalLeader>sb	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>sb    <Esc>:call C_InsertTemplate("statements.block")<CR>$/;"	m
<LocalLeader>sb	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>sb    <Esc>:call C_InsertTemplate("statements.block", "v")<CR>$/;"	m
<LocalLeader>sc	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>sc         :call C_InsertTemplate("statements.case")<CR>$/;"	m
<LocalLeader>sc	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>sc    <Esc>:call C_InsertTemplate("statements.case")<CR>$/;"	m
<LocalLeader>sc	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>sc           :call BASH_InsertTemplate("statements.case")<CR>$/;"	m
<LocalLeader>sc	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>sc      <Esc>:call BASH_InsertTemplate("statements.case")<CR>$/;"	m
<LocalLeader>sd	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>sd         :call C_InsertTemplate("statements.do-while")<CR>$/;"	m
<LocalLeader>sd	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>sd    <Esc>:call C_InsertTemplate("statements.do-while")<CR>$/;"	m
<LocalLeader>sd	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>sd    <Esc>:call C_InsertTemplate("statements.do-while", "v")<CR>$/;"	m
<LocalLeader>se	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>se         :call C_InsertTemplate("statements.else-block")<CR>$/;"	m
<LocalLeader>se	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>se    <Esc>:call C_InsertTemplate("statements.else-block")<CR>$/;"	m
<LocalLeader>se	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>se    <Esc>:call C_InsertTemplate("statements.else-block", "v")<CR>$/;"	m
<LocalLeader>se	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>se           :call BASH_InsertTemplate("statements.echo")<CR>$/;"	m
<LocalLeader>se	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>se      <Esc>:call BASH_InsertTemplate("statements.echo")<CR>$/;"	m
<LocalLeader>se	ftplugin/sh.vim	/^vnoremap  <buffer>  <silent>  <LocalLeader>se      <Esc>:call BASH_InsertTemplate("statements.echo", "v")<CR>$/;"	m
<LocalLeader>sf	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>sf         :call C_InsertTemplate("statements.for")<CR>$/;"	m
<LocalLeader>sf	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>sf    <Esc>:call C_InsertTemplate("statements.for")<CR>$/;"	m
<LocalLeader>sf	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>sf           :call BASH_InsertTemplate("statements.for-in")<CR>$/;"	m
<LocalLeader>sf	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>sf      <Esc>:call BASH_InsertTemplate("statements.for-in")<CR>$/;"	m
<LocalLeader>sf	ftplugin/sh.vim	/^vnoremap  <buffer>  <silent>  <LocalLeader>sf      <Esc>:call BASH_InsertTemplate("statements.for-in", "v")<CR>$/;"	m
<LocalLeader>sfo	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>sfo        :call C_InsertTemplate("statements.for-block")<CR>$/;"	m
<LocalLeader>sfo	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>sfo   <Esc>:call C_InsertTemplate("statements.for-block")<CR>$/;"	m
<LocalLeader>sfo	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>sfo   <Esc>:call C_InsertTemplate("statements.for-block", "v")<CR>$/;"	m
<LocalLeader>sfo	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>sfo          :call BASH_InsertTemplate("statements.for")<CR>$/;"	m
<LocalLeader>sfo	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>sfo     <Esc>:call BASH_InsertTemplate("statements.for")<CR>$/;"	m
<LocalLeader>sfo	ftplugin/sh.vim	/^vnoremap  <buffer>  <silent>  <LocalLeader>sfo     <Esc>:call BASH_InsertTemplate("statements.for", "v")<CR>$/;"	m
<LocalLeader>sfu	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>sfu          :call BASH_InsertTemplate("statements.function")<CR>$/;"	m
<LocalLeader>sfu	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>sfu     <Esc>:call BASH_InsertTemplate("statements.function")<CR>$/;"	m
<LocalLeader>sfu	ftplugin/sh.vim	/^vnoremap  <buffer>  <silent>  <LocalLeader>sfu     <Esc>:call BASH_InsertTemplate("statements.function", "v")<CR>$/;"	m
<LocalLeader>si	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>si         :call C_InsertTemplate("statements.if")<CR>$/;"	m
<LocalLeader>si	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>si    <Esc>:call C_InsertTemplate("statements.if")<CR>$/;"	m
<LocalLeader>si	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>si           :call BASH_InsertTemplate("statements.if")<CR>$/;"	m
<LocalLeader>si	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>si      <Esc>:call BASH_InsertTemplate("statements.if")<CR>$/;"	m
<LocalLeader>si	ftplugin/sh.vim	/^vnoremap  <buffer>  <silent>  <LocalLeader>si      <Esc>:call BASH_InsertTemplate("statements.if", "v")<CR>$/;"	m
<LocalLeader>sie	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>sie        :call C_InsertTemplate("statements.if-else")<CR>$/;"	m
<LocalLeader>sie	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>sie   <Esc>:call C_InsertTemplate("statements.if-else")<CR>$/;"	m
<LocalLeader>sie	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>sie   <Esc>:call C_InsertTemplate("statements.if-else", "v")<CR>$/;"	m
<LocalLeader>sie	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>sie          :call BASH_InsertTemplate("statements.if-else")<CR>$/;"	m
<LocalLeader>sie	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>sie     <Esc>:call BASH_InsertTemplate("statements.if-else")<CR>$/;"	m
<LocalLeader>sie	ftplugin/sh.vim	/^vnoremap  <buffer>  <silent>  <LocalLeader>sie     <Esc>:call BASH_InsertTemplate("statements.if-else", "v")<CR>$/;"	m
<LocalLeader>sif	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>sif        :call C_InsertTemplate("statements.if-block")<CR>$/;"	m
<LocalLeader>sif	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>sif   <Esc>:call C_InsertTemplate("statements.if-block")<CR>$/;"	m
<LocalLeader>sif	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>sif   <Esc>:call C_InsertTemplate("statements.if-block", "v")<CR>$/;"	m
<LocalLeader>sife	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>sife       :call C_InsertTemplate("statements.if-block-else")<CR>$/;"	m
<LocalLeader>sife	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>sife  <Esc>:call C_InsertTemplate("statements.if-block-else")<CR>$/;"	m
<LocalLeader>sife	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>sife  <Esc>:call C_InsertTemplate("statements.if-block-else", "v")<CR>$/;"	m
<LocalLeader>sl	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>sl           :call BASH_InsertTemplate("statements.elif")<CR>$/;"	m
<LocalLeader>sl	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>sl      <Esc>:call BASH_InsertTemplate("statements.elif")<CR>$/;"	m
<LocalLeader>sp	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>sp           :call BASH_InsertTemplate("statements.printf")<CR>$/;"	m
<LocalLeader>sp	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>sp      <Esc>:call BASH_InsertTemplate("statements.printf")<CR>$/;"	m
<LocalLeader>sp	ftplugin/sh.vim	/^vnoremap  <buffer>  <silent>  <LocalLeader>sp      <Esc>:call BASH_InsertTemplate("statements.printf", "v")<CR>$/;"	m
<LocalLeader>ss	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>ss         :call C_InsertTemplate("statements.switch")<CR>$/;"	m
<LocalLeader>ss	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>ss    <Esc>:call C_InsertTemplate("statements.switch")<CR>$/;"	m
<LocalLeader>ss	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>ss    <Esc>:call C_InsertTemplate("statements.switch", "v")<CR>$/;"	m
<LocalLeader>ss	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>ss           :call BASH_InsertTemplate("statements.select")<CR>$/;"	m
<LocalLeader>ss	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>ss      <Esc>:call BASH_InsertTemplate("statements.select")<CR>$/;"	m
<LocalLeader>ss	ftplugin/sh.vim	/^vnoremap  <buffer>  <silent>  <LocalLeader>ss      <Esc>:call BASH_InsertTemplate("statements.select", "v")<CR>$/;"	m
<LocalLeader>st	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>st           :call BASH_InsertTemplate("statements.until")<CR>$/;"	m
<LocalLeader>st	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>st      <Esc>:call BASH_InsertTemplate("statements.until")<CR>$/;"	m
<LocalLeader>st	ftplugin/sh.vim	/^vnoremap  <buffer>  <silent>  <LocalLeader>st      <Esc>:call BASH_InsertTemplate("statements.until", "v")<CR>$/;"	m
<LocalLeader>sw	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>sw         :call C_InsertTemplate("statements.while")<CR>$/;"	m
<LocalLeader>sw	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>sw    <Esc>:call C_InsertTemplate("statements.while")<CR>$/;"	m
<LocalLeader>sw	ftplugin/sh.vim	/^ noremap  <buffer>  <silent>  <LocalLeader>sw           :call BASH_InsertTemplate("statements.while")<CR>$/;"	m
<LocalLeader>sw	ftplugin/sh.vim	/^inoremap  <buffer>  <silent>  <LocalLeader>sw      <Esc>:call BASH_InsertTemplate("statements.while")<CR>$/;"	m
<LocalLeader>sw	ftplugin/sh.vim	/^vnoremap  <buffer>  <silent>  <LocalLeader>sw      <Esc>:call BASH_InsertTemplate("statements.while", "v")<CR>$/;"	m
<LocalLeader>swh	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>swh        :call C_InsertTemplate("statements.while-block")<CR>$/;"	m
<LocalLeader>swh	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>swh   <Esc>:call C_InsertTemplate("statements.while-block")<CR>$/;"	m
<LocalLeader>swh	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>swh   <Esc>:call C_InsertTemplate("statements.while-block", "v")<CR>$/;"	m
<LocalLeader>s{	ftplugin/c.vim	/^ noremap    <buffer>  <silent>  <LocalLeader>s{         :call C_InsertTemplate("statements.block")<CR>$/;"	m
<LocalLeader>s{	ftplugin/c.vim	/^inoremap    <buffer>  <silent>  <LocalLeader>s{    <Esc>:call C_InsertTemplate("statements.block")<CR>$/;"	m
<LocalLeader>s{	ftplugin/c.vim	/^vnoremap    <buffer>  <silent>  <LocalLeader>s{    <Esc>:call C_InsertTemplate("statements.block", "v")<CR>$/;"	m
<LocalLeader>t	ftplugin/ocaml.vim	/^  map  <silent> <LocalLeader>t :call Ocaml_print_type("normal")<CR>$/;"	m
<LocalLeader>t	ftplugin/ocaml.vim	/^  vmap <silent> <LocalLeader>t :<C-U>call Ocaml_print_type("visual")<CR>`<$/;"	m
<M-Space>	mswin.vim	/^  cnoremap <M-Space> <C-C>:simalt ~<CR>$/;"	m
<M-Space>	mswin.vim	/^  inoremap <M-Space> <C-O>:simalt ~<CR>$/;"	m
<M-Space>	mswin.vim	/^  noremap <M-Space> :simalt ~<CR>$/;"	m
<Plug>BUncomOff	ftplugin/lprolog.vim	/^  vnoremap <buffer> <Plug>BUncomOff <ESC>:'<,'><CR>`<dd`>dd`<$/;"	m
<Plug>BUncomOff	ftplugin/ocaml.vim	/^  vnoremap <buffer> <Plug>BUncomOff <ESC>:'<,'><CR>`<dd`>dd`<$/;"	m
<Plug>BUncomOn	ftplugin/lprolog.vim	/^  vnoremap <buffer> <Plug>BUncomOn <ESC>:'<,'><CR>`<O<ESC>0i\/*<ESC>`>o<ESC>0i*\/<ESC>`<$/;"	m
<Plug>BUncomOn	ftplugin/ocaml.vim	/^  vnoremap <buffer> <Plug>BUncomOn <ESC>:'<,'><CR>`<O<ESC>0i(*<ESC>`>o<ESC>0i*)<ESC>`<$/;"	m
<Plug>Comment	ftplugin/cobol.vim	/^    noremap <silent> <buffer> <Plug>Comment          :call <SID>Comment('c')<CR>$/;"	m
<Plug>DeComment	ftplugin/cobol.vim	/^    noremap <silent> <buffer> <Plug>DeComment        :call <SID>Comment('u')<CR>$/;"	m
<Plug>IMAP_DeleteAndJumpBack	plugin/imaps.vim	/^vmap <silent> <Plug>IMAP_DeleteAndJumpBack          "_<Del>i<c-r>=IMAP_Jumpfunc('b', 0)<CR>$/;"	m
<Plug>IMAP_DeleteAndJumpForward	plugin/imaps.vim	/^vmap <silent> <Plug>IMAP_DeleteAndJumpForward       "_<Del>i<c-r>=IMAP_Jumpfunc('', 0)<CR>$/;"	m
<Plug>IMAP_JumpBack	plugin/imaps.vim	/^imap <silent> <Plug>IMAP_JumpBack       <c-r>=IMAP_Jumpfunc('b', 0)<CR>$/;"	m
<Plug>IMAP_JumpBack	plugin/imaps.vim	/^nmap <silent> <Plug>IMAP_JumpBack           i<c-r>=IMAP_Jumpfunc('b', 0)<CR>$/;"	m
<Plug>IMAP_JumpBack	plugin/imaps.vim	/^vmap <silent> <Plug>IMAP_JumpBack          <C-\\><C-N>`<i<c-r>=IMAP_Jumpfunc('b', 0)<CR>$/;"	m
<Plug>IMAP_JumpForward	plugin/imaps.vim	/^imap <silent> <Plug>IMAP_JumpForward    <c-r>=IMAP_Jumpfunc('', 0)<CR>$/;"	m
<Plug>IMAP_JumpForward	plugin/imaps.vim	/^nmap <silent> <Plug>IMAP_JumpForward        i<c-r>=IMAP_Jumpfunc('', 0)<CR>$/;"	m
<Plug>IMAP_JumpForward	plugin/imaps.vim	/^vmap <silent> <Plug>IMAP_JumpForward       <C-\\><C-N>i<c-r>=IMAP_Jumpfunc('', 0)<CR>$/;"	m
<Plug>LUncomOff	ftplugin/lprolog.vim	/^  nnoremap <buffer> <Plug>LUncomOff <ESC>:s\/^\\\/\\* \\(.*\\) \\*\\\/\/\\1\/<CR>$/;"	m
<Plug>LUncomOff	ftplugin/ocaml.vim	/^  nnoremap <buffer> <Plug>LUncomOff :s\/^(\\* \\(.*\\) \\*)\/\\1\/<CR>:noh<CR>$/;"	m
<Plug>LUncomOn	ftplugin/lprolog.vim	/^  nnoremap <buffer> <Plug>LUncomOn mz0i\/* <ESC>$A *\/<ESC>`z$/;"	m
<Plug>LUncomOn	ftplugin/ocaml.vim	/^  nnoremap <buffer> <Plug>LUncomOn mz0i(* <ESC>$A *)<ESC>`z$/;"	m
<Plug>MailQuote	ftplugin/mail.vim	/^  nnoremap <buffer> <Plug>MailQuote :.,$s\/^\/> \/<CR>:noh<CR>``$/;"	m
<Plug>MailQuote	ftplugin/mail.vim	/^  vnoremap <buffer> <Plug>MailQuote :s\/^\/> \/<CR>:noh<CR>``$/;"	m
<Plug>ManBS	ftplugin/man.vim	/^    nnoremap <buffer> <Plug>ManBS :%s\/.\\b\/\/g<CR>:setl nomod<CR>''$/;"	m
<Plug>NetrwBrowseX	plugin/netrwPlugin.vim	/^ nno <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)<cr>$/;"	m
<Plug>SpecChangelog	ftplugin/spec.vim	/^noremap <buffer> <unique> <script> <Plug>SpecChangelog :call <SID>SpecChangelog("")<CR>$/;"	m
<Plug>Tex_FastCommandChange	ftplugin/latex-suite/envmacros.vim	/^	inoremap <silent> <Plug>Tex_FastCommandChange  <C-O>:call Tex_ChangeCommand('no')<CR>$/;"	m
<Plug>Tex_FastCommandChange	ftplugin/latex-suite/envmacros.vim	/^	nnoremap <silent> <Plug>Tex_FastCommandChange  :call Tex_ChangeCommand('no')<CR>$/;"	m
<Plug>Tex_FastCommandInsert	ftplugin/latex-suite/envmacros.vim	/^	inoremap <silent> <Plug>Tex_FastCommandInsert  <C-r>=Tex_DoCommand('no')<cr>$/;"	m
<Plug>Tex_FastCommandInsert	ftplugin/latex-suite/envmacros.vim	/^	nnoremap <silent> <Plug>Tex_FastCommandInsert  i<C-r>=Tex_DoCommand('no')<cr>$/;"	m
<Plug>Tex_FastCommandInsert	ftplugin/latex-suite/envmacros.vim	/^	vnoremap <silent> <Plug>Tex_FastCommandInsert  <C-\\><C-N>:call Tex_DoCommand('yes')<CR>$/;"	m
<Plug>Tex_FastEnvironmentChange	ftplugin/latex-suite/envmacros.vim	/^	inoremap <silent> <Plug>Tex_FastEnvironmentChange  <C-O>:call Tex_ChangeEnvironments()<CR>$/;"	m
<Plug>Tex_FastEnvironmentChange	ftplugin/latex-suite/envmacros.vim	/^	nnoremap <silent> <Plug>Tex_FastEnvironmentChange  :call Tex_ChangeEnvironments()<CR>$/;"	m
<Plug>Tex_FastEnvironmentInsert	ftplugin/latex-suite/envmacros.vim	/^	inoremap <silent> <Plug>Tex_FastEnvironmentInsert  <C-r>=Tex_FastEnvironmentInsert("no")<cr>$/;"	m
<Plug>Tex_FastEnvironmentInsert	ftplugin/latex-suite/envmacros.vim	/^	nnoremap <silent> <Plug>Tex_FastEnvironmentInsert  i<C-r>=Tex_FastEnvironmentInsert("no")<cr>$/;"	m
<Plug>Tex_FastEnvironmentInsert	ftplugin/latex-suite/envmacros.vim	/^	vnoremap <silent> <Plug>Tex_FastEnvironmentInsert  <C-\\><C-N>:call Tex_FastEnvironmentInsert("yes")<CR>$/;"	m
<Plug>Tex_Help	ftplugin/latex-suite/wizardfuncs.vim	/^inoremap <silent> <Plug>Tex_Help <C-o>:call <SID>TexHelp()<CR>$/;"	m
<Plug>Tex_Help	ftplugin/latex-suite/wizardfuncs.vim	/^nnoremap <silent> <Plug>Tex_Help :call <SID>TexHelp()<CR>$/;"	m
<Plug>Tex_InsertItemOnNextLine	ftplugin/latex-suite/envmacros.vim	/^inoremap <script> <silent> <Plug>Tex_InsertItemOnNextLine <ESC>o<C-R>=Tex_InsertItem()<CR>$/;"	m
<Plug>Tex_InsertItemOnThisLine	ftplugin/latex-suite/envmacros.vim	/^inoremap <script> <silent> <Plug>Tex_InsertItemOnThisLine <C-r>=Tex_InsertItem()<CR>$/;"	m
<Plug>Tex_LeftRight	:call	ftplugin/latex-suite/brackets.vim	/^nnoremap <silent> <Plug>Tex_LeftRight	:call Tex_PutLeftRight()<CR>$/;"	m
<Plug>Tex_LeftRight	ftplugin/latex-suite/brackets.vim	/^inoremap <silent> <Plug>Tex_LeftRight   <C-r>=Tex_LeftRight()<CR>$/;"	m
<Plug>Tex_MathBF		<C-C>`>a}<Esc>`<i\mathbf{<Esc>	ftplugin/latex-suite/brackets.vim	/^vnoremap <silent> <Plug>Tex_MathBF		<C-C>`>a}<Esc>`<i\\mathbf{<Esc>$/;"	m
<Plug>Tex_MathBF	ftplugin/latex-suite/brackets.vim	/^inoremap <silent> <Plug>Tex_MathBF      <C-r>=Tex_MathBF()<CR>$/;"	m
<Plug>Tex_MathCal		<C-C>`>a}<Esc>`<i\mathcal{<Esc>	ftplugin/latex-suite/brackets.vim	/^vnoremap <silent> <Plug>Tex_MathCal		<C-C>`>a}<Esc>`<i\\mathcal{<Esc>$/;"	m
<Plug>Tex_MathCal	ftplugin/latex-suite/brackets.vim	/^inoremap <silent> <Plug>Tex_MathCal     <C-r>=Tex_MathCal()<CR>$/;"	m
<Plug>Tex_RefreshFolds	ftplugin/latex-suite/folding.vim	/^nnoremap <unique> <Plug>Tex_RefreshFolds :call MakeTexFolds(1)<cr>$/;"	m
<Plug>Traditional	ftplugin/cobol.vim	/^    noremap <silent> <buffer> <Plug>Traditional      :call <SID>Comment('t')<CR>$/;"	m
<Plug>VCSAdd	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSAdd :VCSAdd<CR>$/;"	m
<Plug>VCSAnnotate	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSAnnotate :VCSAnnotate<CR>$/;"	m
<Plug>VCSClearAndGotoOriginal	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSClearAndGotoOriginal :VCSGotoOriginal!<CR>$/;"	m
<Plug>VCSCommit	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSCommit :VCSCommit<CR>$/;"	m
<Plug>VCSDelete	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSDelete :VCSDelete<CR>$/;"	m
<Plug>VCSDiff	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSDiff :VCSDiff<CR>$/;"	m
<Plug>VCSGotoOriginal	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSGotoOriginal :VCSGotoOriginal<CR>$/;"	m
<Plug>VCSInfo	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSInfo :VCSInfo<CR>$/;"	m
<Plug>VCSLock	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSLock :VCSLock<CR>$/;"	m
<Plug>VCSLog	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSLog :VCSLog<CR>$/;"	m
<Plug>VCSRevert	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSRevert :VCSRevert<CR>$/;"	m
<Plug>VCSReview	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSReview :VCSReview<CR>$/;"	m
<Plug>VCSSplitAnnotate	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSSplitAnnotate :VCSAnnotate!<CR>$/;"	m
<Plug>VCSStatus	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSStatus :VCSStatus<CR>$/;"	m
<Plug>VCSUnlock	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSUnlock :VCSUnlock<CR>$/;"	m
<Plug>VCSUpdate	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSUpdate :VCSUpdate<CR>$/;"	m
<Plug>VCSVimDiff	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSVimDiff :VCSVimDiff<CR>$/;"	m
<Plug>VisualComment	ftplugin/cobol.vim	/^    noremap <silent> <buffer> <Plug>VisualComment     :'<,'>call <SID>Comment('c')<CR>$/;"	m
<Plug>VisualDeComment	ftplugin/cobol.vim	/^    noremap <silent> <buffer> <Plug>VisualDeComment   :'<,'>call <SID>Comment('u')<CR>$/;"	m
<Plug>VisualTraditional	ftplugin/cobol.vim	/^    noremap <silent> <buffer> <Plug>VisualTraditional :'<,'>call <SID>Comment('t')<CR>$/;"	m
<RightDrag>	<LeftDrag>	macros/swapmous.vim	/^noremap	 <RightDrag>	<LeftDrag>$/;"	m
<RightDrag>	<LeftDrag>	macros/swapmous.vim	/^noremap! <RightDrag>	<LeftDrag>$/;"	m
<RightMouse>	<LeftMouse>	macros/swapmous.vim	/^noremap	 <RightMouse>	<LeftMouse>$/;"	m
<RightMouse>	<LeftMouse>	macros/swapmous.vim	/^noremap! <RightMouse>	<LeftMouse>$/;"	m
<RightRelease>	<LeftRelease>	macros/swapmous.vim	/^noremap	 <RightRelease>	<LeftRelease>$/;"	m
<RightRelease>	<LeftRelease>	macros/swapmous.vim	/^noremap! <RightRelease>	<LeftRelease>$/;"	m
<S-Del>	mswin.vim	/^vnoremap <S-Del> "+x$/;"	m
<S-Down>	ftplugin/flexwiki.vim	/^  imap <buffer> <S-Down>   <C-o>gj$/;"	m
<S-F1>	ftplugin/sh.vim	/^   map  <buffer>  <silent>  <S-F1>        :call BASH_HelpBASHsupport()<CR>$/;"	m
<S-F1>	ftplugin/sh.vim	/^  imap  <buffer>  <silent>  <S-F1>   <C-C>:call BASH_HelpBASHsupport()<CR>$/;"	m
<S-F2>	ftplugin/c.vim	/^ map  <buffer>  <silent>  <S-F2>       :A<CR>$/;"	m
<S-F2>	ftplugin/c.vim	/^imap  <buffer>  <silent>  <S-F2>  <C-C>:A<CR>$/;"	m
<S-F9>	ftplugin/c.vim	/^ map  <buffer>  <silent>  <S-F9>       :call C_Arguments()<CR>$/;"	m
<S-F9>	ftplugin/c.vim	/^imap  <buffer>  <silent>  <S-F9>  <C-C>:call C_Arguments()<CR>$/;"	m
<S-F9>	ftplugin/sh.vim	/^  imap  <buffer>  <silent>  <S-F9>   <C-C>:call BASH_CmdLineArguments()<CR>$/;"	m
<S-F9>	ftplugin/sh.vim	/^  map   <buffer>  <silent>  <S-F9>        :call BASH_CmdLineArguments()<CR>$/;"	m
<S-Insert>		"+gP	mswin.vim	/^map <S-Insert>		"+gP$/;"	m
<S-Insert>		<C-R>+	mswin.vim	/^cmap <S-Insert>		<C-R>+$/;"	m
<S-Insert>		<C-V>	mswin.vim	/^imap <S-Insert>		<C-V>$/;"	m
<S-Insert>		<C-V>	mswin.vim	/^vmap <S-Insert>		<C-V>$/;"	m
<S-Insert>	gvimrc_example.vim	/^map <S-Insert> <MiddleMouse>$/;"	m
<S-Insert>	gvimrc_example.vim	/^map! <S-Insert> <MiddleMouse>$/;"	m
<S-Up>	ftplugin/flexwiki.vim	/^  imap <buffer> <S-Up>     <C-o>gk$/;"	m
<SID>L	macros/less.vim	/^  noremap <SID>L L0:redraw<CR>:file<CR>$/;"	m
<SID>L	macros/less.vim	/^  noremap <SID>L Lg0:redraw<CR>:file<CR>$/;"	m
<SID>xx	plugin/taglist.vim	/^    map <SID>xx <SID>xx$/;"	m
<Space>	ftplugin/latex-suite/smartspace.vim	/^inoremap <buffer> <silent> <Space> <Space><Esc>:call <SID>TexFill(b:tw)<CR>a$/;"	m
<Space>	macros/less.vim	/^noremap <script> <Space> :call <SID>NextPage()<CR><SID>L$/;"	m
<Space>	optwin.vim	/^noremap <silent> <buffer> <Space> :call <SID>Space()<CR>$/;"	m
<Tab>	ftplugin/cobol.vim	/^        inoremap <silent> <buffer> <Tab> <C-R>=<SID>Tab()<CR><C-R>=<SID>RestoreShiftwidth()<CR>$/;"	m
<Up>	evim.vim	/^inoremap <Up> <C-R>=pumvisible() ? "\\<lt>Up>" : "\\<lt>C-O>gk"<CR>$/;"	m
<Up>	ftplugin/flexwiki.vim	/^      imap <buffer> <Up>     <C-o>gk$/;"	m
<Up>	ftplugin/flexwiki.vim	/^  nmap <buffer> <Up>   gk$/;"	m
<Up>	ftplugin/flexwiki.vim	/^  vmap <buffer> <Up>   gk$/;"	m
<bs>	ftplugin/ada.vim	/^      inoremap <silent> <unique> <buffer> <bs> <C-R>=ada#Insert_Backspace ()<cr>$/;"	m
<c-]>	ftplugin/man.vim	/^    nnoremap <buffer> <c-]> :call <SID>PreGetPage(v:count)<CR>$/;"	m
<c-c>L	ftplugin/sql.vim	/^        imap <buffer> <c-c>L <C-Y><C-\\><C-O>:call sqlcomplete#Map('column_csv')<CR><C-X><C-O>$/;"	m
<c-c>R	ftplugin/sql.vim	/^        imap <buffer> <c-c>R <C-\\><C-O>:call sqlcomplete#Map('resetCache')<CR><C-X><C-O>$/;"	m
<c-c>T	ftplugin/sql.vim	/^        imap <buffer> <c-c>T <C-\\><C-O>:call sqlcomplete#Map('sqlType')<CR><C-X><C-O>$/;"	m
<c-c>a	ftplugin/sql.vim	/^        imap <buffer> <c-c>a <C-\\><C-O>:call sqlcomplete#Map('syntax')<CR><C-X><C-O>$/;"	m
<c-c>c	ftplugin/sql.vim	/^        imap <buffer> <c-c>c <C-\\><C-O>:call sqlcomplete#Map('column')<CR><C-X><C-O>$/;"	m
<c-c>f	ftplugin/sql.vim	/^        imap <buffer> <c-c>f <C-\\><C-O>:call sqlcomplete#Map('sqlFunction')<CR><C-X><C-O>$/;"	m
<c-c>k	ftplugin/sql.vim	/^        imap <buffer> <c-c>k <C-\\><C-O>:call sqlcomplete#Map('sqlKeyword')<CR><C-X><C-O>$/;"	m
<c-c>l	ftplugin/sql.vim	/^        imap <buffer> <c-c>l <C-\\><C-O>:call sqlcomplete#Map('column_csv')<CR><C-X><C-O>$/;"	m
<c-c>o	ftplugin/sql.vim	/^        imap <buffer> <c-c>o <C-\\><C-O>:call sqlcomplete#Map('sqlOption')<CR><C-X><C-O>$/;"	m
<c-c>p	ftplugin/sql.vim	/^        imap <buffer> <c-c>p <C-\\><C-O>:call sqlcomplete#Map('procedure')<CR><C-X><C-O>$/;"	m
<c-c>s	ftplugin/sql.vim	/^        imap <buffer> <c-c>s <C-\\><C-O>:call sqlcomplete#Map('sqlStatement')<CR><C-X><C-O>$/;"	m
<c-c>t	ftplugin/sql.vim	/^        imap <buffer> <c-c>t <C-\\><C-O>:call sqlcomplete#Map('table')<CR><C-X><C-O>$/;"	m
<c-c>v	ftplugin/sql.vim	/^        imap <buffer> <c-c>v <C-\\><C-O>:call sqlcomplete#Map('view')<CR><C-X><C-O>$/;"	m
<c-left>	ftplugin/sql.vim	/^            imap <buffer> <c-left>  <C-R>=sqlcomplete#DrillOutOfColumns()<CR>$/;"	m
<c-right>	ftplugin/sql.vim	/^            imap <buffer> <c-right>  <C-R>=sqlcomplete#DrillIntoTable()<CR>$/;"	m
<c-t>	ftplugin/man.vim	/^    nnoremap <buffer> <c-t> :call <SID>PopPage()<CR>$/;"	m
<char-166><char-201><char-161>	keymap/tamil_tscii.vim	/^no     <char-166><char-201><char-161>$/;"	m
<char-167><char-201><char-161>	keymap/tamil_tscii.vim	/^noo    <char-167><char-201><char-161>$/;"	m
<m-c>	ftplugin/abaqus.vim	/^noremap <silent> <buffer> <m-c> :call <SID>Abaqus_ToggleComment()<CR>j$/;"	m
<plug>	ftplugin/latex-suite/elementmacros.vim	/^nmap <silent> <script> <plug> i$/;"	m
<plug>	ftplugin/latex-suite/envmacros.vim	/^nmap <silent> <script> <plug> i$/;"	m
<plug>	ftplugin/latex-suite/main.vim	/^nmap <silent> <script> <plug> i$/;"	m
<plug>	ftplugin/latex-suite/packages.vim	/^imap <silent> <plug> <Nop>$/;"	m
<plug>	ftplugin/latex-suite/packages.vim	/^nmap <silent> <plug> i$/;"	m
<plug><+SelectRegion+>	plugin/imaps.vim	/^nmap <silent> <script> <plug><+SelectRegion+> `<v`>$/;"	m
<plug>NERDCommenterAlignBoth	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterAlignBoth :call NERDComment(0, "alignBoth")<cr>$/;"	m
<plug>NERDCommenterAlignBoth	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterAlignBoth <ESC>:call NERDComment(1, "alignBoth")<cr>$/;"	m
<plug>NERDCommenterAlignLeft	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterAlignLeft :call NERDComment(0, "alignLeft")<cr>$/;"	m
<plug>NERDCommenterAlignLeft	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterAlignLeft <ESC>:call NERDComment(1, "alignLeft")<cr>$/;"	m
<plug>NERDCommenterAltDelims	plugin/NERD_commenter.vim	/^nnoremap <plug>NERDCommenterAltDelims :call <SID>SwitchToAlternativeDelimiters(1)<cr>$/;"	m
<plug>NERDCommenterAppend	plugin/NERD_commenter.vim	/^nmap <silent> <plug>NERDCommenterAppend :call NERDComment(0, "append")<cr>$/;"	m
<plug>NERDCommenterComment	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterComment :call NERDComment(0, "norm")<cr>$/;"	m
<plug>NERDCommenterComment	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterComment <ESC>:call NERDComment(1, "norm")<cr>$/;"	m
<plug>NERDCommenterInInsert	plugin/NERD_commenter.vim	/^inoremap <silent> <plug>NERDCommenterInInsert <SPACE><BS><ESC>:call NERDComment(0, "insert")<CR>$/;"	m
<plug>NERDCommenterInvert	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterInvert :call NERDComment(0, "invert")<CR>$/;"	m
<plug>NERDCommenterInvert	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterInvert <ESC>:call NERDComment(1, "invert")<CR>$/;"	m
<plug>NERDCommenterMinimal	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterMinimal :call NERDComment(0, "minimal")<cr>$/;"	m
<plug>NERDCommenterMinimal	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterMinimal <ESC>:call NERDComment(1, "minimal")<cr>$/;"	m
<plug>NERDCommenterNest	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterNest :call NERDComment(0, "nested")<cr>$/;"	m
<plug>NERDCommenterNest	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterNest <ESC>:call NERDComment(1, "nested")<cr>$/;"	m
<plug>NERDCommenterSexy	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterSexy :call NERDComment(0, "sexy")<CR>$/;"	m
<plug>NERDCommenterSexy	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterSexy <ESC>:call NERDComment(1, "sexy")<CR>$/;"	m
<plug>NERDCommenterToEOL	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterToEOL :call NERDComment(0, "toEOL")<cr>$/;"	m
<plug>NERDCommenterToggle	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterToggle :call NERDComment(0, "toggle")<cr>$/;"	m
<plug>NERDCommenterToggle	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterToggle <ESC>:call NERDComment(1, "toggle")<cr>$/;"	m
<plug>NERDCommenterUncomment	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterUncomment :call NERDComment(0, "uncomment")<cr>$/;"	m
<plug>NERDCommenterUncomment	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterUncomment :call NERDComment(1, "uncomment")<cr>$/;"	m
<plug>NERDCommenterYank	plugin/NERD_commenter.vim	/^nmap <silent> <plug>NERDCommenterYank :call NERDComment(0, "yank")<CR>$/;"	m
<plug>NERDCommenterYank	plugin/NERD_commenter.vim	/^vmap <silent> <plug>NERDCommenterYank <ESC>:call NERDComment(1, "yank")<CR>$/;"	m
<plug>cleanHistory	ftplugin/latex-suite/main.vim	/^nmap <silent> <script> <plug>cleanHistory :call Tex_CleanSearchHistory()<CR>$/;"	m
=	macros/urm/urm.vim	/^map = 'kf,$/;"	m
>	ftplugin/cobol.vim	/^        nnoremap <silent> <buffer> > :set opfunc=<SID>IncreaseFunc<CR>g@$/;"	m
>	ftplugin/cobol.vim	/^    vnoremap <silent> <buffer> > :call CobolIndentBlock(v:count1)<CR>$/;"	m
>	macros/less.vim	/^map > G$/;"	m
>	macros/life/life.vim	/^map > 0 LWWWWWWWWWWWWWWWWWW,rj$/;"	m
>>	ftplugin/cobol.vim	/^    nnoremap <silent> <buffer> >> :call CobolIndentBlock(1)<CR>$/;"	m
?	macros/less.vim	/^  noremap <script> ? H0:call <SID>Backward()<CR>?$/;"	m
?	macros/less.vim	/^  noremap <script> ? Hg0:call <SID>Backward()<CR>?$/;"	m
@rem	tools/vim_vs_net.cmd	/^@rem    :h --remote-silent for mor details$/;"	s
A	macros/hanoi/hanoi.vim	/^map A "fyl$/;"	m
ALL_CFLAGS	c-support/codesnippets/Makefile	/^ALL_CFLAGS      = $(CFLAGS) $(ALL_INC_DIR)$/;"	m
ALL_INC_DIR	c-support/codesnippets/Makefile	/^ALL_INC_DIR     = $(addprefix -I, $(LOCAL_INC_DIR) $(GLOBAL_INC_DIR))$/;"	m
ALL_LFLAGS	c-support/codesnippets/Makefile	/^ALL_LFLAGS      = $(LDFLAGS) $(ALL_LIB_DIR)$/;"	m
ALL_LIB_DIR	c-support/codesnippets/Makefile	/^ALL_LIB_DIR     = $(addprefix -L, $(LOCAL_LIB_DIR) $(GLOBAL_LIB_DIR))$/;"	m
Abaqus_Jump	ftplugin/abaqus.vim	/^function! <SID>Abaqus_Jump(motion) range$/;"	f
Abaqus_ToggleComment	ftplugin/abaqus.vim	/^function! <SID>Abaqus_ToggleComment() range$/;"	f
AddEntry	ftplugin/debchangelog.vim	/^function AddEntry()$/;"	f
AddLeftDelim	plugin/NERD_commenter.vim	/^function s:AddLeftDelim(delim, theLine)$/;"	f
AddLeftDelimAligned	plugin/NERD_commenter.vim	/^function s:AddLeftDelimAligned(delim, theLine, alignIndx)$/;"	f
AddListItem	plugin/libList.vim	/^function AddListItem( array, newItem, index )$/;"	f
AddRightDelim	plugin/NERD_commenter.vim	/^function s:AddRightDelim(delim, theLine)$/;"	f
AddRightDelimAligned	plugin/NERD_commenter.vim	/^function s:AddRightDelimAligned(delim, theLine, alignIndx)$/;"	f
AddSyntaxFoldItem	plugin/SyntaxFolds.vim	/^function! AddSyntaxFoldItem(start, end, startoff, endoff, ...)$/;"	f
Align	plugin/ScrollColor.vim	/^function! s:Align(s, width)$/;"	f
AltMultipart	plugin/NERD_commenter.vim	/^function s:AltMultipart()$/;"	f
AntSyntaxScript	syntax/ant.vim	/^    fun AntSyntaxScript(tagname, synfilename)$/;"	f
App	vimrc.vim	/^function! App(s)$/;"	f
AppendCommentToLine	plugin/NERD_commenter.vim	/^function s:AppendCommentToLine()$/;"	f
AppendMatchGroup	ftplugin/AppendMatchGroup.vim	/^function AppendMatchGroup(mwordList)$/;"	f
B	macros/hanoi/hanoi.vim	/^map B "hyl$/;"	m
B	macros/life/life.vim	/^map B ,%k>,\$$/;"	m
BASENAMES	c-support/codesnippets/Makefile	/^BASENAMES       = $(basename $(SOURCES))$/;"	m
BASH_AdjustLineEndComm	plugin/bash-support.vim	/^function! BASH_AdjustLineEndComm ( mode ) range$/;"	f
BASH_ApplyFlag	plugin/bash-support.vim	/^function! BASH_ApplyFlag ( val, flag )$/;"	f
BASH_BrowseTemplateFiles	plugin/bash-support.vim	/^function! BASH_BrowseTemplateFiles ( type )$/;"	f
BASH_BuiltinComplete	plugin/bash-support.vim	/^function!	BASH_BuiltinComplete ( ArgLead, CmdLine, CursorPos )$/;"	f
BASH_BuiltinMenus	plugin/bash-support.vim	/^function! BASH_BuiltinMenus ( menupath, liblist )$/;"	f
BASH_CheckGlobal	plugin/bash-support.vim	/^function! BASH_CheckGlobal ( name )$/;"	f
BASH_CmdLineArguments	plugin/bash-support.vim	/^function! BASH_CmdLineArguments ()$/;"	f
BASH_CodeSnippets	plugin/bash-support.vim	/^function! BASH_CodeSnippets(arg1)$/;"	f
BASH_CommentToggle	plugin/bash-support.vim	/^function! BASH_CommentToggle ()$/;"	f
BASH_CommentToggleRange	plugin/bash-support.vim	/^function! BASH_CommentToggleRange ()$/;"	f
BASH_CommentVimModeline	plugin/bash-support.vim	/^function! BASH_CommentVimModeline ()$/;"	f
BASH_CreateGuiMenus	plugin/bash-support.vim	/^function! BASH_CreateGuiMenus ()$/;"	f
BASH_DateAndTime	plugin/bash-support.vim	/^function! BASH_DateAndTime ( format )$/;"	f
BASH_Debugger	plugin/bash-support.vim	/^function! BASH_Debugger ()$/;"	f
BASH_EditTemplates	plugin/bash-support.vim	/^function! BASH_EditTemplates ( type )$/;"	f
BASH_EnvirMenus	plugin/bash-support.vim	/^function! BASH_EnvirMenus ( menupath, liblist )$/;"	f
BASH_ExpandSingleMacro	plugin/bash-support.vim	/^function! BASH_ExpandSingleMacro ( val, macroname, replacement )$/;"	f
BASH_ExpandUserMacros	plugin/bash-support.vim	/^function! BASH_ExpandUserMacros ( key )$/;"	f
BASH_GetLineEndCommCol	plugin/bash-support.vim	/^function! BASH_GetLineEndCommCol ()$/;"	f
BASH_Hardcopy	plugin/bash-support.vim	/^function! BASH_Hardcopy (mode)$/;"	f
BASH_HelpBASHsupport	plugin/bash-support.vim	/^function! BASH_HelpBASHsupport ()$/;"	f
BASH_HighlightJumpTargets	plugin/bash-support.vim	/^function! BASH_HighlightJumpTargets ()$/;"	f
BASH_InitMenu	plugin/bash-support.vim	/^function!	BASH_InitMenu ()$/;"	f
BASH_InitMenuHeader	plugin/bash-support.vim	/^function! BASH_InitMenuHeader ()$/;"	f
BASH_Input	plugin/bash-support.vim	/^function! BASH_Input ( promp, text, ... )$/;"	f
BASH_InsertDateAndTime	plugin/bash-support.vim	/^function! BASH_InsertDateAndTime ( format )$/;"	f
BASH_InsertMacroValue	plugin/bash-support.vim	/^function! BASH_InsertMacroValue ( key )$/;"	f
BASH_InsertTemplate	plugin/bash-support.vim	/^function! BASH_InsertTemplate ( key, ... )$/;"	f
BASH_JumpCtrlJ	plugin/bash-support.vim	/^function! BASH_JumpCtrlJ ()$/;"	f
BASH_LineEndComment	plugin/bash-support.vim	/^function! BASH_LineEndComment ()$/;"	f
BASH_MakeScriptExecutable	plugin/bash-support.vim	/^function! BASH_MakeScriptExecutable ()$/;"	f
BASH_MultiLineEndComments	plugin/bash-support.vim	/^function! BASH_MultiLineEndComments ()$/;"	f
BASH_OpenFold	plugin/bash-support.vim	/^function! BASH_OpenFold ( mode )$/;"	f
BASH_ReadTemplates	plugin/bash-support.vim	/^function! BASH_ReadTemplates ( templatefile )$/;"	f
BASH_RemoveGuiMenus	plugin/bash-support.vim	/^function! BASH_RemoveGuiMenus ()$/;"	f
BASH_RereadTemplates	plugin/bash-support.vim	/^function! BASH_RereadTemplates ()$/;"	f
BASH_Run	plugin/bash-support.vim	/^function! BASH_Run ( mode )$/;"	f
BASH_SetGlobalVariable	plugin/bash-support.vim	/^function! BASH_SetGlobalVariable ( name, default )$/;"	f
BASH_Settings	plugin/bash-support.vim	/^function! BASH_Settings ()$/;"	f
BASH_ShoptMenus	plugin/bash-support.vim	/^function! BASH_ShoptMenus ( menupath, liblist )$/;"	f
BASH_Style	plugin/bash-support.vim	/^function! BASH_Style ( style )$/;"	f
BASH_StyleList	plugin/bash-support.vim	/^function!	BASH_StyleList ( ArgLead, CmdLine, CursorPos )$/;"	f
BASH_SubstituteTag	plugin/bash-support.vim	/^function! BASH_SubstituteTag( pos1, pos2, tag, replacement )$/;"	f
BASH_SyntaxCheck	plugin/bash-support.vim	/^function! BASH_SyntaxCheck ()$/;"	f
BASH_SyntaxCheckOptions	plugin/bash-support.vim	/^function! BASH_SyntaxCheckOptions( options )$/;"	f
BASH_SyntaxCheckOptionsLocal	plugin/bash-support.vim	/^function! BASH_SyntaxCheckOptionsLocal ()$/;"	f
BASH_Toggle_Gvim_Xterm	plugin/bash-support.vim	/^function! BASH_Toggle_Gvim_Xterm ()$/;"	f
BASH_Toggle_Gvim_Xterm_MS	plugin/bash-support.vim	/^function! BASH_Toggle_Gvim_Xterm_MS ()$/;"	f
BASH_ToolMenu	plugin/bash-support.vim	/^function! BASH_ToolMenu ()$/;"	f
BASH_XtermSize	plugin/bash-support.vim	/^function! BASH_XtermSize ()$/;"	f
BASH_help	plugin/bash-support.vim	/^function! BASH_help( type )$/;"	f
BASH_set	plugin/bash-support.vim	/^function! BASH_set (arg)$/;"	f
BASH_shopt	plugin/bash-support.vim	/^function! BASH_shopt (arg)$/;"	f
BEActivateBuffer	plugin/bufexplorer.vim	/^function! s:BEActivateBuffer()$/;"	f
BEAddBuffer	plugin/bufexplorer.vim	/^function! s:BEAddBuffer()$/;"	f
BEBuildBufferList	plugin/bufexplorer.vim	/^function! s:BEBuildBufferList()$/;"	f
BECleanup	plugin/bufexplorer.vim	/^function! s:BECleanup()$/;"	f
BEClose	plugin/bufexplorer.vim	/^function! s:BEClose(mode)$/;"	f
BECreateHelp	plugin/bufexplorer.vim	/^function! s:BECreateHelp()$/;"	f
BEDeactivateBuffer	plugin/bufexplorer.vim	/^function! s:BEDeactivateBuffer(remove)$/;"	f
BEDeleteBuffer	plugin/bufexplorer.vim	/^function! s:BEDeleteBuffer(bufNbr, mode)$/;"	f
BEDeleteBufferListing	plugin/bufexplorer.vim	/^function! s:BEDeleteBufferListing(buf)$/;"	f
BEDisplayBufferList	plugin/bufexplorer.vim	/^function! s:BEDisplayBufferList()$/;"	f
BEError	plugin/bufexplorer.vim	/^function! s:BEError(msg)$/;"	f
BEGetBufferInfo	plugin/bufexplorer.vim	/^function! s:BEGetBufferInfo(bufnr)$/;"	f
BEGetHelpStatus	plugin/bufexplorer.vim	/^function! s:BEGetHelpStatus()$/;"	f
BEGetTabNbr	plugin/bufexplorer.vim	/^function! s:BEGetTabNbr(bufNbr)$/;"	f
BEGetWinNbr	plugin/bufexplorer.vim	/^function! s:BEGetWinNbr(tabNbr, bufNbr)$/;"	f
BEIgnoreBuffer	plugin/bufexplorer.vim	/^function! s:BEIgnoreBuffer(buf)$/;"	f
BEInitialize	plugin/bufexplorer.vim	/^function! s:BEInitialize()$/;"	f
BEMRUCmp	plugin/bufexplorer.vim	/^function! s:BEMRUCmp(line1, line2)$/;"	f
BEMRUListShow	plugin/bufexplorer.vim	/^function! s:BEMRUListShow()$/;"	f
BEMRUPop	plugin/bufexplorer.vim	/^function! s:BEMRUPop(buf)$/;"	f
BEMRUPush	plugin/bufexplorer.vim	/^function! s:BEMRUPush(buf)$/;"	f
BEMapKeys	plugin/bufexplorer.vim	/^function! s:BEMapKeys()$/;"	f
BERROR	browser_launcher.vim	/^command! -nargs=+ BERROR :echohl ErrorMsg | echomsg <q-args> | echohl None$/;"	c
BEReSortListing	plugin/bufexplorer.vim	/^function! s:BEReSortListing()$/;"	f
BERebuildBufferList	plugin/bufexplorer.vim	/^function! s:BERebuildBufferList(...)$/;"	f
BERemoveBuffer	plugin/bufexplorer.vim	/^function! s:BERemoveBuffer(type, mode) range$/;"	f
BEReset	plugin/bufexplorer.vim	/^function! s:BEReset()$/;"	f
BEReverseSortSelect	plugin/bufexplorer.vim	/^function! s:BEReverseSortSelect()$/;"	f
BESelectBuffer	plugin/bufexplorer.vim	/^function! s:BESelectBuffer(...)$/;"	f
BESet	plugin/bufexplorer.vim	/^function! s:BESet(var, default)$/;"	f
BESetup	plugin/bufexplorer.vim	/^function! s:BESetup()$/;"	f
BESetupSyntax	plugin/bufexplorer.vim	/^function! s:BESetupSyntax()$/;"	f
BESortListing	plugin/bufexplorer.vim	/^function! s:BESortListing()$/;"	f
BESortReverse	plugin/bufexplorer.vim	/^function! s:BESortReverse()$/;"	f
BESortSelect	plugin/bufexplorer.vim	/^function! s:BESortSelect()$/;"	f
BETabEnter	plugin/bufexplorer.vim	/^function! s:BETabEnter()$/;"	f
BEToggleFindActive	plugin/bufexplorer.vim	/^function! s:BEToggleFindActive()$/;"	f
BEToggleHelp	plugin/bufexplorer.vim	/^function! s:BEToggleHelp()$/;"	f
BEToggleOnlyOneTab	plugin/bufexplorer.vim	/^function! s:BEToggleOnlyOneTab()$/;"	f
BEToggleShowRelativePath	plugin/bufexplorer.vim	/^function! s:BEToggleShowRelativePath()$/;"	f
BEToggleShowTabBuffer	plugin/bufexplorer.vim	/^function! s:BEToggleShowTabBuffer()$/;"	f
BEToggleShowUnlisted	plugin/bufexplorer.vim	/^function! s:BEToggleShowUnlisted()$/;"	f
BEToggleSplitOutPathName	plugin/bufexplorer.vim	/^function! s:BEToggleSplitOutPathName()$/;"	f
BEUpdateHelpStatus	plugin/bufexplorer.vim	/^function! s:BEUpdateHelpStatus()$/;"	f
BEWarning	plugin/bufexplorer.vim	/^function! s:BEWarning(msg)$/;"	f
BMAdd	menu.vim	/^func! s:BMAdd()$/;"	f
BMESG	browser_launcher.vim	/^command! -nargs=+ BMESG :echohl Todo | echo <q-args> | echohl None$/;"	c
BMFilename	menu.vim	/^func! s:BMFilename(name, num)$/;"	f
BMHash	menu.vim	/^func! s:BMHash(name)$/;"	f
BMHash2	menu.vim	/^func! s:BMHash2(name)$/;"	f
BMMunge	menu.vim	/^func! s:BMMunge(fname, bnum)$/;"	f
BMRemove	menu.vim	/^func! s:BMRemove()$/;"	f
BMShow	menu.vim	/^func! s:BMShow(...)$/;"	f
BMTruncName	menu.vim	/^func! s:BMTruncName(fname)$/;"	f
Backward	macros/less.vim	/^fun! s:Backward()$/;"	f
BashStyle	ftplugin/sh.vim	/^command! -nargs=1 -complete=customlist,BASH_StyleList   BashStyle   call BASH_Style (<f-args>)$/;"	c
BibFile	ftplugin/latex-suite/bibtools.py	/^class BibFile:$/;"	c
BibT	ftplugin/latex-suite/bibtex.vim	/^function BibT(type, options, prompt)$/;"	f
Bibliography	ftplugin/latex-suite/bibtools.py	/^class Bibliography(dict):$/;"	c
BinOptionG	optwin.vim	/^fun! <SID>BinOptionG(name, val)$/;"	f
BinOptionL	optwin.vim	/^fun! <SID>BinOptionL(name)$/;"	f
BindzoneCheck	filetype.vim	/^func! s:BindzoneCheck(default)$/;"	f
Block_pattern	ftplugin/ocaml.vim	/^    function! s:Block_pattern(lin1,lin2,col1,col2)$/;"	f
Bookmark.AddBookmark	plugin/NERD_tree.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	plugin/NERD_tree.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.GetNodeForName	plugin/NERD_tree.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot)$/;"	f
Bookmark.GetSelected	plugin/NERD_tree.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	plugin/NERD_tree.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.Sort	plugin/NERD_tree.vim	/^function! s:Bookmark.Sort()$/;"	f
Bookmark.ToRoot	plugin/NERD_tree.vim	/^function! s:Bookmark.ToRoot(name)$/;"	f
Bookmark.Write	plugin/NERD_tree.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.activate	plugin/NERD_tree.vim	/^function! s:Bookmark.activate()$/;"	f
Bookmark.compareTo	plugin/NERD_tree.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/;"	f
Bookmark.delete	plugin/NERD_tree.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	plugin/NERD_tree.vim	/^function! s:Bookmark.getNode(searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	plugin/NERD_tree.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.openInNewTab	plugin/NERD_tree.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	plugin/NERD_tree.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	plugin/NERD_tree.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	plugin/NERD_tree.vim	/^function! s:Bookmark.toRoot()$/;"	f
Bookmark.validate	plugin/NERD_tree.vim	/^function! s:Bookmark.validate()$/;"	f
Bool	ftplugin/html/HTML.vim	/^function! s:Bool(str)$/;"	f
BoolVar	ftplugin/html/HTML.vim	/^function! s:BoolVar(var)$/;"	f
BrowserMaps	autoload/netrw.vim	/^fun! s:BrowserMaps(islocal)$/;"	f
BufExplorer	plugin/bufexplorer.vim	/^command! BufExplorer :call StartBufExplorer(has ("gui") ? "drop" : "hide edit")$/;"	c
BufExplorerHorizontalSplit	plugin/bufexplorer.vim	/^command! BufExplorerHorizontalSplit :call BufExplorerHorizontalSplit()$/;"	c
BufExplorerHorizontalSplit	plugin/bufexplorer.vim	/^function! BufExplorerHorizontalSplit()$/;"	f
BufExplorerVerticalSplit	plugin/bufexplorer.vim	/^command! BufExplorerVerticalSplit :call BufExplorerVerticalSplit()$/;"	c
BufExplorerVerticalSplit	plugin/bufexplorer.vim	/^function! BufExplorerVerticalSplit()$/;"	f
BufExplorerVimEnter	plugin/bufexplorer.vim	/^augroup BufExplorerVimEnter$/;"	a
BufExplorer_IsValid	plugin/bufexplorer.vim	/^function! BufExplorer_IsValid()$/;"	f
BufExplorer_ReSize	plugin/bufexplorer.vim	/^function! BufExplorer_ReSize()$/;"	f
BufExplorer_Refresh	plugin/bufexplorer.vim	/^function! BufExplorer_Refresh()$/;"	f
BufExplorer_Start	plugin/bufexplorer.vim	/^function! BufExplorer_Start()$/;"	f
Bufname	plugin/ScreenShot.vim	/^function! s:Bufname(nr)$/;"	f
Builtin	syntax/reva.vim	/^com! -nargs=+ Builtin syn keyword revaBuiltin <args>$/;"	c
Builtins.cd	macros/shellmenu.vim	/^imenu Builtins.cd cd$/;"	m
Builtins.echo	macros/shellmenu.vim	/^imenu Builtins.echo echo$/;"	m
Builtins.eval	macros/shellmenu.vim	/^imenu Builtins.eval eval$/;"	m
Builtins.exec	macros/shellmenu.vim	/^imenu Builtins.exec exec$/;"	m
Builtins.export	macros/shellmenu.vim	/^imenu Builtins.export export$/;"	m
Builtins.getopts	macros/shellmenu.vim	/^imenu Builtins.getopts getopts$/;"	m
Builtins.hash	macros/shellmenu.vim	/^imenu Builtins.hash hash$/;"	m
Builtins.newgrp	macros/shellmenu.vim	/^imenu Builtins.newgrp newgrp$/;"	m
Builtins.pwd	macros/shellmenu.vim	/^imenu Builtins.pwd pwd$/;"	m
Builtins.read	macros/shellmenu.vim	/^imenu Builtins.read read$/;"	m
Builtins.readonly	macros/shellmenu.vim	/^imenu Builtins.readonly readonly$/;"	m
Builtins.return	macros/shellmenu.vim	/^imenu Builtins.return return$/;"	m
Builtins.times	macros/shellmenu.vim	/^imenu Builtins.times times$/;"	m
Builtins.type	macros/shellmenu.vim	/^imenu Builtins.type type$/;"	m
Builtins.umask	macros/shellmenu.vim	/^imenu Builtins.umask umask$/;"	m
Builtins.wait	macros/shellmenu.vim	/^imenu Builtins.wait wait$/;"	m
ByteOffset	ftplugin/html/HTML.vim	/^function! s:ByteOffset()$/;"	f
C	macros/hanoi/hanoi.vim	/^map C "fp$/;"	m
C	macros/life/life.vim	/^map C T>>>>>>>>B&$/;"	m
CC	c-support/codesnippets/Makefile	/^CC              := gcc$/;"	m
CFLAGS	c-support/codesnippets/Makefile	/^  CFLAGS       := ${CFLAGS}   -pg -O3$/;"	m
CFLAGS	c-support/codesnippets/Makefile	/^  CFLAGS       := ${DEBUG_CFLAGS}$/;"	m
CFLAGS	c-support/codesnippets/Makefile	/^  CFLAGS       := ${RELEASE_CFLAGS}$/;"	m
CFileSection	ftplugin/c.vim	/^command! -nargs=1 -complete=customlist,C_CFileSectionList        CFileSection       call C_CFileSectionListInsert   (<f-args>)$/;"	c
CMakeGetIndent	indent/cmake.vim	/^fun! CMakeGetIndent(lnum)$/;"	f
CN	plugin/ScrollColor.vim	/^command! CN :call s:NextColorscheme()$/;"	c
COLORSCROLL	plugin/ScrollColor.vim	/^command! COLORSCROLL :call s:ColorScroller()$/;"	c
CP	plugin/ScrollColor.vim	/^command! CP :call s:PrevColorscheme()$/;"	c
CPP_SOURCES	c-support/codesnippets/Makefile	/^CPP_SOURCES     = $(filter-out %.c, $(SOURCES))$/;"	m
CR	optwin.vim	/^fun! <SID>CR()$/;"	f
CSAHi	colors/maroloccio.vim	/^   command! -nargs=+ CSAHi exe "hi" <q-args>$/;"	c
CSAHi	colors/maroloccio.vim	/^   command! -nargs=+ CSAHi exe "hi" substitute(substitute(<q-args>, "undercurl", "underline", "g"), "guisp\\\\S\\\\+", "", "g")$/;"	c
CSH	filetype.vim	/^func! s:CSH()$/;"	f
CSS1	syntax/2html.vim	/^function! s:CSS1(id)$/;"	f
CStyle	ftplugin/c.vim	/^command! -nargs=1 -complete=customlist,C_StyleList               CStyle             call C_Style                    (<f-args>)$/;"	c
CVSEdit	plugin/vcscvs.vim	/^com! CVSEdit call s:CVSEdit()$/;"	c
CVSEdit	plugin/vcscvs.vim	/^function! s:CVSEdit()$/;"	f
CVSEditors	plugin/vcscvs.vim	/^com! CVSEditors call s:CVSEditors()$/;"	c
CVSEditors	plugin/vcscvs.vim	/^function! s:CVSEditors()$/;"	f
CVSUnedit	plugin/vcscvs.vim	/^com! CVSUnedit call s:CVSUnedit()$/;"	c
CVSUnedit	plugin/vcscvs.vim	/^function! s:CVSUnedit()$/;"	f
CVSWatch	plugin/vcscvs.vim	/^com! -nargs=1 CVSWatch call s:CVSWatch(<f-args>)$/;"	c
CVSWatch	plugin/vcscvs.vim	/^function! s:CVSWatch(onoff)$/;"	f
CVSWatchAdd	plugin/vcscvs.vim	/^com! CVSWatchAdd call s:CVSWatch('add')$/;"	c
CVSWatchOff	plugin/vcscvs.vim	/^com! CVSWatchOff call s:CVSWatch('off')$/;"	c
CVSWatchOn	plugin/vcscvs.vim	/^com! CVSWatchOn call s:CVSWatch('on')$/;"	c
CVSWatchRemove	plugin/vcscvs.vim	/^com! CVSWatchRemove call s:CVSWatch('remove')$/;"	c
CVSWatchers	plugin/vcscvs.vim	/^com! CVSWatchers call s:CVSWatchers()$/;"	c
CVSWatchers	plugin/vcscvs.vim	/^function! s:CVSWatchers()$/;"	f
CXX	c-support/codesnippets/Makefile	/^CXX             := g++$/;"	m
CXXFLAGS	c-support/codesnippets/Makefile	/^  CXXFLAGS     := ${CXXFLAGS} -pg -O3$/;"	m
CXXFLAGS	c-support/codesnippets/Makefile	/^  CXXFLAGS     := ${DEBUG_CXXFLAGS}$/;"	m
CXXFLAGS	c-support/codesnippets/Makefile	/^  CXXFLAGS     := ${RELEASE_CXXFLAGS}$/;"	m
C_AdjustLineEndComm	plugin/c.vim	/^function! C_AdjustLineEndComm ( mode ) range$/;"	f
C_ApplyFlag	plugin/c.vim	/^function! C_ApplyFlag ( val, flag )$/;"	f
C_Arguments	plugin/c.vim	/^function! C_Arguments ()$/;"	f
C_BrowseTemplateFiles	plugin/c.vim	/^function! C_BrowseTemplateFiles ( type )$/;"	f
C_C99LibraryIncludesInsert	plugin/c.vim	/^function! C_C99LibraryIncludesInsert ( arg )$/;"	f
C_C99LibraryIncludesList	plugin/c.vim	/^function!	C_C99LibraryIncludesList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_CFileSectionList	plugin/c.vim	/^function!	C_CFileSectionList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_CFileSectionListInsert	plugin/c.vim	/^function! C_CFileSectionListInsert ( arg )$/;"	f
C_CIncludeMenus	plugin/c.vim	/^function! C_CIncludeMenus ( menupath, liblist )$/;"	f
C_CIosFlagMenus	plugin/c.vim	/^function! C_CIosFlagMenus ( menupath, flaglist )$/;"	f
C_CheckGlobal	plugin/c.vim	/^function! C_CheckGlobal ( name )$/;"	f
C_CleanDirNameList	plugin/c.vim	/^function! C_CleanDirNameList ( list )$/;"	f
C_CodeCheck	plugin/c.vim	/^function! C_CodeCheck ()$/;"	f
C_CodeCheckArguments	plugin/c.vim	/^function! C_CodeCheckArguments ()$/;"	f
C_CodeComment	plugin/c.vim	/^function! C_CodeComment( mode, style )$/;"	f
C_CodeFor	plugin/c.vim	/^function! C_CodeFor( direction, mode )$/;"	f
C_CodeSnippet	plugin/c.vim	/^function! C_CodeSnippet(mode)$/;"	f
C_CommentCToCpp	plugin/c.vim	/^function! C_CommentCToCpp()$/;"	f
C_CommentCode	plugin/c.vim	/^function! C_CommentCode(mode)$/;"	f
C_CommentCppToC	plugin/c.vim	/^function! C_CommentCppToC()$/;"	f
C_Comment_C_SectionAll	plugin/c.vim	/^function! C_Comment_C_SectionAll ( type )$/;"	f
C_Comment_H_SectionAll	plugin/c.vim	/^function! C_Comment_H_SectionAll ( type )$/;"	f
C_Compile	plugin/c.vim	/^function! C_Compile ()$/;"	f
C_CppCLibraryIncludesInsert	plugin/c.vim	/^function! C_CppCLibraryIncludesInsert ( arg )$/;"	f
C_CppCLibraryIncludesList	plugin/c.vim	/^function!	C_CppCLibraryIncludesList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_CppLibraryIncludesInsert	plugin/c.vim	/^function! C_CppLibraryIncludesInsert ( arg )$/;"	f
C_CppLibraryIncludesList	plugin/c.vim	/^function!	C_CppLibraryIncludesList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_CreateGuiMenus	plugin/c.vim	/^function! C_CreateGuiMenus ()$/;"	f
C_DateAndTime	plugin/c.vim	/^function! C_DateAndTime ( format )$/;"	f
C_EditTemplates	plugin/c.vim	/^function! C_EditTemplates ( type )$/;"	f
C_EscapeBlanks	plugin/c.vim	/^function! C_EscapeBlanks (arg)$/;"	f
C_ExpandSingleMacro	plugin/c.vim	/^function! C_ExpandSingleMacro ( val, macroname, replacement )$/;"	f
C_ExpandUserMacros	plugin/c.vim	/^function! C_ExpandUserMacros ( key )$/;"	f
C_ForTypeComplete	plugin/c.vim	/^function!	C_ForTypeComplete ( ArgLead, CmdLine, CursorPos )$/;"	f
C_GetLineEndCommCol	plugin/c.vim	/^function! C_GetLineEndCommCol ()$/;"	f
C_HFileSectionList	plugin/c.vim	/^function!	C_HFileSectionList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_HFileSectionListInsert	plugin/c.vim	/^function! C_HFileSectionListInsert ( arg )$/;"	f
C_Hardcopy	plugin/c.vim	/^function! C_Hardcopy (mode)$/;"	f
C_Help	plugin/c.vim	/^function! C_Help( type )$/;"	f
C_HelpCsupport	plugin/c.vim	/^function! C_HelpCsupport ()$/;"	f
C_HighlightJumpTargets	plugin/c.vim	/^function! C_HighlightJumpTargets ()$/;"	f
C_HlMessage	plugin/c.vim	/^function! C_HlMessage ()$/;"	f
C_IncludesInsert	plugin/c.vim	/^function! C_IncludesInsert ( arg, List )$/;"	f
C_IncludesList	plugin/c.vim	/^function!	C_IncludesList ( ArgLead, CmdLine, CursorPos, List )$/;"	f
C_Indent	plugin/c.vim	/^function! C_Indent ( )$/;"	f
C_InitMenus	plugin/c.vim	/^function! C_InitMenus ()$/;"	f
C_Input	plugin/c.vim	/^function! C_Input ( promp, text, ... )$/;"	f
C_InsertDateAndTime	plugin/c.vim	/^function! C_InsertDateAndTime ( format )$/;"	f
C_InsertMacroValue	plugin/c.vim	/^function! C_InsertMacroValue ( key )$/;"	f
C_InsertTemplate	plugin/c.vim	/^function! C_InsertTemplate ( key, ... )$/;"	f
C_InsertTemplateWrapper	plugin/c.vim	/^function! C_InsertTemplateWrapper ()$/;"	f
C_JumpCtrlJ	plugin/c.vim	/^function! C_JumpCtrlJ ()$/;"	f
C_KeywordCommentList	plugin/c.vim	/^function!	C_KeywordCommentList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_KeywordCommentListInsert	plugin/c.vim	/^function! C_KeywordCommentListInsert ( arg )$/;"	f
C_LegalizeName	plugin/c.vim	/^function! C_LegalizeName ( name )$/;"	f
C_LineEndComment	plugin/c.vim	/^function! C_LineEndComment ( )$/;"	f
C_Link	plugin/c.vim	/^function! C_Link ()$/;"	f
C_Make	plugin/c.vim	/^function! C_Make()$/;"	f
C_MakeArguments	plugin/c.vim	/^function! C_MakeArguments ()$/;"	f
C_MultiLineEndComments	plugin/c.vim	/^function! C_MultiLineEndComments ( )$/;"	f
C_OpenFold	plugin/c.vim	/^function! C_OpenFold ( mode )$/;"	f
C_PPIf0	plugin/c.vim	/^function! C_PPIf0 (mode)$/;"	f
C_PPIf0Remove	plugin/c.vim	/^function! C_PPIf0Remove ()$/;"	f
C_ProtoClear	plugin/c.vim	/^function! C_ProtoClear ()$/;"	f
C_ProtoInsert	plugin/c.vim	/^function! C_ProtoInsert ()$/;"	f
C_ProtoPick	plugin/c.vim	/^function! C_ProtoPick (mode)$/;"	f
C_ProtoShow	plugin/c.vim	/^function! C_ProtoShow ()$/;"	f
C_ReadTemplates	plugin/c.vim	/^function! C_ReadTemplates ( templatefile )$/;"	f
C_RemoveCComment	plugin/c.vim	/^function! C_RemoveCComment( start, end )$/;"	f
C_RemoveGuiMenus	plugin/c.vim	/^function! C_RemoveGuiMenus ()$/;"	f
C_RereadTemplates	plugin/c.vim	/^function! C_RereadTemplates ()$/;"	f
C_Run	plugin/c.vim	/^function! C_Run ()$/;"	f
C_SOURCES	c-support/codesnippets/Makefile	/^C_SOURCES       = $(filter     %.c, $(SOURCES))$/;"	m
C_SetSmallCommentStyle	plugin/c.vim	/^function! C_SetSmallCommentStyle ()$/;"	f
C_Settings	plugin/c.vim	/^function! C_Settings ()$/;"	f
C_SpecialCommentList	plugin/c.vim	/^function!	C_SpecialCommentList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_SpecialCommentListInsert	plugin/c.vim	/^function! C_SpecialCommentListInsert ( arg )$/;"	f
C_SplintArguments	plugin/c.vim	/^function! C_SplintArguments ()$/;"	f
C_SplintCheck	plugin/c.vim	/^function! C_SplintCheck ()$/;"	f
C_StdLibraryIncludesInsert	plugin/c.vim	/^function! C_StdLibraryIncludesInsert ( arg )$/;"	f
C_StdLibraryIncludesList	plugin/c.vim	/^function!	C_StdLibraryIncludesList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_Style	plugin/c.vim	/^function! C_Style ( style )$/;"	f
C_StyleList	plugin/c.vim	/^function!	C_StyleList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_Toggle_Gvim_Xterm	plugin/c.vim	/^function! C_Toggle_Gvim_Xterm ()$/;"	f
C_ToolMenu	plugin/c.vim	/^function! C_ToolMenu ()$/;"	f
C_XtermSize	plugin/c.vim	/^function! C_XtermSize ()$/;"	f
CanCommentLine	plugin/NERD_commenter.vim	/^function s:CanCommentLine(forceNested, lineNum)$/;"	f
CanPlaceCursor	plugin/NERD_commenter.vim	/^function s:CanPlaceCursor(line, col)$/;"	f
CanSexyCommentLines	plugin/NERD_commenter.vim	/^function s:CanSexyCommentLines(topline, bottomline)$/;"	f
CanToggleCommentLine	plugin/NERD_commenter.vim	/^function s:CanToggleCommentLine(forceNested, lineNum)$/;"	f
CdlAsignment	indent/cdl.vim	/^fun! CdlAsignment(lnum, line)$/;"	f
CdlGetIndent	indent/cdl.vim	/^fun! CdlGetIndent(lnum)$/;"	f
Change	ftplugin/latex-suite/envmacros.vim	/^	function! s:Change(env, label, delete, putInNonumber)$/;"	f
ChangeCommand	ftplugin/latex-suite/envmacros.vim	/^	function! s:ChangeCommand(newcom)$/;"	f
CheckToIgnoreRightParan	indent/sqlanywhere.vim	/^function s:CheckToIgnoreRightParan( prev_lnum, num_levels )$/;"	f
Check_inp	filetype.vim	/^func! s:Check_inp()$/;"	f
ChgDir	autoload/vimball.vim	/^fun! s:ChgDir(newdir)$/;"	f
ChgDir	autoload/zip.vim	/^fun! s:ChgDir(newdir,errlvl,errmsg)$/;"	f
Choose	macros/matchit.vim	/^fun! s:Choose(patterns, string, comma, branch, prefix, suffix, ...)$/;"	f
Choose	plugin/matchit.vim	/^fun! s:Choose(patterns, string, comma, branch, prefix, suffix, ...)$/;"	f
Choose	plugin/plugin/matchit.vim	/^fun! s:Choose(patterns, string, comma, branch, prefix, suffix, ...)$/;"	f
ChooseMacro	ftplugin/latex-suite/custommacros.vim	/^function! s:ChooseMacro(ask)$/;"	f
CleanUp	macros/matchit.vim	/^fun! s:CleanUp(options, mode, startline, startcol, ...)$/;"	f
CleanUp	plugin/matchit.vim	/^fun! s:CleanUp(options, mode, startline, startcol, ...)$/;"	f
CleanUp	plugin/plugin/matchit.vim	/^fun! s:CleanUp(options, mode, startline, startcol, ...)$/;"	f
ClearMenu	plugin/vcscommand.vim	/^function! s:ClearMenu()$/;"	f
Clearstack	autoload/xmlcomplete.vim	/^function! s:Clearstack(sname)$/;"	f
CloseAllResultBuffers	plugin/vcscommand.vim	/^function! s:CloseAllResultBuffers()$/;"	f
CloseBug	ftplugin/debchangelog.vim	/^function CloseBug()$/;"	f
CobolIndentBlock	ftplugin/cobol.vim	/^function! CobolIndentBlock(shift)$/;"	f
ColorScroller	plugin/ScrollColor.vim	/^function! s:ColorScroller()$/;"	f
ColorSelect	ftplugin/html/HTML.vim	/^  command! -nargs=? ColorSelect call s:ShowColors(<f-args>)$/;"	c
ColorSelect	ftplugin/html/HTML.vim	/^function! s:ColorSelect(bufnr, ...)$/;"	f
ColorsMenu	ftplugin/html/HTML.vim	/^function! s:ColorsMenu(name, color)$/;"	f
Comment	ftplugin/cobol.vim	/^function! s:Comment(arg)$/;"	f
CommentBlock	plugin/NERD_commenter.vim	/^function s:CommentBlock(top, bottom, lSide, rSide, forceNested )$/;"	f
CommentLines	plugin/NERD_commenter.vim	/^function s:CommentLines(forceNested, align, firstLine, lastLine)$/;"	f
CommentLinesMinimal	plugin/NERD_commenter.vim	/^function s:CommentLinesMinimal(firstLine, lastLine)$/;"	f
CommentLinesSexy	plugin/NERD_commenter.vim	/^function s:CommentLinesSexy(topline, bottomline)$/;"	f
CommentLinesToggle	plugin/NERD_commenter.vim	/^function s:CommentLinesToggle(forceNested, firstLine, lastLine)$/;"	f
CommentRegion	plugin/NERD_commenter.vim	/^function s:CommentRegion(topLine, topCol, bottomLine, bottomCol, forceNested)$/;"	f
CompilerSet	compiler/ant.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/bcc.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/checkstyle.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/cs.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/decada.vim	/^   command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/dot.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/eruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/fortran_F.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/fortran_cv.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/fortran_elf90.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/fortran_g77.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/fortran_lf95.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/fpc.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/gf.vim	/^	  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/gnat.vim	/^   command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/hp_acc.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/icc.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/intel.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/irix5_c.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/irix5_cpp.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/javac.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/jikes.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/mips_c.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/mipspro_c89.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/mipspro_cpp.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/modelsim_vcom.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/neato.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/onsgmls.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/pbx.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/perl.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/php.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/pyunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/rspec.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/ruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/rubyunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/se.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/splint.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/tcl.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/tidy.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/xmllint.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	compiler/xmlwf.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
Component	tools/shtags.pl	/^Component:	$id[1]$/;"	l
ComposePath	autoload/netrw.vim	/^fun! s:ComposePath(base,subdir)$/;"	f
Compute	ftplugin/latex-suite/templates.vim	/^function! <SID>Compute(what)$/;"	f
Container_Add	plugin/ScreenShot.vim	/^function! s:Container_Add(self,...)$/;"	f
Container_New	plugin/ScreenShot.vim	/^function! s:Container_New(container,child1,child2)$/;"	f
Convert2HTML	plugin/tohtml.vim	/^  func Convert2HTML(line1, line2)$/;"	f
ConvertCase	ftplugin/html/HTML.vim	/^function! s:ConvertCase(str)$/;"	f
ConvertLeadingSpacesToTabs	plugin/NERD_commenter.vim	/^function s:ConvertLeadingSpacesToTabs(line)$/;"	f
ConvertLeadingTabsToSpaces	plugin/NERD_commenter.vim	/^function s:ConvertLeadingTabsToSpaces(line)$/;"	f
ConvertLeadingWhiteSpace	plugin/NERD_commenter.vim	/^function s:ConvertLeadingWhiteSpace(line)$/;"	f
CopyArgs	plugin/ScreenShot.vim	/^function! CopyArgs(args,...)$/;"	f
Count	macros/matchit.vim	/^fun! s:Count(string, pattern, ...)$/;"	f
Count	plugin/matchit.vim	/^fun! s:Count(string, pattern, ...)$/;"	f
Count	plugin/plugin/matchit.vim	/^fun! s:Count(string, pattern, ...)$/;"	f
CountEntries	plugin/ScrollColor.vim	/^function! s:CountEntries(list)$/;"	f
CountNonESCedOccurances	plugin/NERD_commenter.vim	/^function s:CountNonESCedOccurances(str, searchstr, escChar)$/;"	f
CountUnbalancedParan	indent/sqlanywhere.vim	/^function s:CountUnbalancedParan( line, paran_to_check )$/;"	f
CountWrapper	ftplugin/vhdl.vim	/^function! <SID>CountWrapper(cmd)$/;"	f
CreateMapping	plugin/vcscommand.vim	/^function! s:CreateMapping(shortcut, expansion, display)$/;"	f
CreateMaps	plugin/NERD_commenter.vim	/^function! s:CreateMaps(target, combo)$/;"	f
CreateMenuItems	plugin/NERD_commenter.vim	/^    function! s:CreateMenuItems(target, desc, root)$/;"	f
CurrentColor	plugin/ScrollColor.vim	/^function! s:CurrentColor()$/;"	f
Cycle	ftplugin/gitrebase.vim	/^command! -buffer -bar Cycle  :call s:cycle()$/;"	c
DBL	plugin/ddldbl.vim	/^	command -range=% DBL		:<line1>,<line2>g\/^\\s*$\/:delete$/;"	c
DDL	plugin/ddldbl.vim	/^	command -range=% DDL		:<line1>,<line2>call <SID>FeralDeleteDuplicateLines()$/;"	c
DEBUG	c-support/codesnippets/Makefile	/^DEBUG          := YES$/;"	m
DEBUG_CFLAGS	c-support/codesnippets/Makefile	/^DEBUG_CFLAGS    := -Wall -ansi -pedantic -O0 -g$/;"	m
DEBUG_LDFLAGS	c-support/codesnippets/Makefile	/^DEBUG_LDFLAGS    := -g$/;"	m
Date	ftplugin/debchangelog.vim	/^function <SID>Date()$/;"	f
DebChangelogFoldText	ftplugin/debchangelog.vim	/^function! DebChangelogFoldText()$/;"	f
DebCompleteBugs	ftplugin/debchangelog.vim	/^fun! DebCompleteBugs(findstart, base)$/;"	f
DebControlFold	ftplugin/debcontrol.vim	/^function! DebControlFold(l)$/;"	f
DebControlFoldText	ftplugin/debcontrol.vim	/^function! DebControlFoldText()$/;"	f
DebGetChangelogFold	ftplugin/debchangelog.vim	/^function! DebGetChangelogFold(lnum)$/;"	f
DebGetPkgSrcName	ftplugin/debchangelog.vim	/^function! DebGetPkgSrcName(lineno)$/;"	f
DebugGenericIndent	indent/GenericIndent.vim	/^function DebugGenericIndent(msg)$/;"	f
DecreaseFunc	ftplugin/cobol.vim	/^function! s:DecreaseFunc(type)$/;"	f
DecreaseIndent	ftplugin/cobol.vim	/^function! s:DecreaseIndent()$/;"	f
DefPython	autoload/pythoncomplete.vim	/^function! s:DefPython()$/;"	f
DefRuby	autoload/rubycomplete.vim	/^function! s:DefRuby()$/;"	f
DefaultTabLine	plugin/ScreenShot.vim	/^function! s:DefaultTabLine()$/;"	f
DefineInlineMarkup	syntax/rst.vim	/^function! s:DefineInlineMarkup(name, start, middle, end)$/;"	f
DefineOneInlineMarkup	syntax/rst.vim	/^function! s:DefineOneInlineMarkup(name, start, middle, end, char_left, char_right)$/;"	f
DefineVariable	plugin/errormarker.vim	/^function! s:DefineVariable (name, default)$/;"	f
DeleteMacro	ftplugin/latex-suite/custommacros.vim	/^function! <SID>DeleteMacro(...)$/;"	f
DetectCharset	ftplugin/html/HTML.vim	/^function! s:DetectCharset()$/;"	f
Dict2info	autoload/ccomplete.vim	/^function! s:Dict2info(dict)$/;"	f
Dictionary	plugin/browser.vim	/^com! -nargs=+ Dictionary      call OpenDictionary(<q-args>)$/;"	c
Diff2Html	plugin/ScreenShot.vim	/^command! -range=% Diff2Html     :call Diff2Html(<line1>,<line2>)$/;"	c
Diff2Html	plugin/ScreenShot.vim	/^function! Diff2Html(line1,line2)$/;"	f
DiffGitCached	ftplugin/gitcommit.vim	/^command! -bang -bar -buffer -complete=custom,s:diffcomplete -nargs=* DiffGitCached :call s:gitdiffcached(<bang>0,b:git_dir,<f-args>)$/;"	c
DiffOrig	vimrc_example.vim	/^  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis$/;"	c
DiffSynId	plugin/ScreenShot.vim	/^function! s:DiffSynId(y,x,fl)$/;"	f
Distribution	ftplugin/debchangelog.vim	/^function Distribution(dist)$/;"	f
DoCommand	plugin/vcsbzr.vim	/^function! s:DoCommand(cmd, cmdName, statusText, options)$/;"	f
DoCommand	plugin/vcscvs.vim	/^function! s:DoCommand(cmd, cmdName, statusText, options)$/;"	f
DoCommand	plugin/vcsgit.vim	/^function! s:DoCommand(cmd, cmdName, statusText, options)$/;"	f
DoCommand	plugin/vcshg.vim	/^function! s:DoCommand(cmd, cmdName, statusText, options)$/;"	f
DoCommand	plugin/vcssvk.vim	/^function! s:DoCommand(cmd, cmdName, statusText, options)$/;"	f
DoCommand	plugin/vcssvn.vim	/^function! s:DoCommand(cmd, cmdName, statusText, options)$/;"	f
DoMatchParen	plugin/matchparen.vim	/^command! DoMatchParen runtime plugin\/matchparen.vim | windo doau CursorMoved$/;"	c
DoRemoteReply	plugin/rrhelper.vim	/^  function DoRemoteReply(id, cnt, group, file)$/;"	f
Do_toolbar_tmenu	lang/menu_af_af.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_ca_es.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_chinese_gb.936.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_chinese_taiwan.950.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_cs_cz.iso_8859-2.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_czech_czech_republic.1250.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_czech_czech_republic.ascii.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_de_de.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_eo.utf-8.vim	/^fun! Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_es_es.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_fi_fi.latin1.vim	/^fun! Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_fr_fr.latin1.vim	/^fun! Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_hu_hu.iso_8859-2.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_hu_hu.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_it_it.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_ja_jp.euc-jp.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_ja_jp.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_japanese_japan.932.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_ko_kr.euckr.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_ko_kr.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_nb_no.latin1.vim	/^	function Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_nl_nl.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_pl_pl.iso_8859-2.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_pl_pl.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_polish_poland.1250.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_pt_br.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_pt_pt.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_ru_ru.koi8-r.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_ru_ru.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_sk_sk.iso_8859-2.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_sl_si.cp1250.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_sl_si.latin2.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_sl_si.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_slovak_slovak_republic.1250.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_sr_yu.ascii.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_sr_yu.iso_8859-2.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_sr_yu.iso_8859-5.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_sr_yu.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_sv_se.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_uk_ua.cp1251.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_uk_ua.koi8-u.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_vi_vn.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_zh_cn.gb2312.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_zh_cn.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	lang/menu_zh_tw.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
DoesBlockHaveDelim	plugin/NERD_commenter.vim	/^function s:DoesBlockHaveDelim(delim, top, bottom)$/;"	f
DoesBlockHaveMultipartDelim	plugin/NERD_commenter.vim	/^function s:DoesBlockHaveMultipartDelim(top, bottom)$/;"	f
Doxygen_Hilights	syntax/doxygen.vim	/^    fun! s:Doxygen_Hilights()$/;"	f
Doxygen_Hilights_Base	syntax/doxygen.vim	/^    fun! s:Doxygen_Hilights_Base()$/;"	f
DtraceCheck	filetype.vim	/^func! s:DtraceCheck()$/;"	f
Dump	plugin/ScreenShot.vim	/^function! s:Dump(var,...)$/;"	f
DxyCreateSmallSpecial	syntax/doxygen.vim	/^  fun! s:DxyCreateSmallSpecial( kword, name )$/;"	f
DylanGetIndent	indent/dylan.vim	/^function DylanGetIndent()$/;"	f
E	macros/hanoi/hanoi.vim	/^map E "hp$/;"	m
E2T	colors/vividchalk.vim	/^function! E2T(a)$/;"	f
EXECUTABLE	c-support/codesnippets/Makefile	/^EXECUTABLE      := main$/;"	m
EXE_CMDLINE	c-support/codesnippets/Makefile	/^EXE_CMDLINE     =$/;"	m
EXE_START	c-support/codesnippets/Makefile	/^EXE_START       = no$/;"	m
Edit	ftplugin/gitrebase.vim	/^command! -buffer -bar Edit   :call s:choose('edit')$/;"	c
EditElsewhere	macros/editexisting.vim	/^func s:EditElsewhere(filename)$/;"	f
EditExisting	macros/editexisting.vim	/^func! EditExisting(fname, command)$/;"	f
EditFile	plugin/vcscommand.vim	/^function! s:EditFile(command, originalBuffer, statusText)$/;"	f
EditMacro	ftplugin/latex-suite/custommacros.vim	/^function! <SID>EditMacro(...)$/;"	f
EditVimrc	menu.vim	/^fun! s:EditVimrc()$/;"	f
Email	ftplugin/debchangelog.vim	/^function <SID>Email()$/;"	f
EmptystackP	autoload/xmlcomplete.vim	/^function! s:EmptystackP(sname)$/;"	f
End	macros/less.vim	/^fun! s:End()$/;"	f
EndBlockIndent	indent/ada.vim	/^function s:EndBlockIndent( prev_indent, prev_lnum, blockstart, blockend )$/;"	f
Enter_annotation_buffer	ftplugin/ocaml.vim	/^    function! s:Enter_annotation_buffer()$/;"	f
EntityMenu	ftplugin/html/HTML.vim	/^function! s:EntityMenu(name, item, ...)$/;"	f
EntryByIndex	plugin/ScrollColor.vim	/^function! s:EntryByIndex(list,index)$/;"	f
EnumWindows	plugin/ScreenShot.vim	/^function! s:EnumWindows()$/;"	f
Environ.CDPATH	macros/shellmenu.vim	/^imenu Environ.CDPATH ${CDPATH}$/;"	m
Environ.HOME	macros/shellmenu.vim	/^imenu Environ.HOME ${HOME}$/;"	m
Environ.IFS	macros/shellmenu.vim	/^imenu Environ.IFS ${IFS}$/;"	m
Environ.LC_CTYPE	macros/shellmenu.vim	/^imenu Environ.LC_CTYPE ${LC_CTYPE}$/;"	m
Environ.LC_MESSAGES	macros/shellmenu.vim	/^imenu Environ.LC_MESSAGES ${LC_MESSAGES}$/;"	m
Environ.MAIL	macros/shellmenu.vim	/^imenu Environ.MAIL ${MAIL}$/;"	m
Environ.MAILCHECK	macros/shellmenu.vim	/^imenu Environ.MAILCHECK ${MAILCHECK}$/;"	m
Environ.PATH	macros/shellmenu.vim	/^imenu Environ.PATH ${PATH}$/;"	m
Environ.PS1	macros/shellmenu.vim	/^imenu Environ.PS1 ${PS1}$/;"	m
Environ.PS2	macros/shellmenu.vim	/^imenu Environ.PS2 ${PS2}$/;"	m
Environ.SHACCT	macros/shellmenu.vim	/^imenu Environ.SHACCT ${SHACCT}$/;"	m
Environ.SHELL	macros/shellmenu.vim	/^imenu Environ.SHELL ${SHELL}$/;"	m
ErlangIndent	indent/erlang.vim	/^function ErlangIndent()$/;"	f
ErlangIndentAtferLine	indent/erlang.vim	/^function s:ErlangIndentAtferLine(l)$/;"	f
ErrMsg	autoload/rubycomplete.vim	/^function! s:ErrMsg(msg)$/;"	f
ErrorAtCursor	plugin/errormarker.vim	/^command ErrorAtCursor call ShowErrorAtCursor()$/;"	c
ErrorMessageBalloons	plugin/errormarker.vim	/^function! s:ErrorMessageBalloons()$/;"	f
Esc	plugin/NERD_commenter.vim	/^function s:Esc(str)$/;"	f
Escape	autoload/getscript.vim	/^fun! s:Escape(name)$/;"	f
Escape	autoload/tar.vim	/^fun s:Escape(name,isfilt)$/;"	f
Escape	autoload/vimball.vim	/^fun s:Escape(name)$/;"	f
Escape	autoload/zip.vim	/^fun! s:Escape(fname,isfilt)$/;"	f
Examples	tools/efm_perl.pl	/^Examples:$/;"	l
ExchangeListItems	plugin/libList.vim	/^function ExchangeListItems( array, item1Index, item2Index )$/;"	f
Exec	ftplugin/latex-suite/templates.vim	/^function! <SID>Exec(what)$/;"	f
ExecMap	plugin/imaps.vim	/^function! ExecMap(prefix, mode)$/;"	f
Executable	plugin/vcsbzr.vim	/^function! s:Executable()$/;"	f
Executable	plugin/vcscvs.vim	/^function! s:Executable()$/;"	f
Executable	plugin/vcsgit.vim	/^function! s:Executable()$/;"	f
Executable	plugin/vcshg.vim	/^function! s:Executable()$/;"	f
Executable	plugin/vcssvk.vim	/^function! s:Executable()$/;"	f
Executable	plugin/vcssvn.vim	/^function! s:Executable()$/;"	f
ExecuteExtensionMapping	plugin/vcscommand.vim	/^function! s:ExecuteExtensionMapping(mapping)$/;"	f
ExecuteVCSCommand	plugin/vcscommand.vim	/^function! s:ExecuteVCSCommand(command, argList)$/;"	f
ExitDialog	plugin/ScrollColor.vim	/^function! s:ExitDialog(old, action)$/;"	f
Exit_annotation_buffer	ftplugin/ocaml.vim	/^    function! s:Exit_annotation_buffer()$/;"	f
Explore	plugin/netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Explore		call netrw#Explore(<count>,0,0+<bang>0,<q-args>)$/;"	c
ExplorePatHls	autoload/netrw.vim	/^fun! s:ExplorePatHls(pattern)$/;"	f
ExtraMappingsAdd	ftplugin/html/HTML.vim	/^function! s:ExtraMappingsAdd(arg)$/;"	f
Extract_type_data	ftplugin/ocaml.vim	/^    function! s:Extract_type_data(block_pattern)$/;"	f
F	macros/hanoi/hanoi.vim	/^map F "hy2l$/;"	m
F	macros/less.vim	/^map F :e<CR>G<SID>L:sleep 1<CR>F$/;"	m
F	macros/urm/urm.vim	/^map F yl$/;"	m
FB_DisplayFiles	plugin/filebrowser.vim	/^function! FB_DisplayFiles(dir)$/;"	f
FB_DisplayHelp	plugin/filebrowser.vim	/^function! <SID>FB_DisplayHelp()$/;"	f
FB_EditEntry	plugin/filebrowser.vim	/^function! <SID>FB_EditEntry()$/;"	f
FB_GetVar	plugin/filebrowser.vim	/^function! <SID>FB_GetVar(name, default)$/;"	f
FB_OpenFileBrowser	plugin/filebrowser.vim	/^function! FB_OpenFileBrowser(dir)$/;"	f
FB_ResetSilentSettings	plugin/filebrowser.vim	/^function! <SID>FB_ResetSilentSettings()$/;"	f
FB_SetHighlighting	plugin/filebrowser.vim	/^function! <SID>FB_SetHighlighting()$/;"	f
FB_SetMaps	plugin/filebrowser.vim	/^function! <SID>FB_SetMaps()$/;"	f
FB_SetScratchSettings	plugin/filebrowser.vim	/^function! <SID>FB_SetScratchSettings()$/;"	f
FB_SetSilentSettings	plugin/filebrowser.vim	/^function! <SID>FB_SetSilentSettings()$/;"	f
FB_SetVar	plugin/filebrowser.vim	/^function! FB_SetVar(varname, value)$/;"	f
FB_ToggleHelp	plugin/filebrowser.vim	/^function! <SID>FB_ToggleHelp()$/;"	f
FTRules	filetype.vim	/^func! s:FTRules()$/;"	f
FTVB	filetype.vim	/^func! s:FTVB(alt)$/;"	f
FTasm	filetype.vim	/^func! s:FTasm()$/;"	f
FTasmsyntax	filetype.vim	/^func! s:FTasmsyntax()$/;"	f
FTbtm	filetype.vim	/^func! s:FTbtm()$/;"	f
FTchange	filetype.vim	/^func! s:FTchange()$/;"	f
FTe	filetype.vim	/^func! s:FTe()$/;"	f
FTent	filetype.vim	/^func! s:FTent()$/;"	f
FTheader	filetype.vim	/^func! s:FTheader()$/;"	f
FThtml	filetype.vim	/^func! s:FThtml()$/;"	f
FTidl	filetype.vim	/^func! s:FTidl()$/;"	f
FTinc	filetype.vim	/^func! s:FTinc()$/;"	f
FTlpc	filetype.vim	/^func! s:FTlpc()$/;"	f
FTm	filetype.vim	/^func! s:FTm()$/;"	f
FTmm	filetype.vim	/^func! s:FTmm()$/;"	f
FTmms	filetype.vim	/^func! s:FTmms()$/;"	f
FTnroff	filetype.vim	/^func! s:FTnroff()$/;"	f
FTperl	filetype.vim	/^func! s:FTperl()$/;"	f
FTpl	filetype.vim	/^func! s:FTpl()$/;"	f
FTprogress_asm	filetype.vim	/^func! s:FTprogress_asm()$/;"	f
FTprogress_cweb	filetype.vim	/^func! s:FTprogress_cweb()$/;"	f
FTprogress_pascal	filetype.vim	/^func! s:FTprogress_pascal()$/;"	f
FTr	filetype.vim	/^func! s:FTr()$/;"	f
FTtex	filetype.vim	/^func! s:FTtex()$/;"	f
FTxml	filetype.vim	/^func! s:FTxml()$/;"	f
FTy	filetype.vim	/^func! s:FTy()$/;"	f
FeralDeleteDuplicateLines	plugin/ddldbl.vim	/^function s:FeralDeleteDuplicateLines() range "{{{$/;"	f
FileExplorer	plugin/netrwPlugin.vim	/^augroup FileExplorer$/;"	a
FileFormat	menu.vim	/^fun! s:FileFormat()$/;"	f
FileReadable	autoload/netrw.vim	/^fun! s:FileReadable(fname)$/;"	f
FilterPackageMenuLHS	ftplugin/latex-suite/packages.vim	/^function! <SID>FilterPackageMenuLHS(command)$/;"	f
FinalEcho	plugin/ScrollColor.vim	/^function! s:FinalEcho(suffix)$/;"	f
Finalise	ftplugin/debchangelog.vim	/^function Finalise()$/;"	f
FinaliseMenu	ftplugin/debchangelog.vim	/^function <SID>FinaliseMenu()$/;"	f
Finalised	ftplugin/debchangelog.vim	/^function <SID>Finalised()$/;"	f
Find	optwin.vim	/^fun! <SID>Find(lnum)$/;"	f
FindBoundingLinesOfSexyCom	plugin/NERD_commenter.vim	/^function s:FindBoundingLinesOfSexyCom(lineNum)$/;"	f
FindDelimiterIndex	plugin/NERD_commenter.vim	/^function s:FindDelimiterIndex(delimiter, line)$/;"	f
FindIndex	plugin/ScrollColor.vim	/^function! s:FindIndex(list,entry)$/;"	f
FindLet	indent/ocaml.vim	/^function s:FindLet(pstart, pmid, pend)$/;"	f
FindLet	indent/sml.vim	/^function! s:FindLet(pstart, pmid, pend)$/;"	f
FindOpenBracket	indent/php.vim	/^function! FindOpenBracket(lnum) " {{{$/;"	f
FindPage	ftplugin/man.vim	/^func <SID>FindPage(sect, page)$/;"	f
FindPair	indent/ocaml.vim	/^function s:FindPair(pstart, pmid, pend)$/;"	f
FindPair	indent/sml.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
FindPrevNonBlankNonComment	indent/erlang.vim	/^function s:FindPrevNonBlankNonComment(lnum)$/;"	f
FindTheIfOfAnElse	indent/php.vim	/^function! FindTheIfOfAnElse (lnum, StopAfterFirstPrevElse) " {{{$/;"	f
Find_common_path	ftplugin/ocaml.vim	/^  function! s:Find_common_path (p1,p2)$/;"	f
Find_option	plugin/bash-support.vim	/^function! s:Find_option ( list, option )$/;"	f
First_word_len	indent/awk.vim	/^function! s:First_word_len( line )$/;"	f
FixBeginfigs	ftplugin/mp.vim	/^  command -nargs=0 FixBeginfigs call s:fix_beginfigs()$/;"	c
FixFText	menu.vim	/^fun! s:FixFText()$/;"	f
FlagNode.Value	plugin/ScreenShot.vim	/^function! s:FlagNode.Value()$/;"	f
FnameEscape	menu.vim	/^func! s:FnameEscape(fname)$/;"	f
Fnameescape	ftplugin/ocaml.vim	/^  function! s:Fnameescape(s)$/;"	f
FoldRegionsWithNoSkip	plugin/SyntaxFolds.vim	/^function! FoldRegionsWithNoSkip(startpat, endpat, startoff, endoff, line1, line2, skippedRegions)$/;"	f
FoldRegionsWithSkip	plugin/SyntaxFolds.vim	/^function! FoldRegionsWithSkip(startpat, endpat, startoff, endoff, startskip, endskip, line1, line2)$/;"	f
FortranGetFixedIndent	indent/fortran.vim	/^function FortranGetFixedIndent()$/;"	f
FortranGetFreeIndent	indent/fortran.vim	/^function FortranGetFreeIndent()$/;"	f
FortranGetIndent	indent/fortran.vim	/^function FortranGetIndent(lnum)$/;"	f
FortranStubs	fortran_stubs.vim	/^function! FortranStubs()$/;"	f
Forward	macros/less.vim	/^fun! s:Forward()$/;"	f
FullName	ftplugin/debchangelog.vim	/^function <SID>FullName()$/;"	f
G	macros/less.vim	/^noremap <script> G G<SID>L$/;"	m
GLOBAL_INC_DIR	c-support/codesnippets/Makefile	/^GLOBAL_INC_DIR  =$/;"	m
GLOBAL_LIBS	c-support/codesnippets/Makefile	/^GLOBAL_LIBS     =$/;"	m
GLOBAL_LIBSS	c-support/codesnippets/Makefile	/^GLOBAL_LIBSS    = $(addprefix $(GLOBAL_LIB_DIR)\/, $(GLOBAL_LIBS))$/;"	m
GLOBAL_LIB_DIR	c-support/codesnippets/Makefile	/^GLOBAL_LIB_DIR  =$/;"	m
Gdzie	tutor/tutor.pl	/^  Gdzie:$/;"	l
GenerateResultBufferName	plugin/vcscommand.vim	/^function! s:GenerateResultBufferName(command, originalBuffer, vcsType, statusText)$/;"	f
GenerateResultBufferNameWithExtension	plugin/vcscommand.vim	/^function! s:GenerateResultBufferNameWithExtension(command, originalBuffer, vcsType, statusText)$/;"	f
GenericAllStmts	indent/GenericIndent.vim	/^function GenericAllStmts()$/;"	f
GenericDedentStmts	indent/GenericIndent.vim	/^function GenericDedentStmts(stmts)$/;"	f
GenericIndent	indent/GenericIndent.vim	/^function GenericIndent()$/;"	f
GenericIndentStmts	indent/GenericIndent.vim	/^function GenericIndentStmts(stmts)$/;"	f
GetAdaIndent	indent/ada.vim	/^function GetAdaIndent()$/;"	f
GetAddition	autoload/ccomplete.vim	/^function! s:GetAddition(line, match, memarg, bracket)$/;"	f
GetAwkIndent	indent/awk.vim	/^function! GetAwkIndent()$/;"	f
GetBstIndent	indent/bst.vim	/^function! GetBstIndent(lnum) abort$/;"	f
GetBufferRubyClass	autoload/rubycomplete.vim	/^function! s:GetBufferRubyClass(name, ...)$/;"	f
GetBufferRubyEntity	autoload/rubycomplete.vim	/^function! s:GetBufferRubyEntity( name, type, ... )$/;"	f
GetBufferRubyModule	autoload/rubycomplete.vim	/^function! s:GetBufferRubyModule(name, ...)$/;"	f
GetBufferRubySingletonMethods	autoload/rubycomplete.vim	/^function! s:GetBufferRubySingletonMethods(name)$/;"	f
GetCSSIndent	indent/css.vim	/^function GetCSSIndent()$/;"	f
GetCmdArg	ftplugin/man.vim	/^func <SID>GetCmdArg(sect, page)$/;"	f
GetCobolIndent	indent/cobol.vim	/^function! GetCobolIndent(lnum) abort$/;"	f
GetColor	plugin/ScreenShot.vim	/^    function! s:GetColor(id,type)$/;"	f
GetColoredText	plugin/ScreenShot.vim	/^function! s:GetColoredText(lines,start,finish,height,topfill,lineEnd)$/;"	f
GetColoredWindowText	plugin/ScreenShot.vim	/^function! s:GetColoredWindowText(window,lines,last)$/;"	f
GetColorschemesList	plugin/ScrollColor.vim	/^function! s:GetColorschemesList()$/;"	f
GetConfigIndent	indent/config.vim	/^function GetConfigIndent()$/;"	f
GetCredits	plugin/ScreenShot.vim	/^function! s:GetCredits()$/;"	f
GetDTDIndent	indent/dtd.vim	/^function GetDTDIndent()$/;"	f
GetDefaultHlVect	plugin/ScreenShot.vim	/^function! s:GetDefaultHlVect()$/;"	f
GetEiffelIndent	indent/eiffel.vim	/^function GetEiffelIndent()$/;"	f
GetErubyIndent	indent/eruby.vim	/^function! GetErubyIndent(...)$/;"	f
GetEtermIndent	indent/eterm.vim	/^function GetEtermIndent()$/;"	f
GetFillChars	plugin/ScreenShot.vim	/^function! s:GetFillChars()$/;"	f
GetFirstColors	plugin/ScrollColor.vim	/^function! s:GetFirstColors() $/;"	f
GetFrameScriptIndent	indent/framescript.vim	/^function GetFrameScriptIndent()$/;"	f
GetGitconfigIndent	indent/gitconfig.vim	/^function! GetGitconfigIndent()$/;"	f
GetHamlIndent	indent/haml.vim	/^function! GetHamlIndent()$/;"	f
GetHlVect	plugin/ScreenShot.vim	/^function! s:GetHlVect(id)$/;"	f
GetIdlangIndent	indent/idlang.vim	/^function GetIdlangIndent(lnum)$/;"	f
GetInd	indent/ocaml.vim	/^function s:GetInd(lnum, pat, lim)$/;"	f
GetInd	indent/sml.vim	/^function! s:GetInd(lnum, pat, lim)$/;"	f
GetIshdIndent	indent/ishd.vim	/^fun! GetIshdIndent(lnum)$/;"	f
GetJavaIndent	indent/java.vim	/^function GetJavaIndent()$/;"	f
GetLDIndent	indent/ld.vim	/^function GetLDIndent()$/;"	f
GetLastColors	plugin/ScrollColor.vim	/^function! s:GetLastColors()$/;"	f
GetLastRealCodeLNum	indent/php.vim	/^function! GetLastRealCodeLNum(startline) " {{{$/;"	f
GetLatestVimScripts	autoload/getscript.vim	/^com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()$/;"	c
GetLatestVimScripts	plugin/getscriptPlugin.vim	/^com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()$/;"	c
GetLeft	plugin/NERD_commenter.vim	/^function s:GetLeft(alt, space, esc)$/;"	f
GetLinePrefix	plugin/ScreenShot.vim	/^function! s:GetLinePrefix(y,numWidth,width,wrapped)$/;"	f
GetLineWithoutFullComment	indent/ocaml.vim	/^function s:GetLineWithoutFullComment(lnum)$/;"	f
GetListCount	plugin/libList.vim	/^function GetListCount( array )$/;"	f
GetListItem	plugin/libList.vim	/^function GetListItem( array, index )$/;"	f
GetListMatchItem	plugin/libList.vim	/^function GetListMatchItem( array, pattern )$/;"	f
GetLogtalkIndent	indent/logtalk.vim	/^function! GetLogtalkIndent()$/;"	f
GetLuaIndent	indent/lua.vim	/^function! GetLuaIndent()$/;"	f
GetMSL	indent/ruby.vim	/^function s:GetMSL(lnum)$/;"	f
GetMakeIndent	indent/make.vim	/^function GetMakeIndent()$/;"	f
GetMatlabIndent	indent/matlab.vim	/^function GetMatlabIndent(lnum)$/;"	f
GetMenu	plugin/ScreenShot.vim	/^function! s:GetMenu(mode,name)$/;"	f
GetMetaPostIndent	indent/mp.vim	/^function! GetMetaPostIndent()$/;"	f
GetMmaIndent	indent/mma.vim	/^function GetMmaIndent()$/;"	f
GetNextColor	plugin/ScrollColor.vim	/^function! s:GetNextColor(color)$/;"	f
GetOCamlIndent	indent/ocaml.vim	/^function GetOCamlIndent()$/;"	f
GetObjCIndent	indent/objc.vim	/^function GetObjCIndent()$/;"	f
GetOccamIndent	indent/occam.vim	/^function GetOccamIndent()$/;"	f
GetOffsetOf	indent/config.vim	/^function s:GetOffsetOf(line, regexp)$/;"	f
GetOneScript	autoload/getscript.vim	/^fun! s:GetOneScript(...)$/;"	f
GetPage	ftplugin/man.vim	/^func <SID>GetPage(...)$/;"	f
GetPascalIndent	indent/pascal.vim	/^function! GetPascalIndent( line_num )$/;"	f
GetPerlIndent	indent/perl.vim	/^function GetPerlIndent()$/;"	f
GetPhpIndent	indent/php.vim	/^function! GetPhpIndent()$/;"	f
GetPoVRayIndent	indent/pov.vim	/^function GetPoVRayIndent()$/;"	f
GetPrevColor	plugin/ScrollColor.vim	/^function! s:GetPrevColor(color)$/;"	f
GetPrevNonCommentLineNum	indent/pascal.vim	/^function! s:GetPrevNonCommentLineNum( line_num )$/;"	f
GetPrologIndent	indent/prolog.vim	/^function! GetPrologIndent()$/;"	f
GetPythonIndent	indent/python.vim	/^function GetPythonIndent(lnum)$/;"	f
GetRSTIndent	indent/rst.vim	/^function GetRSTIndent()$/;"	f
GetReadlineIndent	indent/readline.vim	/^function GetReadlineIndent()$/;"	f
GetRevision	plugin/vcscvs.vim	/^function! s:GetRevision()$/;"	f
GetRight	plugin/NERD_commenter.vim	/^function s:GetRight(alt, space, esc)$/;"	f
GetRubyIndent	indent/ruby.vim	/^function GetRubyIndent()$/;"	f
GetRubyVarType	autoload/rubycomplete.vim	/^function! s:GetRubyVarType(v)$/;"	f
GetSDLIndent	indent/sdl.vim	/^function! GetSDLIndent()$/;"	f
GetSMLIndent	indent/sml.vim	/^function! GetSMLIndent()$/;"	f
GetSQLIndent	indent/sqlanywhere.vim	/^function GetSQLIndent()$/;"	f
GetSassIndent	indent/sass.vim	/^function! GetSassIndent()$/;"	f
GetScript	autoload/getscript.vim	/^com!        -nargs=0 GetScript           call getscript#GetLatestVimScripts()$/;"	c
GetScripts	plugin/getscriptPlugin.vim	/^com!        -nargs=0 GetScripts          call getscript#GetLatestVimScripts()$/;"	c
GetSexyComLeft	plugin/NERD_commenter.vim	/^function s:GetSexyComLeft(space, esc)$/;"	f
GetSexyComMarker	plugin/NERD_commenter.vim	/^function s:GetSexyComMarker(space, esc)$/;"	f
GetSexyComRight	plugin/NERD_commenter.vim	/^function s:GetSexyComRight(space, esc)$/;"	f
GetShIndent	indent/sh.vim	/^function GetShIndent()$/;"	f
GetStmtStarterIndent	indent/sqlanywhere.vim	/^function s:GetStmtStarterIndent( keyword, curr_lnum )$/;"	f
GetTFIndent	indent/tf.vim	/^function GetTFIndent()$/;"	f
GetTabLine	plugin/ScreenShot.vim	/^function! GetTabLine()$/;"	f
GetTclIndent	indent/tcl.vim	/^function GetTclIndent()$/;"	f
GetTeXIndent	indent/tex.vim	/^function GetTeXIndent()$/;"	f
GetTempfile	autoload/netrw.vim	/^fun! s:GetTempfile(fname)$/;"	f
GetTildeIndent	indent/tilde.vim	/^function GetTildeIndent(lnum)$/;"	f
GetTitle	plugin/ScreenShot.vim	/^function! s:GetTitle()$/;"	f
GetVHDLindent	indent/vhdl.vim	/^function GetVHDLindent()$/;"	f
GetVerilogIndent	indent/verilog.vim	/^function GetVerilogIndent()$/;"	f
GetVimIndent	indent/vim.vim	/^function GetVimIndent()$/;"	f
GetWidth	indent/objc.vim	/^function s:GetWidth(line, regexp)$/;"	f
GetXF86ConfIndent	indent/xf86conf.vim	/^function GetXF86ConfIndent()$/;"	f
GetXinetdIndent	indent/xinetd.vim	/^function GetXinetdIndent()$/;"	f
GetYaccIndent	indent/yacc.vim	/^function GetYaccIndent()$/;"	f
Get_brace_balance	indent/awk.vim	/^function! s:Get_brace_balance( line, b_open, b_close )$/;"	f
Get_prev_line	indent/awk.vim	/^function! s:Get_prev_line( lineno )$/;"	f
Get_type	ftplugin/ocaml.vim	/^    function! s:Get_type(mode)$/;"	f
Google	plugin/browser.vim	/^com! -nargs=+ Google          call OpenGoogle(<q-args>, 0 , '')$/;"	c
GoogleLucky	plugin/browser.vim	/^com! -nargs=+ GoogleLucky     call OpenGoogle(<q-args>, 1, '')$/;"	c
GooglePythonDoc	plugin/browser.vim	/^com! -nargs=+ GooglePythonDoc call OpenGoogle(<q-args>, 0 , 'docs.python.org')$/;"	c
GroovyHiLink	syntax/groovy.vim	/^  command! -nargs=+ GroovyHiLink hi def link <args>$/;"	c
GroovyHiLink	syntax/groovy.vim	/^  command! -nargs=+ GroovyHiLink hi link <args>$/;"	c
GroupPackageMenuItems	ftplugin/latex-suite/packages.vim	/^function! <SID>GroupPackageMenuItems(menuList, menuName, $/;"	f
H	macros/less.vim	/^map H h$/;"	m
HFileSection	ftplugin/c.vim	/^command! -nargs=1 -complete=customlist,C_HFileSectionList        HFileSection       call C_HFileSectionListInsert   (<f-args>)$/;"	c
HTML.Character\	ftplugin/html/HTML.vim	/^imenu HTML.Character\\ Entities.Arrows.-sep1-                             <nul>$/;"	m
HTMLcmenu	ftplugin/html/HTML.vim	/^command! -nargs=+ HTMLcmenu call s:ColorsMenu(<f-args>)$/;"	c
HTMLemenu	ftplugin/html/HTML.vim	/^command! -nargs=+ HTMLemenu call s:EntityMenu(<f-args>)$/;"	c
HTMLencodeString	ftplugin/html/HTML.vim	/^function! HTMLencodeString(string, ...)$/;"	f
HTMLgenerateTable	ftplugin/html/HTML.vim	/^function! HTMLgenerateTable()$/;"	f
HTMLmap	ftplugin/html/HTML.vim	/^function! HTMLmap(cmd, map, arg, ...)$/;"	f
HTMLmapo	ftplugin/html/HTML.vim	/^function! HTMLmapo(map, insert)$/;"	f
HTMLmappings	ftplugin/html/HTML.vim	/^command! -nargs=1 HTMLmappings call <SID>MappingsControl(<f-args>)$/;"	c
HTMLmenu	ftplugin/html/HTML.vim	/^augroup HTMLmenu$/;"	a
HTMLmenu	ftplugin/html/HTML.vim	/^command! -nargs=+ HTMLmenu call s:LeadMenu(<f-args>)$/;"	c
HTMLnextInsertPoint	ftplugin/html/HTML.vim	/^function! HTMLnextInsertPoint(...)$/;"	f
HTMLplugin	ftplugin/html/HTML.vim	/^  augroup HTMLplugin$/;"	a
HTMLtemplate	ftplugin/html/HTML.vim	/^function! HTMLtemplate()$/;"	f
HTMLtemplate2	ftplugin/html/HTML.vim	/^function! s:HTMLtemplate2()$/;"	f
HamGetFreeIndent	indent/hamster.vim	/^function HamGetFreeIndent()$/;"	f
HamGetIndent	indent/hamster.vim	/^function HamGetIndent(lnum)$/;"	f
HasCStyleComments	plugin/NERD_commenter.vim	/^function s:HasCStyleComments()$/;"	f
HasLeadingTabs	plugin/NERD_commenter.vim	/^function s:HasLeadingTabs(...)$/;"	f
HasMultipartDelims	plugin/NERD_commenter.vim	/^function s:HasMultipartDelims()$/;"	f
Hash	plugin/imaps.vim	/^fun! s:Hash(text)$/;"	f
Header	optwin.vim	/^fun! <SID>Header(text)$/;"	f
Help	macros/less.vim	/^fun! s:Help()$/;"	f
Helpfind	menu.vim	/^fun! s:Helpfind()$/;"	f
Hexplore	plugin/netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Hexplore	call netrw#Explore(<count>,1,2+<bang>0,<q-args>)$/;"	c
Hi	syntax/sdl.vim	/^	command -nargs=+ Hi     hi <args>$/;"	c
Hi	syntax/sdl.vim	/^	command -nargs=+ Hi     hi def <args>$/;"	c
Hi	syntax/xpm2.vim	/^  command -nargs=+ Hi hi <args>$/;"	c
Hi	syntax/xpm2.vim	/^  command -nargs=+ Hi hi def <args>$/;"	c
HiLink	syntax/a65.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/a65.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/abap.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/abap.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/abaqus.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/abaqus.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/abc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/abc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/abel.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/abel.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/acedb.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/acedb.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/aflex.vim	/^      command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/aflex.vim	/^      command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/ahdl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/ahdl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/amiga.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/amiga.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/aml.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/aml.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/ampl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/ampl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/antlr.vim	/^      command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/antlr.vim	/^      command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/apache.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/apache.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/apachestyle.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/apachestyle.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/asm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/asm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/asm68k.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/asm68k.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/asmh8300.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/asmh8300.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/asn.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/asn.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/aspvbs.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/aspvbs.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/asterisk.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/asterisk.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/asteriskvm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/asteriskvm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/atlas.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/atlas.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/automake.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/automake.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/ave.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/ave.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/awk.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/awk.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/ayacc.vim	/^      command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/ayacc.vim	/^      command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/b.vim	/^      command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/b.vim	/^      command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/baan.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/baan.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/basic.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/basic.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/bc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/bc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/bib.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/bib.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/bindzone.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/bindzone.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/blank.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/blank.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/bst.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/bst.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/btm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/btm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/bzr.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/bzr.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/cdl.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/cdl.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/cf.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/cf.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/cfg.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/cfg.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/ch.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/ch.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/change.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/change.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/changelog.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/changelog.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/cheetah.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/cheetah.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/chill.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/chill.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/cl.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/cl.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/clean.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/clean.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/clipper.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/clipper.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/cmake.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/cmake.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/cobol.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/cobol.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/config.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/config.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/cpp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/cpp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/crontab.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/crontab.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/csc.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/csc.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/csh.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/csh.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/csp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/csp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/css.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/css.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/cterm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/cterm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/cupl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/cupl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/cuplsim.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/cuplsim.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/cvs.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/cvs.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/cweb.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/cweb.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/cynlib.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/cynlib.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/cynpp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/cynpp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/dcd.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/dcd.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/dcl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/dcl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/debchangelog.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/debchangelog.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/debcontrol.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/debcontrol.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/def.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/def.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/desc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/desc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/desktop.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/desktop.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/diva.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/diva.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/django.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/django.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/docbk.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/docbk.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/dosbatch.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/dosbatch.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/dosini.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/dosini.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/dot.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/dot.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/dracula.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/dracula.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/dtd.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/dtd.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/dtml.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/dtml.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/dylan.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/dylan.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/dylanintr.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/dylanintr.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/dylanlid.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/dylanlid.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/ecd.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/ecd.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/edif.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/edif.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/eiffel.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/eiffel.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/elf.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/elf.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/elmfilt.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/elmfilt.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/erlang.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/erlang.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/esqlc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/esqlc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/esterel.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/esterel.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/eviews.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/eviews.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/exim.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/exim.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/expect.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/expect.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/exports.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/exports.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/fdcc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/fdcc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/fgl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/fgl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/focexec.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/focexec.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/form.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/form.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/forth.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/forth.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/fortran.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/fortran.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/foxpro.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/foxpro.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/fstab.vim	/^		command! -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/fstab.vim	/^		command! -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/gdb.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/gdb.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/gdmo.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/gdmo.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/gedcom.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/gedcom.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/gkrellmrc.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/gkrellmrc.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/gnuplot.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/gnuplot.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/gp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/gp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/grads.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/grads.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/gretl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/gretl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/gtkrc.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/gtkrc.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/hamster.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/hamster.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/haskell.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/haskell.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/hb.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/hb.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/hercules.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/hercules.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/hex.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/hex.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/hog.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/hog.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/htmlos.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/htmlos.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/ia64.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/ia64.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/icon.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/icon.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/idl.vim	/^  command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/idlang.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/idlang.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/inform.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/inform.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/inittab.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/inittab.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/ishd.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/ishd.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/iss.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/iss.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/ist.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/ist.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/jal.vim	/^  command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/jal.vim	/^  command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/jam.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/jam.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/jargon.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/jargon.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/javacc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/javacc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/javascript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/javascript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/jess.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/jess.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/jgraph.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/jgraph.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/jproperties.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/jproperties.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/jsp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/jsp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/kix.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/kix.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/kscript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/kscript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/kwt.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/kwt.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/lace.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/lace.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/latte.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/latte.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/ldif.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/ldif.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/lhaskell.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/lhaskell.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/lifelines.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/lifelines.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/lilo.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/lilo.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/lisp.vim	/^  command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/lite.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/lite.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/logtalk.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/logtalk.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/lotos.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/lotos.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/lout.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/lout.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/lpc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/lpc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/lprolog.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/lprolog.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/lscript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/lscript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/lua.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/lua.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/m4.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/m4.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/mailcap.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/mailcap.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/make.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/make.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/man.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/man.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/maple.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/maple.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/masm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/masm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/mason.vim	/^		com -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/mason.vim	/^		com -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/master.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/master.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/matlab.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/matlab.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/maxima.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/maxima.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/mel.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/mel.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/mf.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/mf.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/mgl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/mgl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/mgp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/mgp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/mib.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/mib.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/mma.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/mma.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/mmix.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/mmix.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/modsim3.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/modsim3.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/modula2.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/modula2.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/modula3.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/modula3.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/monk.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/monk.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/mp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/mp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/msidl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/msidl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/msql.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/msql.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/mupad.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/mupad.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/mush.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/mush.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/muttrc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/muttrc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/mysql.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/mysql.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/named.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/named.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/nasm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/nasm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/nastran.vim	/^     command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/natural.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/natural.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/ncf.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/ncf.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/nqc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/nqc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/nroff.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/nroff.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/nsis.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/nsis.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/objc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/objc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/ocaml.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/ocaml.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/occam.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/occam.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/omnimark.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/omnimark.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/openroad.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/openroad.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/opl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/opl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/ora.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/ora.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/pascal.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/pascal.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/pcap.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/pcap.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/pccts.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/pccts.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/perl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/perl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/pf.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/pf.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/pfmain.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/pfmain.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/php.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/php.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/pic.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/pic.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/pike.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/pike.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/pilrc.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/pilrc.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/pine.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/pine.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/plm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/plm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/plsql.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/plsql.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/po.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/po.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/pod.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/pod.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/postscr.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/postscr.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/ppd.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/ppd.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/ppwiz.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/ppwiz.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/prescribe.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/prescribe.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/procmail.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/procmail.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/progress.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/progress.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/prolog.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/prolog.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/psf.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/psf.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/ptcap.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/ptcap.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/purifylog.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/purifylog.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/pyrex.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/pyrex.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/python.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/python.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/r.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/r.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/radiance.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/radiance.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/ratpoison.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/ratpoison.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/rc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/rc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/rcs.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/rcs.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/rcslog.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/rcslog.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/rebol.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/rebol.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/registry.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/registry.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/remind.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/remind.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/resolv.vim	/^		command! -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/resolv.vim	/^		command! -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/rexx.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/rexx.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/rhelp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/rhelp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/rib.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/rib.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/robots.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/robots.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/rpcgen.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/rpcgen.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/rpl.vim	/^    command -nargs=+ HiLink highlight default link <args>$/;"	c
HiLink	syntax/rpl.vim	/^    command -nargs=+ HiLink highlight link <args>$/;"	c
HiLink	syntax/rtf.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/rtf.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/samba.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/samba.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sas.vim	/^      command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sas.vim	/^      command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sather.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sather.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/scheme.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/scheme.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/scilab.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/scilab.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sd.vim	/^                command! -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sd.vim	/^                command! -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sdl.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sdl.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sed.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sed.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sgmldecl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sgmldecl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sgmllnx.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sgmllnx.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sicad.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sicad.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/simula.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/simula.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sinda.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sinda.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sindacmp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sindacmp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sindaout.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sindaout.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/skill.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/skill.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/slang.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/slang.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/slice.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/slice.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/slrnrc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/slrnrc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/slrnsc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/slrnsc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/smarty.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/smarty.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/smil.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/smil.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/smith.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/smith.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sml.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sml.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/snnsnet.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/snnsnet.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/snnspat.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/snnspat.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/snnsres.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/snnsres.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/snobol4.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/snobol4.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/spec.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/spec.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/specman.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/specman.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/spice.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/spice.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/splint.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/splint.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/spup.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/spup.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sqlanywhere.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sqlforms.vim	/^	command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sqlforms.vim	/^	command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sqlinformix.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sqlinformix.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sqlj.vim	/^    command! -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sqlj.vim	/^    command! -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sqloracle.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sqloracle.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sqr.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sqr.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/squid.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/squid.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sshconfig.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sshconfig.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/sshdconfig.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/sshdconfig.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/st.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/st.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/stp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/stp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/strace.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/strace.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/svn.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/svn.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/tads.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/tads.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/tags.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/tags.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/tak.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/tak.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/takcmp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/takcmp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/takout.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/takout.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/tasm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/tasm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/tcl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/tcl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/tex.vim	/^  command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/tex.vim	/^  command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/texinfo.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/texinfo.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/texmf.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/texmf.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/tf.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/tf.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/tidy.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/tidy.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/tli.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/tli.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/tpp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/tpp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/trasys.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/trasys.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/tsalt.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/tsalt.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/tsscl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/tsscl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/tssgm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/tssgm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/tssop.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/tssop.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/uc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/uc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/uil.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/uil.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/vb.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/vb.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/vera.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/vera.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/verilog.vim	/^      command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/verilog.vim	/^      command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/verilogams.vim	/^      command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/verilogams.vim	/^      command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/vhdl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/vhdl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/virata.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/virata.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/vmasm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/vmasm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/vrml.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/vrml.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/vsejcl.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/vsejcl.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/wdiff.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/wdiff.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/webmacro.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/webmacro.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/wget.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/wget.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/winbatch.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/winbatch.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/wml.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/wml.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/wsml.vim	/^       command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/wsml.vim	/^       command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/xdefaults.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/xdefaults.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/xkb.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/xkb.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/xmath.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/xmath.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/xpm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/xpm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/xpm2.vim	/^  command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/xpm2.vim	/^  command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/xs.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/xs.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/xxd.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/xxd.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/yacc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/yacc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/z8a.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/z8a.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
Highlight_Matching_Pair	plugin/matchparen.vim	/^function! s:Highlight_Matching_Pair()$/;"	f
HtmlClosing	syntax/2html.vim	/^  function s:HtmlClosing(id)$/;"	f
HtmlColor	syntax/2html.vim	/^  function! s:HtmlColor(color)$/;"	f
HtmlDecode	plugin/ScreenShot.vim	/^function! s:HtmlDecode(text)$/;"	f
HtmlEscape	plugin/ScreenShot.vim	/^function! s:HtmlEscape(text)$/;"	f
HtmlFormat	syntax/2html.vim	/^function! s:HtmlFormat(text, style_name)$/;"	f
HtmlHiLink	syntax/html.vim	/^  command! -nargs=+ HtmlHiLink hi def link <args>$/;"	c
HtmlHiLink	syntax/html.vim	/^  command! -nargs=+ HtmlHiLink hi link <args>$/;"	c
HtmlIndentClose	indent/html.vim	/^fun! <SID>HtmlIndentClose(lnum, pattern)$/;"	f
HtmlIndentCloseAlt	indent/html.vim	/^fun! <SID>HtmlIndentCloseAlt(lnum)$/;"	f
HtmlIndentGet	indent/html.vim	/^fun! HtmlIndentGet(lnum)$/;"	f
HtmlIndentOpen	indent/html.vim	/^fun! <SID>HtmlIndentOpen(lnum, pattern)$/;"	f
HtmlIndentOpenAlt	indent/html.vim	/^fun! <SID>HtmlIndentOpenAlt(lnum)$/;"	f
HtmlIndentPush	indent/html.vim	/^fun! <SID>HtmlIndentPush(tag)$/;"	f
HtmlIndentSum	indent/html.vim	/^fun! <SID>HtmlIndentSum(lnum, style)$/;"	f
HtmlOpening	syntax/2html.vim	/^  function! s:HtmlOpening(id)$/;"	f
I	macros/hanoi/hanoi.vim	/^map I KMYNOQNOSkRTV$/;"	m
I	macros/life/life.vim	/^map I G)0)0)0)0)1)0)0)2)0)0)0)0,ok,-11k,-,R,IIN$/;"	m
IMAP	plugin/imaps.vim	/^function! IMAP(lhs, rhs, ft, ...)$/;"	f
IMAP_Debug	plugin/imaps.vim	/^function! IMAP_Debug(string, pattern)$/;"	f
IMAP_DebugClear	plugin/imaps.vim	/^function! IMAP_DebugClear(pattern)$/;"	f
IMAP_GetPlaceHolderEnd	plugin/imaps.vim	/^function! IMAP_GetPlaceHolderEnd()$/;"	f
IMAP_GetPlaceHolderStart	plugin/imaps.vim	/^function! IMAP_GetPlaceHolderStart()$/;"	f
IMAP_GetVal	plugin/imaps.vim	/^function! IMAP_GetVal(name, ...)$/;"	f
IMAP_Jumpfunc	plugin/imaps.vim	/^function! IMAP_Jumpfunc(direction, inclusive)$/;"	f
IMAP_Mark	plugin/imaps.vim	/^function! IMAP_Mark(action)$/;"	f
IMAP_PrintDebug	plugin/imaps.vim	/^function! IMAP_PrintDebug(pattern)$/;"	f
IMAP_PutTextWithMovement	plugin/imaps.vim	/^function! IMAP_PutTextWithMovement(str, ...)$/;"	f
IMAP_list	plugin/imaps.vim	/^function! IMAP_list(lhs)$/;"	f
ISBN	tutor/tutor.pl	/^	ISBN: 83-7197-472-8$/;"	l
ISBN	tutor/tutor.pl	/^	ISBN: 83-7197-539-2$/;"	l
Iconv	plugin/imaps.vim	/^function! s:Iconv(text, mode)$/;"	f
IgnoreWarnings	compiler/tex.vim	/^function! <SID>IgnoreWarnings()$/;"	f
ImageSize	MangleImageTag.vim	/^function! s:ImageSize(image) "{{{1$/;"	f
InComment	autoload/xmlcomplete.vim	/^function! s:InComment()$/;"	f
InCommentAt	autoload/xmlcomplete.vim	/^function! s:InCommentAt(line, col)$/;"	f
IncludeC99Library	ftplugin/c.vim	/^command! -nargs=1 -complete=customlist,C_C99LibraryIncludesList  IncludeC99Library  call C_C99LibraryIncludesInsert (<f-args>)$/;"	c
IncludeCppCLibrary	ftplugin/c.vim	/^command! -nargs=1 -complete=customlist,C_CppCLibraryIncludesList IncludeCppCLibrary call C_CppCLibraryIncludesInsert(<f-args>)$/;"	c
IncludeCppLibrary	ftplugin/c.vim	/^command! -nargs=1 -complete=customlist,C_CppLibraryIncludesList  IncludeCppLibrary  call C_CppLibraryIncludesInsert (<f-args>)$/;"	c
IncludeStdLibrary	ftplugin/c.vim	/^command! -nargs=1 -complete=customlist,C_StdLibraryIncludesList  IncludeStdLibrary  call C_StdLibraryIncludesInsert (<f-args>)$/;"	c
IncreaseFunc	ftplugin/cobol.vim	/^function! s:IncreaseFunc(type)$/;"	f
IncreaseIndent	ftplugin/cobol.vim	/^function! s:IncreaseIndent()$/;"	f
InitStack	plugin/SyntaxFolds.vim	/^function! InitStack(name)$/;"	f
InitVariable	plugin/NERD_commenter.vim	/^function s:InitVariable(var, value)$/;"	f
Input	ftplugin/latex-suite/bibtex.vim	/^function! s:Input(prompt, ask) " {{{$/;"	f
InsFold	vimrc.vim	/^function! InsFold(i,str)$/;"	f
InsertRefs	macros/matchit.vim	/^fun! s:InsertRefs(groupBR, prefix, group, suffix, matchline)$/;"	f
InsertRefs	plugin/matchit.vim	/^fun! s:InsertRefs(groupBR, prefix, group, suffix, matchline)$/;"	f
InsertRefs	plugin/plugin/matchit.vim	/^fun! s:InsertRefs(groupBR, prefix, group, suffix, matchline)$/;"	f
Instack	autoload/xmlcomplete.vim	/^function! s:Instack(el, sname)$/;"	f
InstallDocumentation	plugin/errormarker.vim	/^function! s:InstallDocumentation(full_name, revision)$/;"	f
InstallDocumentation	plugin/vimExplorer.vim	/^function! s:InstallDocumentation(full_name, revision)$/;"	f
InternalToHtml	plugin/ScreenShot.vim	/^function! s:InternalToHtml(self,lines,last)$/;"	f
InvertComment	plugin/NERD_commenter.vim	/^function s:InvertComment(firstLine, lastLine)$/;"	f
IsColComment	indent/sqlanywhere.vim	/^function s:IsColComment(lnum, cnum)$/;"	f
IsCommented	plugin/NERD_commenter.vim	/^function s:IsCommented(left, right, line)$/;"	f
IsCommentedFromStartOfLine	plugin/NERD_commenter.vim	/^function s:IsCommentedFromStartOfLine(left, line)$/;"	f
IsCommentedNormOrSexy	plugin/NERD_commenter.vim	/^function s:IsCommentedNormOrSexy(lineNum)$/;"	f
IsCommentedOuttermost	plugin/NERD_commenter.vim	/^function s:IsCommentedOuttermost(left, right, leftAlt, rightAlt, line)$/;"	f
IsDelimValid	plugin/NERD_commenter.vim	/^function s:IsDelimValid(delimiter, delIndx, line)$/;"	f
IsEscaped	plugin/NERD_commenter.vim	/^function s:IsEscaped(str, indx, escChar)$/;"	f
IsInClassDef	autoload/rubycomplete.vim	/^function! s:IsInClassDef()$/;"	f
IsInSexyComment	plugin/NERD_commenter.vim	/^function s:IsInSexyComment(line)$/;"	f
IsInSkippedRegion	plugin/SyntaxFolds.vim	/^function! IsInSkippedRegion(lnum, regions)$/;"	f
IsInString	indent/ruby.vim	/^function s:IsInString(lnum, col)$/;"	f
IsInStringOrComment	indent/ruby.vim	/^function s:IsInStringOrComment(lnum, col)$/;"	f
IsInStringOrDocumentation	indent/ruby.vim	/^function s:IsInStringOrDocumentation(lnum, col)$/;"	f
IsLineComment	indent/sqlanywhere.vim	/^function s:IsLineComment(lnum)$/;"	f
IsNumEven	plugin/NERD_commenter.vim	/^function s:IsNumEven(num)$/;"	f
IsPosInClassDef	autoload/rubycomplete.vim	/^function! s:IsPosInClassDef(pos)$/;"	f
IsSet	ftplugin/html/HTML.vim	/^function! s:IsSet(str)$/;"	f
IsSexyComment	plugin/NERD_commenter.vim	/^function s:IsSexyComment(topline, bottomline)$/;"	f
IslinePHP	indent/php.vim	/^function! IslinePHP (lnum, tofind) " {{{$/;"	f
J	macros/hanoi/hanoi.vim	/^map J \/^0[^t]*\$$/;"	m
JavaHiLink	syntax/java.vim	/^  command! -nargs=+ JavaHiLink hi def link <args>$/;"	c
JavaHiLink	syntax/java.vim	/^  command! -nargs=+ JavaHiLink hi link <args>$/;"	c
JumpByIndex	plugin/ScrollColor.vim	/^function! s:JumpByIndex(list,total)$/;"	f
JumpByIndex2	plugin/ScrollColor.vim	/^function! s:JumpByIndex2(list,total, index)$/;"	f
Justify	macros/justify.vim	/^com! -range -nargs=* Justify <line1>,<line2>call Justify(<f-args>)$/;"	c
Justify	macros/justify.vim	/^function! Justify(...) range$/;"	f
Justify_error	macros/justify.vim	/^function! Justify_error(message)$/;"	f
K	ftplugin/gitrebase.vim	/^nnoremap <buffer> <expr> K col('.') < 7 && expand('<Lt>cword>') =~ '\\X' && getline('.') =~ '^\\w\\+\\s\\+\\x\\+\\>' ? 'wK' : 'K'$/;"	m
K	macros/hanoi/hanoi.vim	/^map K 1Go$/;"	m
KeyMap.All	plugin/NERD_tree.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap.BindAll	plugin/NERD_tree.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap.Create	plugin/NERD_tree.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap.bind	plugin/NERD_tree.vim	/^function! s:KeyMap.bind()$/;"	f
KeywordComment	ftplugin/c.vim	/^command! -nargs=1 -complete=customlist,C_KeywordCommentList      KeywordComment     call C_KeywordCommentListInsert (<f-args>)$/;"	c
L	macros/hanoi/hanoi.vim	/^map L 1G\/t$/;"	m
L	macros/life/life.vim	/^map L makf-h,1`ak,2`af-h,1`a,2`ajf-h,1`aj,2($/;"	m
LDFLAGS	c-support/codesnippets/Makefile	/^  LDFLAGS      := ${DEBUG_LDFLAGS}$/;"	m
LDFLAGS	c-support/codesnippets/Makefile	/^  LDFLAGS      := ${LDFLAGS}  -pg$/;"	m
LDFLAGS	c-support/codesnippets/Makefile	/^  LDFLAGS      := ${RELEASE_LDFLAGS}$/;"	m
LOCAL_INC_DIR	c-support/codesnippets/Makefile	/^LOCAL_INC_DIR   = $(HOME)\/include$/;"	m
LOCAL_LIBS	c-support/codesnippets/Makefile	/^LOCAL_LIBS      =$/;"	m
LOCAL_LIBSS	c-support/codesnippets/Makefile	/^LOCAL_LIBSS     = $(addprefix $(LOCAL_LIB_DIR)\/, $(LOCAL_LIBS))$/;"	m
LOCAL_LIB_DIR	c-support/codesnippets/Makefile	/^LOCAL_LIB_DIR   = $(HOME)\/lib$/;"	m
LOOP	doc/vim2html.pl	/^		LOOP:$/;"	l
LUB	tutor/tutor.pl	/^	     LUB:	    <ESC> :wq<ENTER>  by zmiany zachowaæ.$/;"	l
LastIndexOfDelim	plugin/NERD_commenter.vim	/^function s:LastIndexOfDelim(delim, str)$/;"	f
LatexSuite	ftplugin/latex-suite/brackets.vim	/^augroup LatexSuite$/;"	a
LatexSuite	ftplugin/latex-suite/compiler.vim	/^augroup LatexSuite$/;"	a
LatexSuite	ftplugin/latex-suite/envmacros.vim	/^augroup LatexSuite$/;"	a
LatexSuite	ftplugin/latex-suite/folding.vim	/^augroup LatexSuite$/;"	a
LatexSuite	ftplugin/latex-suite/main.vim	/^augroup LatexSuite$/;"	a
LatexSuite	ftplugin/latex-suite/packages.vim	/^augroup LatexSuite$/;"	a
LatexSuite	ftplugin/latex-suite/texproject.vim	/^augroup LatexSuite$/;"	a
LatexSuite	ftplugin/latex-suite/texviewer.vim	/^augroup LatexSuite$/;"	a
LaunchBrowser	browser_launcher.vim	/^function! LaunchBrowser(...)$/;"	f
LeadMenu	ftplugin/html/HTML.vim	/^function! s:LeadMenu(type, level, name, item, ...)$/;"	f
LeadingWhiteSpace	indent/objc.vim	/^function s:LeadingWhiteSpace(line)$/;"	f
LeftMostIndx	plugin/NERD_commenter.vim	/^function s:LeftMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
LineHasOpeningBrackets	indent/ruby.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
ListColors	plugin/ScrollColor.vim	/^function! s:ListColors()$/;"	f
LoadBufferMenu	menu.vim	/^  augroup LoadBufferMenu$/;"	a
LoadFTPlugin	ftplugin.vim	/^  func! s:LoadFTPlugin()$/;"	f
LoadIndent	indent.vim	/^  func! s:LoadIndent()$/;"	f
LoadVimSesn	menu.vim	/^fun! s:LoadVimSesn()$/;"	f
Load_annotation	ftplugin/ocaml.vim	/^    function! s:Load_annotation()$/;"	f
LocalBrowse	plugin/netrwPlugin.vim	/^fun! s:LocalBrowse(dirname)$/;"	f
LocalBrowseShellCmdRefresh	autoload/netrw.vim	/^fun! s:LocalBrowseShellCmdRefresh()$/;"	f
LocalFastBrowser	autoload/netrw.vim	/^fun! s:LocalFastBrowser()$/;"	f
LocalListing	autoload/netrw.vim	/^fun! s:LocalListing()$/;"	f
Locate_annotation	ftplugin/ocaml.vim	/^  function! s:Locate_annotation()$/;"	f
LookupCharacter	plugin/imaps.vim	/^function! s:LookupCharacter(char)$/;"	f
M	colors/inkpot.vim	/^fun! <SID>M(a)$/;"	f
M	colors/vividchalk.vim	/^fun! s:M(a)$/;"	f
M	macros/hanoi/hanoi.vim	/^map M dG$/;"	m
MacAppExists	browser_launcher.vim	/^	function! s:MacAppExists(app) " {{{$/;"	f
MainBlockIndent	indent/ada.vim	/^function s:MainBlockIndent (prev_indent, prev_lnum, blockstart, stop_at)$/;"	f
MakeMenu	ftplugin/debchangelog.vim	/^function <SID>MakeMenu()$/;"	f
MakeSshCmd	autoload/netrw.vim	/^fun! s:MakeSshCmd(sshcmd)$/;"	f
MakeSyntaxFolds	plugin/SyntaxFolds.vim	/^function! MakeSyntaxFolds(force, ...)$/;"	f
MakeTag	tools/pltags.pl	/^sub MakeTag($$$$$)$/;"	s
MakeTexFolds	ftplugin/latex-suite/folding.vim	/^function! MakeTexFolds(force)$/;"	f
MakeWellFormedList	plugin/ScrollColor.vim	/^function! s:MakeWellFormedList(list) $/;"	f
Man	ftplugin/man.vim	/^  com -nargs=+ Man call s:GetPage(<f-args>)$/;"	c
MangleImageTag	MangleImageTag.vim	/^function! MangleImageTag() "{{{1$/;"	f
MapCheck	ftplugin/html/HTML.vim	/^function! s:MapCheck(map, mode)$/;"	f
MapDelimiters	plugin/NERD_commenter.vim	/^function s:MapDelimiters(left, right)$/;"	f
MapDelimitersWithAlternative	plugin/NERD_commenter.vim	/^function s:MapDelimitersWithAlternative(left, right, leftAlt, rightAlt)$/;"	f
MarkOrigBufferForSetup	plugin/vcscommand.vim	/^function! s:MarkOrigBufferForSetup(buffer)$/;"	f
Marklar	colors/marklar.vim	/^        command! -nargs=*  Marklar  :call s:Marklar(<f-args>)$/;"	c
Marklar	colors/marklar.vim	/^        function! s:Marklar(...)$/;"	f
Match	indent/ruby.vim	/^function s:Match(lnum, regex)$/;"	f
MatchCount	indent/pov.vim	/^function! s:MatchCount(line, rexp)$/;"	f
MatchDebug	macros/matchit.vim	/^  command! -nargs=0 MatchDebug call s:Match_debug()$/;"	c
MatchDebug	plugin/matchit.vim	/^  command! -nargs=0 MatchDebug call s:Match_debug()$/;"	c
MatchDebug	plugin/plugin/matchit.vim	/^  command! -nargs=0 MatchDebug call s:Match_debug()$/;"	c
MatchLast	indent/ruby.vim	/^function s:MatchLast(lnum, regex)$/;"	f
Match_borders	ftplugin/ocaml.vim	/^    function! s:Match_borders(mode)$/;"	f
Match_data	ftplugin/ocaml.vim	/^    function! s:Match_data()$/;"	f
Match_debug	macros/matchit.vim	/^fun! s:Match_debug()$/;"	f
Match_debug	plugin/matchit.vim	/^fun! s:Match_debug()$/;"	f
Match_debug	plugin/plugin/matchit.vim	/^fun! s:Match_debug()$/;"	f
Match_wrapper	macros/matchit.vim	/^function! s:Match_wrapper(word, forward, mode) range$/;"	f
Match_wrapper	plugin/matchit.vim	/^function! s:Match_wrapper(word, forward, mode) range$/;"	f
Match_wrapper	plugin/plugin/matchit.vim	/^function! s:Match_wrapper(word, forward, mode) range$/;"	f
McSetf	filetype.vim	/^func! s:McSetf()$/;"	f
MenuControl	ftplugin/html/HTML.vim	/^function! s:MenuControl(...)$/;"	f
MenuController.New	plugin/NERD_tree.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController._allIndexesFor	plugin/NERD_tree.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController._current	plugin/NERD_tree.vim	/^function! s:MenuController._current()$/;"	f
MenuController._cursorDown	plugin/NERD_tree.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController._cursorUp	plugin/NERD_tree.vim	/^function! s:MenuController._cursorUp()$/;"	f
MenuController._echoPrompt	plugin/NERD_tree.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController._handleKeypress	plugin/NERD_tree.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController._nextIndexFor	plugin/NERD_tree.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController._restoreOptions	plugin/NERD_tree.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController._saveOptions	plugin/NERD_tree.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController._setCmdheight	plugin/NERD_tree.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController.showMenu	plugin/NERD_tree.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuExplOpen	menu.vim	/^    fun MenuExplOpen()$/;"	f
MenuItem.All	plugin/NERD_tree.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem.AllEnabled	plugin/NERD_tree.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem.Create	plugin/NERD_tree.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem.CreateSeparator	plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem.CreateSubmenu	plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem.enabled	plugin/NERD_tree.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem.execute	plugin/NERD_tree.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem.isSeparator	plugin/NERD_tree.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem.isSubmenu	plugin/NERD_tree.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
MetaNextNonblankNoncomment	indent/mp.vim	/^function! MetaNextNonblankNoncomment(pos)$/;"	f
MetaPrevNonblankNoncomment	indent/mp.vim	/^function! MetaPrevNonblankNoncomment(pos)$/;"	f
MetaSearchNoncomment	indent/mp.vim	/^function! MetaSearchNoncomment(pattern, ...)$/;"	f
MkVimball	plugin/vimballPlugin.vim	/^com! -ra   -complete=file -na=+ -bang MkVimball call vimball#MkVimball(<line1>,<line2>,<bang>0,<f-args>)$/;"	c
ModuloIndent	indent/sqlanywhere.vim	/^function s:ModuloIndent(ind)$/;"	f
MultiMatch	macros/matchit.vim	/^fun! s:MultiMatch(spflag, mode)$/;"	f
MultiMatch	plugin/matchit.vim	/^fun! s:MultiMatch(spflag, mode)$/;"	f
MultiMatch	plugin/plugin/matchit.vim	/^fun! s:MultiMatch(spflag, mode)$/;"	f
Multipart	plugin/NERD_commenter.vim	/^function s:Multipart()$/;"	f
MySearch	plugin/SyntaxFolds.vim	/^function! <SID>MySearch(pat, opt)$/;"	f
N	macros/hanoi/hanoi.vim	/^map N yy$/;"	m
NERDComment	plugin/NERD_commenter.vim	/^function! NERDComment(isVisual, type) range$/;"	f
NERDTree	plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree	plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTree :call s:initNerdTree('<args>')$/;"	c
NERDTreeAddKeyMap	plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddSubmenu	plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeClose	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeClose :call s:closeTreeIfOpen()$/;"	c
NERDTreeCopyNode	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeDeleteNode	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeFind	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeFind call s:findAndRevealPath()$/;"	c
NERDTreeFromBookmark	plugin/NERD_tree.vim	/^command! -n=1 -complete=customlist,s:completeBookmarks -bar NERDTreeFromBookmark call s:initNerdTree('<args>')$/;"	c
NERDTreeHijackNetrw	plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeMirror	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeMirror call s:initNerdTreeMirror()$/;"	c
NERDTreeMoveNode	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeRender	plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeToggle	plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTreeToggle :call s:toggle('<args>')$/;"	c
NEXTCOLOR	plugin/ScrollColor.vim	/^command! NEXTCOLOR   :call s:NextColorscheme()$/;"	c
NFH_bmp	autoload/netrwFileHandlers.vim	/^fun! s:NFH_bmp(bmpfile)$/;"	f
NFH_doc	autoload/netrwFileHandlers.vim	/^fun! s:NFH_doc(doc)$/;"	f
NFH_eps	autoload/netrwFileHandlers.vim	/^fun! s:NFH_eps(eps)$/;"	f
NFH_fig	autoload/netrwFileHandlers.vim	/^fun! s:NFH_fig(fig)$/;"	f
NFH_gif	autoload/netrwFileHandlers.vim	/^fun! s:NFH_gif(giffile)$/;"	f
NFH_htm	autoload/netrwFileHandlers.vim	/^fun! s:NFH_htm(pagefile)$/;"	f
NFH_html	autoload/netrwFileHandlers.vim	/^fun! s:NFH_html(pagefile)$/;"	f
NFH_jpg	autoload/netrwFileHandlers.vim	/^fun! s:NFH_jpg(jpgfile)$/;"	f
NFH_obj	autoload/netrwFileHandlers.vim	/^fun! s:NFH_obj(obj)$/;"	f
NFH_pdf	autoload/netrwFileHandlers.vim	/^fun! s:NFH_pdf(pdf)$/;"	f
NFH_png	autoload/netrwFileHandlers.vim	/^fun! s:NFH_png(pngfile)$/;"	f
NFH_pnm	autoload/netrwFileHandlers.vim	/^fun! s:NFH_pnm(pnmfile)$/;"	f
NFH_ps	autoload/netrwFileHandlers.vim	/^fun! s:NFH_ps(ps)$/;"	f
NFH_sxw	autoload/netrwFileHandlers.vim	/^fun! s:NFH_sxw(sxw)$/;"	f
NFH_xls	autoload/netrwFileHandlers.vim	/^fun! s:NFH_xls(xls)$/;"	f
NerdEcho	plugin/NERD_commenter.vim	/^function s:NerdEcho(msg, typeOfMsg)$/;"	f
NetReadFixup	autoload/netrw.vim	/^ fun! NetReadFixup(method, line1, line2)$/;"	f
NetReadFixup	plugin/netrwPlugin.vim	/^ fun! NetReadFixup(method, line1, line2)$/;"	f
NetSortSequence	autoload/netrw.vim	/^fun! s:NetSortSequence(islocal)$/;"	f
NetUserPass	autoload/netrw.vim	/^fun! NetUserPass(...)$/;"	f
NetUserPass	plugin/netrwPlugin.vim	/^com! -nargs=*		NetUserPass	call NetUserPass(<f-args>)$/;"	c
NetUserPass	plugin/netrwPlugin.vim	/^fun! NetUserPass(...)$/;"	f
NetrwBMShow	autoload/netrw.vim	/^fun! s:NetrwBMShow()$/;"	f
NetrwBookmarkDir	autoload/netrw.vim	/^fun! s:NetrwBookmarkDir(chg,curdir)$/;"	f
NetrwBookmarkMenu	autoload/netrw.vim	/^fun! s:NetrwBookmarkMenu()$/;"	f
NetrwBrowse	autoload/netrw.vim	/^fun! s:NetrwBrowse(islocal,dirname)$/;"	f
NetrwBrowseChgDir	autoload/netrw.vim	/^fun! s:NetrwBrowseChgDir(islocal,newdir,...)$/;"	f
NetrwClean	plugin/netrwPlugin.vim	/^com! -bang	NetrwClean	call netrw#NetrwClean(<bang>0)$/;"	c
NetrwDelete	autoload/netrw.vim	/^fun! s:NetrwDelete(path)$/;"	f
NetrwEnew	autoload/netrw.vim	/^fun! s:NetrwEnew(curdir)$/;"	f
NetrwFileInfo	autoload/netrw.vim	/^fun! s:NetrwFileInfo(islocal,fname)$/;"	f
NetrwGetBuffer	autoload/netrw.vim	/^fun! s:NetrwGetBuffer(islocal,dirname)$/;"	f
NetrwGetFile	autoload/netrw.vim	/^fun! s:NetrwGetFile(readcmd, tfile, method)$/;"	f
NetrwGetWord	autoload/netrw.vim	/^fun! s:NetrwGetWord()$/;"	f
NetrwGetcwd	autoload/netrw.vim	/^fun! s:NetrwGetcwd(doesc)$/;"	f
NetrwHidden	autoload/netrw.vim	/^fun! s:NetrwHidden(islocal)$/;"	f
NetrwHide	autoload/netrw.vim	/^fun! s:NetrwHide(islocal)$/;"	f
NetrwHideEdit	autoload/netrw.vim	/^fun! s:NetrwHideEdit(islocal)$/;"	f
NetrwLeftmouse	autoload/netrw.vim	/^fun! s:NetrwLeftmouse(islocal)$/;"	f
NetrwListHide	autoload/netrw.vim	/^fun! s:NetrwListHide()$/;"	f
NetrwListSettings	autoload/netrw.vim	/^fun! s:NetrwListSettings(islocal)$/;"	f
NetrwListStyle	autoload/netrw.vim	/^fun! s:NetrwListStyle(islocal)$/;"	f
NetrwLocalRename	autoload/netrw.vim	/^fun! s:NetrwLocalRename(path) range$/;"	f
NetrwLocalRm	autoload/netrw.vim	/^fun! s:NetrwLocalRm(path) range$/;"	f
NetrwLocalRmFile	autoload/netrw.vim	/^fun! s:NetrwLocalRmFile(path,fname,all)$/;"	f
NetrwMakeDir	autoload/netrw.vim	/^fun! s:NetrwMakeDir(usrhost)$/;"	f
NetrwMarkFile	autoload/netrw.vim	/^fun! s:NetrwMarkFile(islocal,fname)$/;"	f
NetrwMarkFileCompress	autoload/netrw.vim	/^fun! s:NetrwMarkFileCompress(islocal)$/;"	f
NetrwMarkFileCopy	autoload/netrw.vim	/^fun! s:NetrwMarkFileCopy(islocal)$/;"	f
NetrwMarkFileDiff	autoload/netrw.vim	/^fun! s:NetrwMarkFileDiff(islocal)$/;"	f
NetrwMarkFileEdit	autoload/netrw.vim	/^fun! s:NetrwMarkFileEdit(islocal)$/;"	f
NetrwMarkFileExe	autoload/netrw.vim	/^fun! s:NetrwMarkFileExe(islocal)$/;"	f
NetrwMarkFileGrep	autoload/netrw.vim	/^fun! s:NetrwMarkFileGrep(islocal)$/;"	f
NetrwMarkFileMove	autoload/netrw.vim	/^fun! s:NetrwMarkFileMove(islocal)$/;"	f
NetrwMarkFilePrint	autoload/netrw.vim	/^fun! s:NetrwMarkFilePrint(islocal)$/;"	f
NetrwMarkFileRegexp	autoload/netrw.vim	/^fun! s:NetrwMarkFileRegexp(islocal)$/;"	f
NetrwMarkFileSource	autoload/netrw.vim	/^fun! s:NetrwMarkFileSource(islocal)$/;"	f
NetrwMarkFileTag	autoload/netrw.vim	/^fun! s:NetrwMarkFileTag(islocal)$/;"	f
NetrwMarkFileTgt	autoload/netrw.vim	/^fun! s:NetrwMarkFileTgt(islocal)$/;"	f
NetrwMarkHideSfx	autoload/netrw.vim	/^fun! s:NetrwMarkHideSfx(islocal)$/;"	f
NetrwMenu	autoload/netrw.vim	/^fun! s:NetrwMenu(domenu)$/;"	f
NetrwMethod	autoload/netrw.vim	/^fun! s:NetrwMethod(choice)  " globals: method machine id passwd fname$/;"	f
NetrwObtain	autoload/netrw.vim	/^fun! s:NetrwObtain(islocal)$/;"	f
NetrwOpenFile	autoload/netrw.vim	/^fun! s:NetrwOpenFile(islocal)$/;"	f
NetrwOptionRestore	autoload/netrw.vim	/^fun! s:NetrwOptionRestore(vt)$/;"	f
NetrwOptionSave	autoload/netrw.vim	/^fun! s:NetrwOptionSave(vt)$/;"	f
NetrwPrevWinOpen	autoload/netrw.vim	/^fun! s:NetrwPrevWinOpen(islocal)$/;"	f
NetrwPreview	autoload/netrw.vim	/^fun! s:NetrwPreview(path) range$/;"	f
NetrwRefresh	autoload/netrw.vim	/^fun! s:NetrwRefresh(islocal,dirname)$/;"	f
NetrwRefreshDir	autoload/netrw.vim	/^fun! s:NetrwRefreshDir(islocal,dirname)$/;"	f
NetrwRemoteFtpCmd	autoload/netrw.vim	/^fun! s:NetrwRemoteFtpCmd(path,listcmd)$/;"	f
NetrwRemoteListing	autoload/netrw.vim	/^fun! s:NetrwRemoteListing()$/;"	f
NetrwRemoteRename	autoload/netrw.vim	/^fun! s:NetrwRemoteRename(usrhost,path) range$/;"	f
NetrwRemoteRm	autoload/netrw.vim	/^fun! s:NetrwRemoteRm(usrhost,path) range$/;"	f
NetrwRemoteRmFile	autoload/netrw.vim	/^fun! s:NetrwRemoteRmFile(path,rmfile,all)$/;"	f
NetrwRestoreWordPosn	autoload/netrw.vim	/^fun! s:NetrwRestoreWordPosn()$/;"	f
NetrwRexplore	autoload/netrw.vim	/^fun! s:NetrwRexplore(islocal,dirname)$/;"	f
NetrwSafeOptions	autoload/netrw.vim	/^fun! s:NetrwSafeOptions()$/;"	f
NetrwSaveWordPosn	autoload/netrw.vim	/^fun! s:NetrwSaveWordPosn()$/;"	f
NetrwSetSort	autoload/netrw.vim	/^fun! s:NetrwSetSort()$/;"	f
NetrwSettingHelp	autoload/netrwSettings.vim	/^fun! NetrwSettingHelp()$/;"	f
NetrwSettings	plugin/netrwPlugin.vim	/^com! -nargs=0	NetrwSettings	call netrwSettings#NetrwSettings()$/;"	c
NetrwSortStyle	autoload/netrw.vim	/^fun! s:NetrwSortStyle(islocal)$/;"	f
NetrwSplit	autoload/netrw.vim	/^fun! s:NetrwSplit(mode)$/;"	f
NetrwStatusLine	autoload/netrw.vim	/^fun! NetrwStatusLine()$/;"	f
NetrwStatusLine	plugin/netrwPlugin.vim	/^fun! NetrwStatusLine()$/;"	f
NetrwTreeDir	autoload/netrw.vim	/^fun! s:NetrwTreeDir()$/;"	f
NetrwTreeDisplay	autoload/netrw.vim	/^fun! s:NetrwTreeDisplay(dir,depth)$/;"	f
NetrwTreeListing	autoload/netrw.vim	/^fun! s:NetrwTreeListing(dirname)$/;"	f
NetrwUnMarkFile	autoload/netrw.vim	/^fun! s:NetrwUnMarkFile(islocal)$/;"	f
NetrwUnmarkAll	autoload/netrw.vim	/^fun! s:NetrwUnmarkAll()$/;"	f
NetrwUnmarkAll2	autoload/netrw.vim	/^fun! s:NetrwUnmarkAll2()$/;"	f
NetrwUnmarkList	autoload/netrw.vim	/^fun! s:NetrwUnmarkList(curbufnr,curdir)$/;"	f
NetrwUpload	autoload/netrw.vim	/^fun! s:NetrwUpload(fname,tgt,...)$/;"	f
NetrwWideListing	autoload/netrw.vim	/^fun! s:NetrwWideListing()$/;"	f
Network	plugin/netrwPlugin.vim	/^augroup Network$/;"	a
NewChangelogEntry	ftplugin/changelog.vim	/^    command! -nargs=0 NewChangelogEntry call s:new_changelog_entry()$/;"	c
NewMacro	ftplugin/latex-suite/custommacros.vim	/^function! <SID>NewMacro(...)$/;"	f
NewVersion	ftplugin/debchangelog.vim	/^function NewVersion()$/;"	f
Nexplore	plugin/netrwPlugin.vim	/^com! -nargs=* -bar -bang			Nexplore	call netrw#Explore(-1,0,0,<q-args>)$/;"	c
NextColorscheme	plugin/ScrollColor.vim	/^function! s:NextColorscheme()$/;"	f
NextPage	macros/less.vim	/^fun! s:NextPage()$/;"	f
NextSilent	plugin/ScrollColor.vim	/^function! s:NextSilent()$/;"	f
Nextitem	autoload/ccomplete.vim	/^function! s:Nextitem(lead, items, depth, all)$/;"	f
NoMatchParen	plugin/matchparen.vim	/^command! NoMatchParen windo 3match none | unlet! g:loaded_matchparen |$/;"	c
Nodes	plugin/ScreenShot.vim	/^function! s:Nodes['#'].Render(hi,lasttype,fillchar,invischar) "    Set highlight group.  The name must follow and then a # again.	      Thus use %#HLname# for highlight group HLname.  The same	      highlighting is used, also for the statusline of non-current	      windows. $/;"	f
Nodes	plugin/ScreenShot.vim	/^function! s:Nodes['('].Render(hi,lasttype,fillchar,invischar) "    Start of item group.  Can be used for setting the width and	      alignment of a section.  Must be followed by %) somewhere. $/;"	f
Nodes	plugin/ScreenShot.vim	/^function! s:Nodes[')'].Value() "    End of item group.  No width fields allowed. $/;"	f
Nodes	plugin/ScreenShot.vim	/^function! s:Nodes['*'].Render(hi,lasttype,fillchar,invischar) "    Set highlight group to User{N}, where {N} is taken from the minwid field, e.g. %1*.  Restore normal highlight with %* or %0*.	      The difference between User{N} and StatusLine  will be applied	      to StatusLineNC for the statusline of non-current windows.	      The number N must be between 1 and 9.  See |hl-User1..9|$/;"	f
Nodes	plugin/ScreenShot.vim	/^function! s:Nodes['<'].Value() "    Where to truncate line if too long.  Default is at the start.	      No width fields allowed. $/;"	f
Nodes	plugin/ScreenShot.vim	/^function! s:Nodes['='].Value() "    Separation point between left and right aligned items.	      No width fields allowed. $/;"	f
Nodes	plugin/ScreenShot.vim	/^function! s:Nodes['{'].Value() " F  Evaluate expression between '%{' and '}' and substitute result.	      Note that there is no '%' before the closing '}'. $/;"	f
Nodes.B.Value	plugin/ScreenShot.vim	/^function! s:Nodes.B.Value() "    As above, in hexadecimal. $/;"	f
Nodes.F.Value	plugin/ScreenShot.vim	/^function! s:Nodes.F.Value() "    Full path to the file in the buffer. $/;"	f
Nodes.M.Value	plugin/ScreenShot.vim	/^function! s:Nodes.M.Value()$/;"	f
Nodes.N.Value	plugin/ScreenShot.vim	/^function! s:Nodes.N.Value() "    Printer page number.  (Only works in the 'printheader' option.) $/;"	f
Nodes.O.Value	plugin/ScreenShot.vim	/^function! s:Nodes.O.Value() "    As above, in hexadecimal. $/;"	f
Nodes.P.Value	plugin/ScreenShot.vim	/^function! s:Nodes.P.Value() "    Percentage through file of displayed window.  This is like the	      percentage described for 'ruler'.  Always 3 in length. $/;"	f
Nodes.T.Render	plugin/ScreenShot.vim	/^function! s:Nodes.T.Render(hi,lasttype,fillchar,invischar)$/;"	f
Nodes.T.Value	plugin/ScreenShot.vim	/^function! s:Nodes.T.Value() "    For 'tabline': start of tab page N label.  Use %T after the last	      label.  This information is used for mouse clicks. $/;"	f
Nodes.V.Value	plugin/ScreenShot.vim	/^function! s:Nodes.V.Value() "    Virtual column number as -{num}.  Not displayed if equal to 'c'. $/;"	f
Nodes.X.Value	plugin/ScreenShot.vim	/^function! s:Nodes.X.Value() "    For 'tabline': start of close tab N label.  Use %X after the	      label, e.g.: %3Xclose%X.  Use %999X for a \\"close current tab\\"	      mark.  This information is used for mouse clicks. $/;"	f
Nodes.a.Value	plugin/ScreenShot.vim	/^function! s:Nodes.a.Value() "    Argument list status as in default title.  ({current} of {max})	      Empty if the argument file count is zero or one. $/;"	f
Nodes.b.Value	plugin/ScreenShot.vim	/^function! s:Nodes.b.Value() "    Value of byte under cursor. $/;"	f
Nodes.f.Value	plugin/ScreenShot.vim	/^function! s:Nodes.f.Value() "    Path to the file in the buffer, relative to current directory. $/;"	f
Nodes.k.Value	plugin/ScreenShot.vim	/^function! s:Nodes.k.Value() "    Value of \\"b:keymap_name\\" or 'keymap' when |:lmap| mappings are	      being used: \\"<keymap>\\" $/;"	f
Nodes.n.Value	plugin/ScreenShot.vim	/^function! s:Nodes.n.Value() "    Buffer number. $/;"	f
Nodes.o.Value	plugin/ScreenShot.vim	/^function! s:Nodes.o.Value() "    Byte number in file of byte under cursor, first byte is 1.      Mnemonic: Offset from start of file (with one added)	      {not available when compiled without |+byte_offset| feature} $/;"	f
Nodes.p.Value	plugin/ScreenShot.vim	/^function! s:Nodes.p.Value() "    Percentage through file in lines as in |CTRL-G|. $/;"	f
Nodes.t.Value	plugin/ScreenShot.vim	/^function! s:Nodes.t.Value() "    File name (tail) of file in the buffer. $/;"	f
Nosynonly	synmenu.vim	/^fun! s:Nosynonly()$/;"	f
Nread	plugin/netrwPlugin.vim	/^com! -count=1 -nargs=*	Nread		call netrw#NetrwSavePosn()<bar>call netrw#NetRead(<count>,<f-args>)<bar>call netrw#NetrwRestorePosn()$/;"	c
Nsource	plugin/netrwPlugin.vim	/^com! -nargs=*	        Nsource		call netrw#NetrwSavePosn()<bar>call netrw#NetSource(<f-args>)<bar>call netrw#NetrwRestorePosn()$/;"	c
NumLinesInBuf	plugin/NERD_commenter.vim	/^function s:NumLinesInBuf()$/;"	f
NumberOfLeadingTabs	plugin/NERD_commenter.vim	/^function s:NumberOfLeadingTabs(s)$/;"	f
Nwrite	plugin/netrwPlugin.vim	/^com! -range=% -nargs=*	Nwrite		call netrw#NetrwSavePosn()<bar><line1>,<line2>call netrw#NetWrite(<f-args>)<bar>call netrw#NetrwRestorePosn()$/;"	c
O	macros/hanoi/hanoi.vim	/^map O p$/;"	m
OBJECTS	c-support/codesnippets/Makefile	/^OBJECTS         = $(addsuffix .o,$(BASENAMES))$/;"	m
OCaml_switch	ftplugin/ocaml.vim	/^  fun OCaml_switch(newwin)$/;"	f
OMLetFoldLevel	ftplugin/ocaml.vim	/^function OMLetFoldLevel(l)$/;"	f
Ocaml_get_type	ftplugin/ocaml.vim	/^      function Ocaml_get_type(mode)$/;"	f
Ocaml_get_type_or_not	ftplugin/ocaml.vim	/^      function Ocaml_get_type_or_not(mode)$/;"	f
Ocaml_print_type	ftplugin/ocaml.vim	/^      function Ocaml_print_type(mode)$/;"	f
OmniSyntaxList	autoload/syntaxcomplete.vim	/^function! OmniSyntaxList()$/;"	f
OpenDictionary	plugin/browser.vim	/^fun! OpenDictionary (sentence)$/;"	f
OpenGoogle	plugin/browser.vim	/^fun! OpenGoogle (sentence,lucky,site)$/;"	f
OpenInMacApp	browser_launcher.vim	/^	function! OpenInMacApp(app, ...) " {{{$/;"	f
OpenLink	plugin/browser.vim	/^fun! OpenLink (address)$/;"	f
OpenPhpFunction	plugin/browser.vim	/^fun! OpenPhpFunction (keyword)$/;"	f
OpenWebBrowser	plugin/browser.vim	/^fun! OpenWebBrowser (address)$/;"	f
OpenWikipedia	plugin/browser.vim	/^fun! OpenWikipedia (sentence)$/;"	f
Opt2Dict	plugin/ScreenShot.vim	/^function! s:Opt2Dict(opt)$/;"	f
OptionG	optwin.vim	/^fun! <SID>OptionG(name, val)$/;"	f
OptionL	optwin.vim	/^fun! <SID>OptionL(name)$/;"	f
OverrideOption	plugin/vcscommand.vim	/^function! s:OverrideOption(option, ...)$/;"	f
P	macros/hanoi/hanoi.vim	/^map P p$/;"	m
PREREQUISITES	c-support/codesnippets/Makefile	/^PREREQUISITES   = $(addprefix .,$(addsuffix .d,$(BASENAMES)))$/;"	m
PREVCOLOR	plugin/ScrollColor.vim	/^command! PREVCOLOR   :call s:PrevColorscheme()$/;"	c
PROFILE	c-support/codesnippets/Makefile	/^PROFILE        := NO$/;"	m
PTvalue	optwin.vim	/^fun! <SID>PTvalue()$/;"	f
PackageName	tools/pltags.pl	/^sub PackageName($)$/;"	s
ParmSub.If	macros/shellmenu.vim	/^imenu ParmSub.If parm not set print word and exit ${:?}hhi$/;"	m
ParmSub.Set	macros/shellmenu.vim	/^imenu ParmSub.Set parm to word if not set ${:=}hhi$/;"	m
ParmSub.Substitute	macros/shellmenu.vim	/^imenu ParmSub.Substitute word if parm not set ${:-}hhi$/;"	m
ParmSub.Substitute	macros/shellmenu.vim	/^imenu ParmSub.Substitute word if parm set else nothing ${:+}hhi$/;"	m
ParseRpmVars	ftplugin/spec.vim	/^    function s:ParseRpmVars(str, strline)$/;"	f
ParseSkip	macros/matchit.vim	/^fun! s:ParseSkip(str)$/;"	f
ParseSkip	plugin/matchit.vim	/^fun! s:ParseSkip(str)$/;"	f
ParseSkip	plugin/plugin/matchit.vim	/^fun! s:ParseSkip(str)$/;"	f
ParseTagline	autoload/ccomplete.vim	/^function! s:ParseTagline(line)$/;"	f
ParseWords	macros/matchit.vim	/^fun! s:ParseWords(groups)$/;"	f
ParseWords	plugin/matchit.vim	/^fun! s:ParseWords(groups)$/;"	f
ParseWords	plugin/plugin/matchit.vim	/^fun! s:ParseWords(groups)$/;"	f
ParseXpm	plugin/ScreenShot.vim	/^function! s:ParseXpm(src)$/;"	f
Path.AbsolutePathFor	plugin/NERD_tree.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
Path.CopyingSupported	plugin/NERD_tree.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	plugin/NERD_tree.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	plugin/NERD_tree.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	plugin/NERD_tree.vim	/^function! s:Path.New(path)$/;"	f
Path.Slash	plugin/NERD_tree.vim	/^function! s:Path.Slash()$/;"	f
Path.WinToUnixPath	plugin/NERD_tree.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path._str	plugin/NERD_tree.vim	/^function! s:Path._str()$/;"	f
Path._strForCd	plugin/NERD_tree.vim	/^function! s:Path._strForCd()$/;"	f
Path._strForEdit	plugin/NERD_tree.vim	/^function! s:Path._strForEdit()$/;"	f
Path._strForGlob	plugin/NERD_tree.vim	/^function! s:Path._strForGlob()$/;"	f
Path._strForUI	plugin/NERD_tree.vim	/^function! s:Path._strForUI()$/;"	f
Path.bookmarkNames	plugin/NERD_tree.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	plugin/NERD_tree.vim	/^function! s:Path.cacheDisplayString()$/;"	f
Path.changeToDir	plugin/NERD_tree.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	plugin/NERD_tree.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.copy	plugin/NERD_tree.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	plugin/NERD_tree.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.delete	plugin/NERD_tree.vim	/^function! s:Path.delete()$/;"	f
Path.displayString	plugin/NERD_tree.vim	/^function! s:Path.displayString()$/;"	f
Path.equals	plugin/NERD_tree.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	plugin/NERD_tree.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	plugin/NERD_tree.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	plugin/NERD_tree.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	plugin/NERD_tree.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	plugin/NERD_tree.vim	/^function! s:Path.getParent()$/;"	f
Path.getSortOrderIndex	plugin/NERD_tree.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	plugin/NERD_tree.vim	/^function! s:Path.ignore()$/;"	f
Path.isUnder	plugin/NERD_tree.vim	/^function! s:Path.isUnder(path)$/;"	f
Path.readInfoFromDisk	plugin/NERD_tree.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	plugin/NERD_tree.vim	/^function! s:Path.refresh()$/;"	f
Path.rename	plugin/NERD_tree.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	plugin/NERD_tree.vim	/^function! s:Path.str(...)$/;"	f
Path.strTrunk	plugin/NERD_tree.vim	/^function! s:Path.strTrunk()$/;"	f
Peekstack	autoload/xmlcomplete.vim	/^function! s:Peekstack(sname)$/;"	f
PerformListing	autoload/netrw.vim	/^fun! s:PerformListing(islocal)$/;"	f
Pexplore	plugin/netrwPlugin.vim	/^com! -nargs=* -bar -bang			Pexplore	call netrw#Explore(-2,0,0,<q-args>)$/;"	c
Pick	ftplugin/gitrebase.vim	/^command! -buffer -bar Pick   :call s:choose('pick')$/;"	c
PlaceDelimitersAndInsBetween	plugin/NERD_commenter.vim	/^function s:PlaceDelimitersAndInsBetween()$/;"	f
Pop	autoload/xmlcomplete.vim	/^function! s:Pop(sname)$/;"	f
Pop	plugin/SyntaxFolds.vim	/^function! Pop(name)$/;"	f
PopPage	ftplugin/man.vim	/^func <SID>PopPage()$/;"	f
PostscrIndentGet	indent/postscr.vim	/^function! PostscrIndentGet(lnum)$/;"	f
PreGetPage	ftplugin/man.vim	/^func <SID>PreGetPage(cnt)$/;"	f
PrevColorscheme	plugin/ScrollColor.vim	/^function! s:PrevColorscheme()$/;"	f
PrevNonBlankNonString	indent/ruby.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
PrevSilent	plugin/ScrollColor.vim	/^function! s:PrevSilent()$/;"	f
PrintfNode.New	plugin/ScreenShot.vim	/^function! s:PrintfNode.New(name,left,zeropad,minwid,maxwid,...)$/;"	f
PrintfNode.Render	plugin/ScreenShot.vim	/^function! s:PrintfNode.Render(hi,lasttype,fillchar,invischar)$/;"	f
PrintfNode.Value	plugin/ScreenShot.vim	/^function! s:PrintfNode.Value()$/;"	f
ProcessTemplate	ftplugin/latex-suite/templates.vim	/^function! <SID>ProcessTemplate()$/;"	f
PromptForCommand	ftplugin/latex-suite/envmacros.vim	/^function! PromptForCommand(ask)$/;"	f
PromptForEnvironment	ftplugin/latex-suite/envmacros.vim	/^function! PromptForEnvironment(ask)$/;"	f
ProtectLetters	ftplugin/latex-suite/main.vim	/^	function! s:ProtectLetters(first, last)$/;"	f
ProtoCheck	filetype.vim	/^func! s:ProtoCheck(default)$/;"	f
Push	autoload/xmlcomplete.vim	/^function! s:Push(el, sname)$/;"	f
Push	plugin/SyntaxFolds.vim	/^function! Push(name, elem)$/;"	f
Python_jump	ftplugin/python.vim	/^fun! <SID>Python_jump(motion) range$/;"	f
Q	evim.vim	/^map Q gq$/;"	m
Q	macros/hanoi/hanoi.vim	/^map Q 0iT$/;"	m
Q	vimrc_example.vim	/^map Q gq$/;"	m
QuickSortList	plugin/libList.vim	/^function QuickSortList( array, beg, end )$/;"	f
R	macros/hanoi/hanoi.vim	/^map R $rn$/;"	m
R	macros/less.vim	/^noremap <script> R <C-L><SID>L$/;"	m
R	macros/life/life.vim	/^map R CV$/;"	m
RELEASE_CFLAGS	c-support/codesnippets/Makefile	/^RELEASE_CFLAGS  := -Wall -ansi -pedantic -O3$/;"	m
RELEASE_LDFLAGS	c-support/codesnippets/Makefile	/^RELEASE_LDFLAGS  :=$/;"	m
ReIndent	ftplugin/html/HTML.vim	/^function! s:ReIndent(first, last, extraline)$/;"	f
ReadMacro	ftplugin/latex-suite/custommacros.vim	/^function! <SID>ReadMacro(...)$/;"	f
ReadTemplate	ftplugin/latex-suite/templates.vim	/^function! <SID>ReadTemplate(...)$/;"	f
RecordInFile	autoload/vimball.vim	/^fun! s:RecordInFile(home)$/;"	f
RecordInVar	autoload/vimball.vim	/^fun! s:RecordInVar(home,cmd)$/;"	f
RedrawMacro	ftplugin/latex-suite/custommacros.vim	/^function! RedrawMacro()$/;"	f
Ref	macros/matchit.vim	/^fun! s:Ref(string, d, ...)$/;"	f
Ref	plugin/matchit.vim	/^fun! s:Ref(string, d, ...)$/;"	f
Ref	plugin/plugin/matchit.vim	/^fun! s:Ref(string, d, ...)$/;"	f
RefreshColorschemesList	plugin/ScrollColor.vim	/^function! s:RefreshColorschemesList() $/;"	f
Release	tools/shtags.pl	/^Release:	$id[2]$/;"	l
RemoteInsert	plugin/remoteOpen.vim	/^com! -nargs=? RemoteInsert :call RemoteInsert('<args>')$/;"	c
RemoteInsert	plugin/remoteOpen.vim	/^function! RemoteInsert(...)$/;"	f
RemoteOpen	plugin/remoteOpen.vim	/^com! -nargs=1 RemoteOpen :call RemoteOpen('<args>')$/;"	c
RemoteOpen	plugin/remoteOpen.vim	/^function! RemoteOpen(arglist)$/;"	f
RemotePathAnalysis	autoload/netrw.vim	/^fun! s:RemotePathAnalysis(dirname)$/;"	f
RemoteSystem	autoload/netrw.vim	/^fun! s:RemoteSystem(cmd)$/;"	f
RemoveDelimiters	plugin/NERD_commenter.vim	/^function s:RemoveDelimiters(left, right, line)$/;"	f
RemoveDuplicates	plugin/ScrollColor.vim	/^function! s:RemoveDuplicates(list)$/;"	f
RemoveListItem	plugin/libList.vim	/^function RemoveListItem( array, index )$/;"	f
ReplaceDelims	plugin/NERD_commenter.vim	/^function s:ReplaceDelims(toReplace1, toReplace2, replacor1, replacor2, str)$/;"	f
ReplaceLeftMostDelim	plugin/NERD_commenter.vim	/^function s:ReplaceLeftMostDelim(toReplace, replacor, str)$/;"	f
ReplaceListItem	plugin/libList.vim	/^function ReplaceListItem( array, index, item )$/;"	f
ReplaceRightMostDelim	plugin/NERD_commenter.vim	/^function s:ReplaceRightMostDelim(toReplace, replacor, str)$/;"	f
ReportError	plugin/vcscommand.vim	/^function! s:ReportError(error)$/;"	f
ResetOptions	indent/php.vim	/^function! ResetOptions()$/;"	f
Resolve	macros/matchit.vim	/^fun! s:Resolve(source, target, output)$/;"	f
Resolve	plugin/matchit.vim	/^fun! s:Resolve(source, target, output)$/;"	f
Resolve	plugin/plugin/matchit.vim	/^fun! s:Resolve(source, target, output)$/;"	f
RestoreBufVars	autoload/netrw.vim	/^fun! s:RestoreBufVars()$/;"	f
RestoreEvents	plugin/ScreenShot.vim	/^function! s:RestoreEvents(saved)$/;"	f
RestoreKeywords	autoload/xmlcomplete.vim	/^function! s:RestoreKeywords()$/;"	f
RestoreScreenState	plugin/NERD_commenter.vim	/^function s:RestoreScreenState()$/;"	f
RestoreShiftwidth	ftplugin/cobol.vim	/^function! s:RestoreShiftwidth()$/;"	f
RestoreWinVars	autoload/netrw.vim	/^fun! s:RestoreWinVars()$/;"	f
RightMostIndx	plugin/NERD_commenter.vim	/^function s:RightMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
RmVimball	plugin/vimballPlugin.vim	/^com! -na=* -complete=dir  RmVimball   call vimball#SaveSettings()|call vimball#RmVimball(<f-args>)|call vimball#RestoreSettings()$/;"	c
Rmdir	autoload/tar.vim	/^fun! s:Rmdir(fname)$/;"	f
Rmdir	autoload/zip.vim	/^fun! s:Rmdir(fname)$/;"	f
RplGetFreeIndent	indent/rpl.vim	/^function RplGetFreeIndent()$/;"	f
RplGetIndent	indent/rpl.vim	/^function RplGetIndent(lnum)$/;"	f
RubyBalloonexpr	ftplugin/ruby.vim	/^function! RubyBalloonexpr()$/;"	f
S	macros/hanoi/hanoi.vim	/^map S $r\$$/;"	m
SCROLLCOLOR	plugin/ScrollColor.vim	/^command! SCROLLCOLOR :call s:ColorScroller()$/;"	c
SID	plugin/errormarker.vim	/^function! s:SID()$/;"	f
SOURCES	c-support/codesnippets/Makefile	/^SOURCES         := main.c $/;"	m
SQL	filetype.vim	/^func! s:SQL()$/;"	f
SQLCAddAlias	autoload/sqlcomplete.vim	/^function! s:SQLCAddAlias(table_name, table_alias, cols)$/;"	f
SQLCCheck4dbext	autoload/sqlcomplete.vim	/^function! s:SQLCCheck4dbext()$/;"	f
SQLCErrorMsg	autoload/sqlcomplete.vim	/^function! s:SQLCErrorMsg(msg)$/;"	f
SQLCGetColumns	autoload/sqlcomplete.vim	/^function! s:SQLCGetColumns(table_name, list_type)$/;"	f
SQLCGetObjectOwner	autoload/sqlcomplete.vim	/^function! s:SQLCGetObjectOwner(object) $/;"	f
SQLCGetSyntaxList	autoload/sqlcomplete.vim	/^function! s:SQLCGetSyntaxList(syn_group)$/;"	f
SQLCWarningMsg	autoload/sqlcomplete.vim	/^function! s:SQLCWarningMsg(msg)$/;"	f
SQLSetType	ftplugin/sql.vim	/^    command! -nargs=* -complete=custom,SQL_GetList SQLSetType :call SQL_SetType(<q-args>)$/;"	c
SQL_GetList	ftplugin/sql.vim	/^    function SQL_GetList(ArgLead, CmdLine, CursorPos)$/;"	f
SQL_SetType	ftplugin/sql.vim	/^    function SQL_SetType(name)$/;"	f
SYS_LIBS	c-support/codesnippets/Makefile	/^SYS_LIBS        = -lm$/;"	m
Safe_indent	indent/awk.vim	/^function! s:Safe_indent( base, wordlen, this_line )$/;"	f
SaveBufVars	autoload/netrw.vim	/^fun! s:SaveBufVars()$/;"	f
SaveEvents	plugin/ScreenShot.vim	/^function! s:SaveEvents()$/;"	f
SaveScreenState	plugin/NERD_commenter.vim	/^function s:SaveScreenState()$/;"	f
SaveVimSesn	menu.vim	/^fun! s:SaveVimSesn()$/;"	f
SaveWinVars	autoload/netrw.vim	/^fun! s:SaveWinVars()$/;"	f
Say	plugin/tar-1.00.vim	/^function! s:Say(string)$/;"	f
ScreenShot	plugin/ScreenShot.vim	/^    let ScreenShot = {}$/;"	v
ScreenShot	plugin/ScreenShot.vim	/^command! ScreenShot    :call ScreenShot()$/;"	c
ScreenShot	plugin/ScreenShot.vim	/^function! ScreenShot()$/;"	f
ScrollerHelp	plugin/ScrollColor.vim	/^function! s:ScrollerHelp()$/;"	f
SearchMembers	autoload/ccomplete.vim	/^function! s:SearchMembers(matches, items, all)$/;"	f
SearchP	menu.vim	/^fun! s:SearchP()$/;"	f
Seems_continuing	indent/awk.vim	/^function! s:Seems_continuing( line )$/;"	f
SelectAll	menu.vim	/^func! <SID>SelectAll()$/;"	f
Set.All	macros/shellmenu.vim	/^imenu Set.All keyword arguments are placed in the environment set -k$/;"	m
Set.Disable	macros/shellmenu.vim	/^imenu Set.Disable file name generation set -f$/;"	m
Set.Exit	macros/shellmenu.vim	/^imenu Set.Exit after reading and executing one command set -t$/;"	m
Set.Print	macros/shellmenu.vim	/^imenu Set.Print commands and their arguments as they are executed set -x$/;"	m
Set.Print	macros/shellmenu.vim	/^imenu Set.Print shell input lines as they are read set -v$/;"	m
Set.Read	macros/shellmenu.vim	/^imenu Set.Read commands but do not execute them set -n$/;"	m
Set.Treat	macros/shellmenu.vim	/^imenu Set.Treat unset variables as an error when substituting set -u$/;"	m
Set.exit	macros/shellmenu.vim	/^imenu Set.exit when command returns non-zero exit code set -e$/;"	m
Set.mark	macros/shellmenu.vim	/^imenu Set.mark modified or modified variables set -a$/;"	m
Set.remember	macros/shellmenu.vim	/^imenu Set.remember function commands set -h$/;"	m
Set.set	macros/shellmenu.vim	/^imenu Set.set set$/;"	m
Set.unset	macros/shellmenu.vim	/^imenu Set.unset unset$/;"	m
SetBufWinVars	autoload/netrw.vim	/^fun! s:SetBufWinVars()$/;"	f
SetColor	plugin/ScrollColor.vim	/^function! s:SetColor(name)$/;"	f
SetCustomMacrosMenu	ftplugin/latex-suite/custommacros.vim	/^function! <SID>SetCustomMacrosMenu()$/;"	f
SetEnvMacrosOptions	ftplugin/latex-suite/envmacros.vim	/^function! <SID>SetEnvMacrosOptions()$/;"	f
SetErrorMarkers	plugin/errormarker.vim	/^function! s:SetErrorMarkers()$/;"	f
SetFileTypeSH	filetype.vim	/^func! SetFileTypeSH(name)$/;"	f
SetFileTypeShell	filetype.vim	/^func! SetFileTypeShell(name)$/;"	f
SetIfUnset	ftplugin/html/HTML.vim	/^command! -nargs=+ SetIfUnset call SetIfUnset(<f-args>)$/;"	c
SetIfUnset	ftplugin/html/HTML.vim	/^function! SetIfUnset(var, ...)$/;"	f
SetIsk	syntax/bst.vim	/^    command -nargs=1 SetIsk set iskeyword=<args>$/;"	c
SetIsk	syntax/bst.vim	/^    command -nargs=1 SetIsk setlocal iskeyword=<args>$/;"	c
SetIsk	syntax/lilo.vim	/^  command -nargs=1 SetIsk set iskeyword=<args>$/;"	c
SetIsk	syntax/lilo.vim	/^  command -nargs=1 SetIsk setlocal iskeyword=<args>$/;"	c
SetKeywords	autoload/xmlcomplete.vim	/^function! s:SetKeywords()$/;"	f
SetLatexEfm	compiler/tex.vim	/^function! <SID>SetLatexEfm()$/;"	f
SetRexDir	autoload/netrw.vim	/^fun! s:SetRexDir(islocal,dirname)$/;"	f
SetSyn	synmenu.vim	/^fun! SetSyn(name)$/;"	f
SetTeXOptions	ftplugin/latex-suite/main.vim	/^function! <SID>SetTeXOptions()$/;"	f
SetTeXTarget	ftplugin/latex-suite/compiler.vim	/^function! SetTeXTarget(...)$/;"	f
SetTemplateMenu	ftplugin/latex-suite/templates.vim	/^function! <SID>SetTemplateMenu()$/;"	f
SetTexCompilerLevel	compiler/tex.vim	/^function! <SID>SetTexCompilerLevel(...)$/;"	f
SetUpForNewFiletype	plugin/NERD_commenter.vim	/^function s:SetUpForNewFiletype(filetype, forceReset)$/;"	f
SetUpHotKeys	ftplugin/latex-suite/envmacros.vim	/^	function! <SID>SetUpHotKeys()$/;"	f
Setsynonly	synmenu.vim	/^fun! s:Setsynonly()$/;"	f
SetupBuffer	plugin/vcscommand.vim	/^function! s:SetupBuffer()$/;"	f
SetupNetrwStatusLine	autoload/netrw.vim	/^fun! s:SetupNetrwStatusLine(statline)$/;"	f
SetupRemoteReplies	plugin/rrhelper.vim	/^  function SetupRemoteReplies()$/;"	f
SetupScratchBuffer	plugin/vcscommand.vim	/^function! s:SetupScratchBuffer(command, vcsType, originalBuffer, statusText)$/;"	f
Sexplore	plugin/netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Sexplore	call netrw#Explore(<count>,1,0+<bang>0,<q-args>)$/;"	c
ShellEscape	browser_launcher.vim	/^function! s:ShellEscape(str) " {{{$/;"	f
ShellEscape	ftplugin/html/HTML.vim	/^function! s:ShellEscape(str) " {{{2$/;"	f
ShowColors	ftplugin/html/HTML.vim	/^function! s:ShowColors(...)$/;"	f
ShowErrorAtCursor	plugin/errormarker.vim	/^function! ShowErrorAtCursor()$/;"	f
SizeGif	MangleImageTag.vim	/^function! s:SizeGif(lines) "{{{1$/;"	f
SizeJpg	MangleImageTag.vim	/^function! s:SizeJpg(lines) "{{{1$/;"	f
SizePng	MangleImageTag.vim	/^function! s:SizePng(lines) "{{{1$/;"	f
SkipJavaBlanksAndComments	indent/java.vim	/^function! SkipJavaBlanksAndComments(startline)$/;"	f
SkipPattern	indent/sml.vim	/^function! s:SkipPattern(lnum, pat)$/;"	f
Skippmatch	indent/php.vim	/^function! Skippmatch()  " {{{$/;"	f
Skippmatch2	indent/php.vim	/^function! Skippmatch2()$/;"	f
SmartBS	ftplugin/latex-suite/main.vim	/^	function! s:SmartBS(pat)$/;"	f
SmartBS_pat	ftplugin/latex-suite/main.vim	/^	fun! s:SmartBS_pat()$/;"	f
SmartDots	ftplugin/latex-suite/main.vim	/^	function! <SID>SmartDots()$/;"	f
Snip	plugin/imaps.vim	/^com! -nargs=0 -range Snip :<line1>,<line2>call <SID>Snip()$/;"	c
Snip	plugin/imaps.vim	/^function! <SID>Snip() range$/;"	f
SortVar	plugin/ScrollColor.vim	/^function! s:SortVar(list, sep)$/;"	f
SpShVars.All	macros/shellmenu.vim	/^imenu SpShVars.All positional parameters (quoted spaces) ${*}$/;"	m
SpShVars.All	macros/shellmenu.vim	/^imenu SpShVars.All positional parameters (unquoted spaces) ${@}$/;"	m
SpShVars.Flags	macros/shellmenu.vim	/^imenu SpShVars.Flags set ${-}$/;"	m
SpShVars.Number	macros/shellmenu.vim	/^imenu SpShVars.Number of positional parameters ${#}$/;"	m
SpShVars.Process	macros/shellmenu.vim	/^imenu SpShVars.Process number of last background command ${!}$/;"	m
SpShVars.Process	macros/shellmenu.vim	/^imenu SpShVars.Process number of this shell ${$}$/;"	m
SpShVars.Return	macros/shellmenu.vim	/^imenu SpShVars.Return code of last command ${?}$/;"	m
Space	optwin.vim	/^fun! <SID>Space()$/;"	f
SpecChangelog	ftplugin/spec.vim	/^	function s:SpecChangelog(format)$/;"	f
SpecialComment	ftplugin/c.vim	/^command! -nargs=1 -complete=customlist,C_SpecialCommentList      SpecialComment     call C_SpecialCommentListInsert (<f-args>)$/;"	c
SpellDel	menu.vim	/^  func! <SID>SpellDel()$/;"	f
SpellLang	menu.vim	/^  func! s:SpellLang()$/;"	f
SpellPopup	menu.vim	/^  func! <SID>SpellPopup()$/;"	f
SpellPopupMenu	menu.vim	/^  augroup SpellPopupMenu$/;"	a
SpellReplace	menu.vim	/^  func! <SID>SpellReplace(n)$/;"	f
SplitWithSpan	plugin/ScreenShot.vim	/^function! s:SplitWithSpan(hi,str)$/;"	f
Squash	ftplugin/gitrebase.vim	/^command! -buffer -bar Squash :call s:choose('squash')$/;"	c
StarSetf	filetype.vim	/^func! s:StarSetf(ft)$/;"	f
StartBufExplorer	plugin/bufexplorer.vim	/^function! StartBufExplorer(open)$/;"	f
Starts_with_word	indent/awk.vim	/^function! s:Starts_with_word( line )$/;"	f
StatementIndent	indent/ada.vim	/^function s:StatementIndent( current_indent, prev_lnum )$/;"	f
StlPrintf	plugin/ScreenShot.vim	/^function! s:StlPrintf(expr,width,fillchar,invischar,hi)$/;"	f
Stmts.break	break	macros/shellmenu.vim	/^imenu Stmts.break	break $/;"	m
Stmts.case	case	macros/shellmenu.vim	/^imenu Stmts.case	case  in$/;"	m
Stmts.continue	continue	macros/shellmenu.vim	/^imenu Stmts.continue	continue $/;"	m
Stmts.elif	elif	macros/shellmenu.vim	/^imenu Stmts.elif	elif   $/;"	m
Stmts.exit	exit	macros/shellmenu.vim	/^imenu Stmts.exit	exit $/;"	m
Stmts.for	for	macros/shellmenu.vim	/^imenu Stmts.for	for  in $/;"	m
Stmts.function	()	macros/shellmenu.vim	/^imenu Stmts.function	() {$/;"	m
Stmts.if	if	macros/shellmenu.vim	/^imenu Stmts.if	if   $/;"	m
Stmts.if-else	if	macros/shellmenu.vim	/^imenu Stmts.if-else	if   $/;"	m
Stmts.return	return	macros/shellmenu.vim	/^imenu Stmts.return	return $/;"	m
Stmts.return-false	return	macros/shellmenu.vim	/^imenu Stmts.return-false	return 1$/;"	m
Stmts.return-true	return	macros/shellmenu.vim	/^imenu Stmts.return-true	return 0$/;"	m
Stmts.shift	shift	macros/shellmenu.vim	/^imenu Stmts.shift	shift $/;"	m
Stmts.trap	trap	macros/shellmenu.vim	/^imenu Stmts.trap	trap $/;"	m
Stmts.while	while	macros/shellmenu.vim	/^imenu Stmts.while	while   $/;"	m
Strlen	autoload/netrw.vim	/^fun! s:Strlen(x)$/;"	f
Strntok	compiler/tex.vim	/^fun! <SID>Strntok(s, tok, n)$/;"	f
Strntok	plugin/SyntaxFolds.vim	/^fun! <SID>Strntok(s, tok, n)$/;"	f
Strntok	plugin/imaps.vim	/^fun! <SID>Strntok(s, tok, n)$/;"	f
Strntok	plugin/remoteOpen.vim	/^fun! <SID>Strntok(s, tok, n)$/;"	f
StructMembers	autoload/ccomplete.vim	/^function! s:StructMembers(typename, items, all)$/;"	f
SubName	tools/pltags.pl	/^sub SubName($)$/;"	s
Sum	plugin/ScreenShot.vim	/^function! s:Sum(array)$/;"	f
SwapOutterMultiPartDelimsForPlaceHolders	plugin/NERD_commenter.vim	/^function s:SwapOutterMultiPartDelimsForPlaceHolders(line)$/;"	f
SwapOutterPlaceHoldersForMultiPartDelims	plugin/NERD_commenter.vim	/^function s:SwapOutterPlaceHoldersForMultiPartDelims(line)$/;"	f
SwitchToAlternativeDelimiters	plugin/NERD_commenter.vim	/^function s:SwitchToAlternativeDelimiters(printMsgs)$/;"	f
SynColor	syntax/doxygen.vim	/^    command -nargs=+ SynColor hi def <args>$/;"	c
SynColor	syntax/syncolor.vim	/^    command -nargs=* SynColor hi <args>$/;"	c
SynColor	syntax/syncolor.vim	/^    command -nargs=* SynColor hi def <args>$/;"	c
SynColor	syntax/syncolor.vim	/^  command -nargs=* SynColor hi <args>$/;"	c
SynDisplay	syntax/inform.vim	/^  command -nargs=+ SynDisplay syntax <args> display$/;"	c
SynDisplay	syntax/inform.vim	/^  command -nargs=+ SynDisplay syntax <args>$/;"	c
SynIdEnd	plugin/ScreenShot.vim	/^function! s:SynIdEnd(id)$/;"	f
SynIdStart	plugin/ScreenShot.vim	/^function! s:SynIdStart(id)$/;"	f
SynIdStyle	plugin/ScreenShot.vim	/^function! s:SynIdStyle(id)$/;"	f
SynIdWrap	plugin/ScreenShot.vim	/^function! s:SynIdWrap(id,text)$/;"	f
SynLink	syntax/doxygen.vim	/^    command -nargs=+ SynLink hi def link <args>$/;"	c
SynLink	syntax/syncolor.vim	/^    command -nargs=* SynLink hi def link <args>$/;"	c
SynLink	syntax/syncolor.vim	/^    command -nargs=* SynLink hi! link <args>$/;"	c
SynLink	syntax/syncolor.vim	/^  command -nargs=* SynLink hi link <args>$/;"	c
SynOnOff	menu.vim	/^    fun s:SynOnOff()$/;"	f
SynSet	syntax/synload.vim	/^fun! s:SynSet()$/;"	f
SyntaxCSyntaxGroupItems	autoload/syntaxcomplete.vim	/^function! s:SyntaxCSyntaxGroupItems( group_name, syntax_full )$/;"	f
Syntax_extensions	colors/lettuce.vim	/^augroup Syntax_extensions$/;"	a
T	macros/hanoi/hanoi.vim	/^map T ko0$/;"	m
T	macros/life/life.vim	/^map T G,c2k,!9k,@,#j>2k,$j$/;"	m
T	macros/urm/urm.vim	/^map T y\$$/;"	m
TARBALL_EXCLUDE	c-support/codesnippets/Makefile	/^TARBALL_EXCLUDE = *.{o,gz,zip}$/;"	m
TBrowser_Ctags_Cmd	ftplugin/txt.vim	/^	let TBrowser_Ctags_Cmd = Tlist_Ctags_Cmd$/;"	v
TC	ftplugin/html/HTML.vim	/^function! s:TC(s)$/;"	f
TCLevel	compiler/tex.vim	/^com! -nargs=? TCLevel :call <SID>SetTexCompilerLevel(<f-args>)$/;"	c
TCTarget	ftplugin/latex-suite/compiler.vim	/^com! -nargs=1 TCTarget :call Tex_SetTeXCompilerTarget('Compile', <f-args>)$/;"	c
TClearCiteHist	ftplugin/latex-suite/texviewer.vim	/^com! -nargs=0 TClearCiteHist unlet! s:citeSearchHistory$/;"	c
TCompileMainFile	ftplugin/latex-suite/compiler.vim	/^command! -nargs=0 TCompileMainFile let b:fragmentFile = 0$/;"	c
TCompileThis	ftplugin/latex-suite/compiler.vim	/^command! -nargs=0 TCompileThis let b:fragmentFile = 1$/;"	c
TFind	plugin/txtbrowser.vim	/^command! -nargs=? -bar TFind call s:TxtBrowserWord(<f-args>)$/;"	c
TGoto	plugin/txtbrowser.vim	/^command! -nargs=? -bar TGoto call s:TxtbrowserGoto(<f-args>)$/;"	c
THelp	ftplugin/latex-suite/wizardfuncs.vim	/^command! -nargs=0 THelp call <SID>TexHelp()$/;"	c
TLook	ftplugin/latex-suite/texviewer.vim	/^command -nargs=1 TLook    call Tex_Complete(<q-args>, 'tex')$/;"	c
TLookAll	ftplugin/latex-suite/texviewer.vim	/^command -nargs=1 TLookAll call Tex_Complete(<q-args>, 'all')$/;"	c
TLookBib	ftplugin/latex-suite/texviewer.vim	/^command -nargs=1 TLookBib call Tex_Complete(<q-args>, 'bib')$/;"	c
TMacro	ftplugin/latex-suite/custommacros.vim	/^	com! -complete=custom,Tex_CompleteMacroName -nargs=? TMacro$/;"	c
TMacro	ftplugin/latex-suite/custommacros.vim	/^	com! -nargs=? TMacro$/;"	c
TMacroDelete	ftplugin/latex-suite/custommacros.vim	/^	com! -complete=custom,Tex_CompleteMacroName -nargs=? TMacroDelete$/;"	c
TMacroDelete	ftplugin/latex-suite/custommacros.vim	/^	com! -nargs=? TMacroDelete :call <SID>DeleteMacro(<f-args>)$/;"	c
TMacroEdit	ftplugin/latex-suite/custommacros.vim	/^	com! -complete=custom,Tex_CompleteMacroName -nargs=? TMacroEdit$/;"	c
TMacroEdit	ftplugin/latex-suite/custommacros.vim	/^	com! -nargs=? TMacroEdit   :call <SID>EditMacro(<f-args>)$/;"	c
TMacroNew	ftplugin/latex-suite/custommacros.vim	/^com! -nargs=? TMacroNew :call <SID>NewMacro(<f-args>)$/;"	c
TO	ftplugin/html/HTML.vim	/^function! s:TO(s)$/;"	f
TOhtml	plugin/tohtml.vim	/^  command -range=% TOhtml :call Convert2HTML(<line1>, <line2>)$/;"	c
TPackage	ftplugin/latex-suite/packages.vim	/^	com! -complete=custom,Tex_CompletePackageName -nargs=* TPackage let s:retVal = Tex_pack_one(<f-args>) <bar> normal! i<C-r>=s:retVal<CR>$/;"	c
TPackage	ftplugin/latex-suite/packages.vim	/^	com! -nargs=* TPackage let s:retVal = Tex_pack_one(<f-args>) <bar> normal! i<C-r>=s:retVal<CR>$/;"	c
TPackageUpdate	ftplugin/latex-suite/packages.vim	/^com! -nargs=0 TPackageUpdate :silent! call Tex_pack_updateall(1)$/;"	c
TPackageUpdateAll	ftplugin/latex-suite/packages.vim	/^com! -nargs=0 TPackageUpdateAll :silent! call Tex_pack_updateall(1)$/;"	c
TPartCompile	ftplugin/latex-suite/compiler.vim	/^command! -nargs=0 -range=% TPartCompile :<line1>, <line2> silent! call Tex_PartCompile()$/;"	c
TProjectEdit	ftplugin/latex-suite/texproject.vim	/^command! -nargs=0 TProjectEdit  :call <SID>Tex_ProjectEdit()$/;"	c
TSearch	plugin/txtbrowser.vim	/^command! -nargs=? -bar TSearch call s:TxtBrowserSearch(<f-args>)$/;"	c
TSection	ftplugin/latex-suite/wizardfuncs.vim	/^com! -nargs=? TSection call Tex_section(<f-args>)$/;"	c
TSectionAdvanced	ftplugin/latex-suite/wizardfuncs.vim	/^com! -nargs=? TSectionAdvanced call Tex_section_adv(<f-args>)$/;"	c
TTarget	ftplugin/latex-suite/compiler.vim	/^com! -nargs=? TTarget :call SetTeXTarget(<f-args>)$/;"	c
TTemplate	ftplugin/latex-suite/templates.vim	/^	com! -complete=custom,Tex_CompleteTemplateName -nargs=? TTemplate :call <SID>ReadTemplate(<f-args>)$/;"	c
TTemplate	ftplugin/latex-suite/templates.vim	/^	com! -nargs=? TTemplate :call <SID>ReadTemplate(<f-args>)$/;"	c
TVTarget	ftplugin/latex-suite/compiler.vim	/^com! -nargs=1 TVTarget :call Tex_SetTeXCompilerTarget('View', <f-args>)$/;"	c
TVersion	ftplugin/latex-suite/version.vim	/^com! -nargs=0 TVersion echo Tex_Version()$/;"	c
Tab	ftplugin/cobol.vim	/^function! s:Tab()$/;"	f
TabSpace	plugin/NERD_commenter.vim	/^function s:TabSpace()$/;"	f
TabTitle	plugin/ScreenShot.vim	/^function! s:TabTitle(nr)$/;"	f
TabbedCol	plugin/NERD_commenter.vim	/^function s:TabbedCol(line, col)$/;"	f
Tabula	colors/tabula.vim	/^function! Tabula()$/;"	f
Tabula_1	colors/tabula.vim	/^function! Tabula_1()$/;"	f
Tabula_2	colors/tabula.vim	/^function! Tabula_2()$/;"	f
Tabula_3	colors/tabula.vim	/^function! Tabula_3()$/;"	f
Tabula_4	colors/tabula.vim	/^function! Tabula_4()$/;"	f
Tabula_5	colors/tabula.vim	/^function! Tabula_5()$/;"	f
Tabula_6	colors/tabula.vim	/^function! Tabula_6()$/;"	f
Tabula_7	colors/tabula.vim	/^function! Tabula_7()$/;"	f
Tabula_8	colors/tabula.vim	/^function! Tabula_8()$/;"	f
Tabula_9	colors/tabula.vim	/^function! Tabula_9()$/;"	f
Tag	ftplugin/pdf.vim	/^function! s:Tag()$/;"	f
Tag2item	autoload/ccomplete.vim	/^function! s:Tag2item(val)$/;"	f
TagFiles	menu.vim	/^fun! s:TagFiles()$/;"	f
TagList_IsValid	plugin/taglist.vim	/^function! TagList_IsValid()$/;"	f
TagList_Start	plugin/taglist.vim	/^function! TagList_Start()$/;"	f
TagList_WrapUp	plugin/taglist.vim	/^function! TagList_WrapUp()$/;"	f
TagList_title	plugin/taglist.vim	/^    let TagList_title = "__Tag_List__"$/;"	v
Tagcmd2extra	autoload/ccomplete.vim	/^function! s:Tagcmd2extra(cmd, name, fname)$/;"	f
Tagline2item	autoload/ccomplete.vim	/^function! s:Tagline2item(val, brackets)$/;"	f
TarBrowse	plugin/tar-1.00.vim	/^function! s:TarBrowse(tarfile)$/;"	f
TarBrowseSelect	autoload/tar.vim	/^fun! s:TarBrowseSelect()$/;"	f
TarBrowseSelect	plugin/tar-1.00.vim	/^function! s:TarBrowseSelect()$/;"	f
TarCatCommand	plugin/tar-1.00.vim	/^function! s:TarCatCommand(tarfile)$/;"	f
TarRead	plugin/tar-1.00.vim	/^function! s:TarRead(argument, cleanup)$/;"	f
TarWrite	plugin/tar-1.00.vim	/^function! s:TarWrite(argument)$/;"	f
TcshGetIndent	indent/tcsh.vim	/^function TcshGetIndent()$/;"	f
Test.String	macros/shellmenu.vim	/^imenu Test.String is empty [ x = "x$" ]hhi$/;"	m
Test.String	macros/shellmenu.vim	/^imenu Test.String is not empty [ x != "x$" ]hhi$/;"	m
Test.Strings	macros/shellmenu.vim	/^imenu Test.Strings is equal [ "" = "" ]hhhhhhhi$/;"	m
Test.Strings	macros/shellmenu.vim	/^imenu Test.Strings is not equal [ "" != "" ]hhhhhhhhi$/;"	m
Test.Values	macros/shellmenu.vim	/^imenu Test.Values is equal [  -eq  ]hhhhhhi$/;"	m
Test.Values	macros/shellmenu.vim	/^imenu Test.Values is greater equal [  -ge  ]hhhhhhi$/;"	m
Test.Values	macros/shellmenu.vim	/^imenu Test.Values is greater than [  -gt  ]hhhhhhi$/;"	m
Test.Values	macros/shellmenu.vim	/^imenu Test.Values is less equal [  -le  ]hhhhhhi$/;"	m
Test.Values	macros/shellmenu.vim	/^imenu Test.Values is less than [  -lt  ]hhhhhhi$/;"	m
Test.Values	macros/shellmenu.vim	/^imenu Test.Values is not equal [  -ne  ]hhhhhhi$/;"	m
Test.existence	[	macros/shellmenu.vim	/^imenu Test.existence	[ -e  ]hi$/;"	m
Test.existence	macros/shellmenu.vim	/^imenu Test.existence - directory	[ -d  ]hi$/;"	m
Test.existence	macros/shellmenu.vim	/^imenu Test.existence - executable	[ -x  ]hi$/;"	m
Test.existence	macros/shellmenu.vim	/^imenu Test.existence - file		[ -f  ]hi$/;"	m
Test.existence	macros/shellmenu.vim	/^imenu Test.existence - file (not empty)	[ -s  ]hi$/;"	m
Test.existence	macros/shellmenu.vim	/^imenu Test.existence - readable	[ -r  ]hi$/;"	m
Test.existence	macros/shellmenu.vim	/^imenu Test.existence - writable	[ -w  ]hi$/;"	m
TestFiletypeFuncs	filetype.vim	/^func! TestFiletypeFuncs(testlist)$/;"	f
TexFill	ftplugin/latex-suite/smartspace.vim	/^function! s:TexFill(width) $/;"	f
TexFoldTextFunction	ftplugin/latex-suite/folding.vim	/^function! TexFoldTextFunction()$/;"	f
TexFormatLine	ftplugin/latex-suite/smartspace.vim	/^function! s:TexFormatLine(width, current_line, current_column)    " {{{$/;"	f
TexHelp	ftplugin/latex-suite/wizardfuncs.vim	/^function! s:TexHelp()$/;"	f
TexNewMathZone	syntax/tex.vim	/^ fun! TexNewMathZone(sfx,mathzone,starform)$/;"	f
TexQuotes	ftplugin/latex-suite/main.vim	/^	function! s:TexQuotes()$/;"	f
Tex_CD	ftplugin/latex-suite/main.vim	/^function! Tex_CD(dirname)$/;"	f
Tex_CatFile	ftplugin/latex-suite/main.vim	/^	function! Tex_CatFile(filename)$/;"	f
Tex_ChangeCommand	ftplugin/latex-suite/envmacros.vim	/^	function! Tex_ChangeCommand(isvisual) $/;"	f
Tex_ChangeEnvironments	ftplugin/latex-suite/envmacros.vim	/^	function! Tex_ChangeEnvironments() $/;"	f
Tex_ChooseFile	ftplugin/latex-suite/main.vim	/^function! Tex_ChooseFile(dialog)$/;"	f
Tex_ChooseFromPrompt	ftplugin/latex-suite/main.vim	/^function! Tex_ChooseFromPrompt(dialog, list, sep)$/;"	f
Tex_CleanSearchHistory	ftplugin/latex-suite/main.vim	/^function! Tex_CleanSearchHistory()$/;"	f
Tex_ClearDebug	ftplugin/latex-suite/main.vim	/^function! Tex_ClearDebug(...)$/;"	f
Tex_CloseSmallWindows	ftplugin/latex-suite/texviewer.vim	/^function! Tex_CloseSmallWindows()$/;"	f
Tex_Common	ftplugin/latex-suite/texviewer.vim	/^function! s:Tex_Common(path1, path2)$/;"	f
Tex_CompileLatex	ftplugin/latex-suite/compiler.vim	/^function! Tex_CompileLatex()$/;"	f
Tex_CompileMultipleTimes	ftplugin/latex-suite/compiler.vim	/^function! Tex_CompileMultipleTimes()$/;"	f
Tex_Complete	ftplugin/latex-suite/texviewer.vim	/^function! Tex_Complete(what, where)$/;"	f
Tex_CompleteCiteEntry	ftplugin/latex-suite/texviewer.vim	/^function! Tex_CompleteCiteEntry()$/;"	f
Tex_CompleteFileName	ftplugin/latex-suite/texviewer.vim	/^function! Tex_CompleteFileName(filename, ext, root)$/;"	f
Tex_CompleteMacroName	ftplugin/latex-suite/custommacros.vim	/^	function! Tex_CompleteMacroName(A,P,L)$/;"	f
Tex_CompletePackageName	ftplugin/latex-suite/packages.vim	/^	function! Tex_CompletePackageName(A,P,L)$/;"	f
Tex_CompleteRefCiteCustom	ftplugin/latex-suite/texviewer.vim	/^function! s:Tex_CompleteRefCiteCustom(type)$/;"	f
Tex_CompleteTemplateName	ftplugin/latex-suite/templates.vim	/^	function! Tex_CompleteTemplateName(A,P,L)$/;"	f
Tex_CompleteWord	ftplugin/latex-suite/texviewer.vim	/^function! Tex_CompleteWord(completeword, prefixlength)$/;"	f
Tex_CounterMenus	ftplugin/latex-suite/elementmacros.vim	/^	function! <SID>Tex_CounterMenus(submenu, rhs)$/;"	f
Tex_CreatePrompt	ftplugin/latex-suite/main.vim	/^function! Tex_CreatePrompt(promptList, cols, sep)$/;"	f
Tex_Debug	compiler/tex.vim	/^	function! Tex_Debug(...)$/;"	f
Tex_Debug	ftplugin/latex-suite/main.vim	/^function! Tex_Debug(str, ...)$/;"	f
Tex_DeleteFile	ftplugin/latex-suite/main.vim	/^	function! Tex_DeleteFile(filename)$/;"	f
Tex_DimMenus	ftplugin/latex-suite/elementmacros.vim	/^	function! <SID>Tex_DimMenus(submenu, rhs)$/;"	f
Tex_DisplayBibList	ftplugin/latex-suite/texviewer.vim	/^function! Tex_DisplayBibList()$/;"	f
Tex_DoCommand	ftplugin/latex-suite/envmacros.vim	/^function! Tex_DoCommand(isvisual)$/;"	f
Tex_DoCompletion	ftplugin/latex-suite/texviewer.vim	/^function! s:Tex_DoCompletion(texcommand)$/;"	f
Tex_DoEnvironment	ftplugin/latex-suite/envmacros.vim	/^function! Tex_DoEnvironment(...)$/;"	f
Tex_EchoBibShortcuts	ftplugin/latex-suite/texviewer.vim	/^function! Tex_EchoBibShortcuts()$/;"	f
Tex_EnvMacros	ftplugin/latex-suite/envmacros.vim	/^function! <SID>Tex_EnvMacros(lhs, submenu, name)$/;"	f
Tex_EscapeForGrep	ftplugin/latex-suite/main.vim	/^function! Tex_EscapeForGrep(string)$/;"	f
Tex_EscapeSpaces	ftplugin/latex-suite/main.vim	/^function! Tex_EscapeSpaces(path)$/;"	f
Tex_FastEnvironmentInsert	ftplugin/latex-suite/envmacros.vim	/^	function! Tex_FastEnvironmentInsert(isvisual)$/;"	f
Tex_FindBibFiles	ftplugin/latex-suite/texviewer.vim	/^function! Tex_FindBibFiles()$/;"	f
Tex_FindFile	ftplugin/latex-suite/main.vim	/^function! Tex_FindFile(fname, path, suffixesadd)$/;"	f
Tex_FindInRtp	ftplugin/latex-suite/main.vim	/^function! Tex_FindInRtp(filename, directory, ...)$/;"	f
Tex_FinishOutlineCompletion	ftplugin/latex-suite/texviewer.vim	/^function! Tex_FinishOutlineCompletion()$/;"	f
Tex_FoldSections	ftplugin/latex-suite/folding.vim	/^function! Tex_FoldSections(lst, endpat)$/;"	f
Tex_FontDiacritics	ftplugin/latex-suite/elementmacros.vim	/^	function! <SID>Tex_FontDiacritics(name, rhs)$/;"	f
Tex_FontFamily	ftplugin/latex-suite/elementmacros.vim	/^	function! <SID>Tex_FontFamily(font,fam)$/;"	f
Tex_FontSize	ftplugin/latex-suite/elementmacros.vim	/^	function! <SID>Tex_FontSize(name)$/;"	f
Tex_Fontfont	ftplugin/latex-suite/elementmacros.vim	/^	function! <SID>Tex_Fontfont(desc, lhs)$/;"	f
Tex_ForwardSearchLaTeX	ftplugin/latex-suite/compiler.vim	/^function! Tex_ForwardSearchLaTeX()$/;"	f
Tex_GetAuxFile	ftplugin/latex-suite/compiler.vim	/^function! Tex_GetAuxFile(auxFile)$/;"	f
Tex_GetCurrentEnv	ftplugin/latex-suite/envmacros.vim	/^function! Tex_GetCurrentEnv()$/;"	f
Tex_GetErrorList	ftplugin/latex-suite/main.vim	/^function! Tex_GetErrorList()$/;"	f
Tex_GetMainFileName	ftplugin/latex-suite/main.vim	/^function! Tex_GetMainFileName(...)$/;"	f
Tex_GetPos	ftplugin/latex-suite/main.vim	/^function! Tex_GetPos()$/;"	f
Tex_GetTempName	ftplugin/latex-suite/main.vim	/^function! Tex_GetTempName(dirname)$/;"	f
Tex_GetVarValue	ftplugin/latex-suite/main.vim	/^function! Tex_GetVarValue(varname, ...)$/;"	f
Tex_GoToLocation	ftplugin/latex-suite/texviewer.vim	/^function! s:Tex_GoToLocation()$/;"	f
Tex_GotoErrorLocation	ftplugin/latex-suite/compiler.vim	/^function! Tex_GotoErrorLocation(filename)$/;"	f
Tex_GotoTempFile	ftplugin/latex-suite/main.vim	/^function! Tex_GotoTempFile()$/;"	f
Tex_Grep	ftplugin/latex-suite/main.vim	/^function! Tex_Grep(string, where)$/;"	f
Tex_GrepHelper	ftplugin/latex-suite/texviewer.vim	/^function! Tex_GrepHelper(prefix, what)$/;"	f
Tex_Grepadd	ftplugin/latex-suite/main.vim	/^function! Tex_Grepadd(string, where)$/;"	f
Tex_HandleBibShortcuts	ftplugin/latex-suite/texviewer.vim	/^function! Tex_HandleBibShortcuts(command)$/;"	f
Tex_IncrementNumber	ftplugin/latex-suite/main.vim	/^function! Tex_IncrementNumber(increm)$/;"	f
Tex_InsSecAdv	ftplugin/latex-suite/wizardfuncs.vim	/^function! Tex_InsSecAdv(structure)$/;"	f
Tex_InsertItem	ftplugin/latex-suite/envmacros.vim	/^function! Tex_InsertItem()$/;"	f
Tex_IsPresentInFile	ftplugin/latex-suite/main.vim	/^	function! Tex_IsPresentInFile(regexp, filename)$/;"	f
Tex_LeftRight	ftplugin/latex-suite/brackets.vim	/^function! Tex_LeftRight()$/;"	f
Tex_MakeMap	ftplugin/latex-suite/main.vim	/^function! Tex_MakeMap(lhs, rhs, mode, extraargs)$/;"	f
Tex_MakeSubmenu	ftplugin/latex-suite/packages.vim	/^function! Tex_MakeSubmenu(menuList, mainMenuName, $/;"	f
Tex_MathBF	ftplugin/latex-suite/brackets.vim	/^function! Tex_MathBF()$/;"	f
Tex_MathCal	ftplugin/latex-suite/brackets.vim	/^function! Tex_MathCal()$/;"	f
Tex_MathMenuRemove	ftplugin/latex-suite/mathmacros-utf.vim	/^function! Tex_MathMenuRemove()$/;"	f
Tex_MathMenuRemove	ftplugin/latex-suite/mathmacros.vim	/^function! Tex_MathMenuRemove()$/;"	f
Tex_MenuConfigure	ftplugin/latex-suite/texmenuconf.vim	/^function! Tex_MenuConfigure(type, action) " {{{$/;"	f
Tex_NormalizePath	ftplugin/latex-suite/texviewer.vim	/^function! Tex_NormalizePath(path)$/;"	f
Tex_PartCompile	ftplugin/latex-suite/compiler.vim	/^function! Tex_PartCompile() range$/;"	f
Tex_PositionPreviewWindow	ftplugin/latex-suite/compiler.vim	/^function! Tex_PositionPreviewWindow(filename)$/;"	f
Tex_PrintDebug	ftplugin/latex-suite/main.vim	/^function! Tex_PrintDebug(...)$/;"	f
Tex_ProcessPackageCommand	ftplugin/latex-suite/packages.vim	/^function! Tex_ProcessPackageCommand(command)$/;"	f
Tex_ProjectEdit	ftplugin/latex-suite/texproject.vim	/^function! s:Tex_ProjectEdit()$/;"	f
Tex_ProjectLoad	ftplugin/latex-suite/texproject.vim	/^function! Tex_ProjectLoad()$/;"	f
Tex_PromptForCompletion	ftplugin/latex-suite/texviewer.vim	/^function! s:Tex_PromptForCompletion(texcommand,ask)$/;"	f
Tex_PutCommand	ftplugin/latex-suite/envmacros.vim	/^function! Tex_PutCommand(com, isvisual)$/;"	f
Tex_PutEnvironment	ftplugin/latex-suite/envmacros.vim	/^function! Tex_PutEnvironment(env)$/;"	f
Tex_PutLeftRight	ftplugin/latex-suite/brackets.vim	/^function! Tex_PutLeftRight()$/;"	f
Tex_RelPath	ftplugin/latex-suite/texviewer.vim	/^function! Tex_RelPath(explfilename,texfilename)$/;"	f
Tex_RemoveElementMenus	ftplugin/latex-suite/elementmacros.vim	/^	function! Tex_RemoveElementMenus()$/;"	f
Tex_RemoveTempFiles	ftplugin/latex-suite/compiler.vim	/^function! Tex_RemoveTempFiles()$/;"	f
Tex_ResetIncrementNumber	ftplugin/latex-suite/main.vim	/^function! Tex_ResetIncrementNumber(val)$/;"	f
Tex_RunLaTeX	ftplugin/latex-suite/compiler.vim	/^function! Tex_RunLaTeX()$/;"	f
Tex_ScanFileForCite	ftplugin/latex-suite/texviewer.vim	/^function! Tex_ScanFileForCite(prefix)$/;"	f
Tex_ScanFileForLabels	ftplugin/latex-suite/texviewer.vim	/^function! Tex_ScanFileForLabels(prefix)$/;"	f
Tex_ScanForPackages	ftplugin/latex-suite/packages.vim	/^function! Tex_ScanForPackages(...)$/;"	f
Tex_SectionMacros	ftplugin/latex-suite/envmacros.vim	/^function! <SID>Tex_SectionMacros(lhs, name)$/;"	f
Tex_SetBracketingMaps	ftplugin/latex-suite/brackets.vim	/^function! <SID>Tex_SetBracketingMaps()$/;"	f
Tex_SetCompilerMaps	ftplugin/latex-suite/compiler.vim	/^function! <SID>Tex_SetCompilerMaps()$/;"	f
Tex_SetFastCommandMaps	ftplugin/latex-suite/envmacros.vim	/^function! Tex_SetFastCommandMaps()$/;"	f
Tex_SetFastEnvironmentMaps	ftplugin/latex-suite/envmacros.vim	/^function! Tex_SetFastEnvironmentMaps()$/;"	f
Tex_SetFoldOptions	ftplugin/latex-suite/folding.vim	/^function! Tex_SetFoldOptions()$/;"	f
Tex_SetItemMaps	ftplugin/latex-suite/envmacros.vim	/^function! Tex_SetItemMaps()$/;"	f
Tex_SetPos	ftplugin/latex-suite/main.vim	/^function! Tex_SetPos(pos)$/;"	f
Tex_SetTeXCompilerTarget	ftplugin/latex-suite/compiler.vim	/^function! Tex_SetTeXCompilerTarget(type, target)$/;"	f
Tex_SetTexViewerMaps	ftplugin/latex-suite/texviewer.vim	/^function! Tex_SetTexViewerMaps()$/;"	f
Tex_SetupBibSyntax	ftplugin/latex-suite/texviewer.vim	/^function! Tex_SetupBibSyntax()$/;"	f
Tex_SetupCWindow	ftplugin/latex-suite/texviewer.vim	/^function! s:Tex_SetupCWindow(...)$/;"	f
Tex_SetupErrorWindow	ftplugin/latex-suite/compiler.vim	/^function! Tex_SetupErrorWindow()$/;"	f
Tex_SetupFileCompletion	ftplugin/latex-suite/texviewer.vim	/^function! Tex_SetupFileCompletion(accept, reject, ext, dir, root)$/;"	f
Tex_SetupOutlineSyntax	ftplugin/latex-suite/texviewer.vim	/^function! Tex_SetupOutlineSyntax()$/;"	f
Tex_ShowVariableValue	ftplugin/latex-suite/main.vim	/^function! Tex_ShowVariableValue(...)$/;"	f
Tex_SpecialMacros	ftplugin/latex-suite/envmacros.vim	/^function! <SID>Tex_SpecialMacros(lhs, submenu, name, irhs, ...)$/;"	f
Tex_StartCiteCompletion	ftplugin/latex-suite/texviewer.vim	/^function! Tex_StartCiteCompletion()$/;"	f
Tex_StartOutlineCompletion	ftplugin/latex-suite/texviewer.vim	/^function! Tex_StartOutlineCompletion()$/;"	f
Tex_Strntok	ftplugin/latex-suite/main.vim	/^fun! Tex_Strntok(s, tok, n)$/;"	f
Tex_SwitchToInsertMode	ftplugin/latex-suite/texviewer.vim	/^function! Tex_SwitchToInsertMode()$/;"	f
Tex_SyncPreviewWindow	ftplugin/latex-suite/texviewer.vim	/^function! s:Tex_SyncPreviewWindow()$/;"	f
Tex_UpdatePreviewWindow	ftplugin/latex-suite/compiler.vim	/^function! Tex_UpdatePreviewWindow(filename)$/;"	f
Tex_VariousMenus	ftplugin/latex-suite/elementmacros.vim	/^	function! <SID>Tex_VariousMenus(desc, lhs)$/;"	f
Tex_Version	ftplugin/latex-suite/version.vim	/^function! Tex_Version()$/;"	f
Tex_ViewLaTeX	ftplugin/latex-suite/compiler.vim	/^function! Tex_ViewLaTeX()$/;"	f
Tex_VisSecAdv	ftplugin/latex-suite/wizardfuncs.vim	/^function! Tex_VisSecAdv(section)$/;"	f
Tex_description	ftplugin/latex-suite/envmacros.vim	/^function! Tex_description(env)$/;"	f
Tex_document	ftplugin/latex-suite/envmacros.vim	/^function! Tex_document(env)$/;"	f
Tex_eqnarray	ftplugin/latex-suite/envmacros.vim	/^function! Tex_eqnarray(env)$/;"	f
Tex_figure	ftplugin/latex-suite/envmacros.vim	/^function! Tex_figure(env)$/;"	f
Tex_itemize	ftplugin/latex-suite/envmacros.vim	/^function! Tex_itemize(env)$/;"	f
Tex_list	ftplugin/latex-suite/envmacros.vim	/^function! Tex_list(env)$/;"	f
Tex_minipage	ftplugin/latex-suite/envmacros.vim	/^function! Tex_minipage(env)$/;"	f
Tex_pack	ftplugin/latex-suite/packages.vim	/^function! Tex_pack(pack)$/;"	f
Tex_pack_check	ftplugin/latex-suite/packages.vim	/^function! Tex_pack_check(package)$/;"	f
Tex_pack_one	ftplugin/latex-suite/packages.vim	/^function! Tex_pack_one(...)$/;"	f
Tex_pack_supp_menu	ftplugin/latex-suite/packages.vim	/^function! Tex_pack_supp_menu()$/;"	f
Tex_pack_uncheck	ftplugin/latex-suite/packages.vim	/^function! Tex_pack_uncheck(package)$/;"	f
Tex_pack_updateall	ftplugin/latex-suite/packages.vim	/^function! Tex_pack_updateall(force)$/;"	f
Tex_package_from_line	ftplugin/latex-suite/envmacros.vim	/^	function! Tex_package_from_line()$/;"	f
Tex_section	ftplugin/latex-suite/wizardfuncs.vim	/^function! Tex_section(...) "{{{$/;"	f
Tex_section_adv	ftplugin/latex-suite/wizardfuncs.vim	/^function! Tex_section_adv(...) "{{{$/;"	f
Tex_section_call	ftplugin/latex-suite/wizardfuncs.vim	/^function! s:Tex_section_call(section_name) "{{{$/;"	f
Tex_section_curr_rel_value	ftplugin/latex-suite/wizardfuncs.vim	/^function! s:Tex_section_curr_rel_value(sec_arg, last_section_value) "{{{$/;"	f
Tex_section_curr_value	ftplugin/latex-suite/wizardfuncs.vim	/^function! s:Tex_section_curr_value(sec_arg) "{{{$/;"	f
Tex_section_detection	ftplugin/latex-suite/wizardfuncs.vim	/^function! s:Tex_section_detection() "{{{$/;"	f
Tex_section_name	ftplugin/latex-suite/wizardfuncs.vim	/^function! s:Tex_section_name(section_value) "{{{$/;"	f
Tex_shortcuts	ftplugin/latex-suite/wizardfuncs.vim	/^function! Tex_shortcuts(...)$/;"	f
Tex_table	ftplugin/latex-suite/envmacros.vim	/^function! Tex_table(env)$/;"	f
Tex_tabular	ftplugin/latex-suite/envmacros.vim	/^function! Tex_tabular(env)$/;"	f
Tex_thebibliography	ftplugin/latex-suite/envmacros.vim	/^function! Tex_thebibliography(env)$/;"	f
Texplore	plugin/netrwPlugin.vim	/^com! -nargs=* -bar       -count=0 -complete=dir	Texplore	call netrw#Explore(<count>,0,6        ,<q-args>)$/;"	c
Text2Html	plugin/ScreenShot.vim	/^command! -range=% Text2Html     :call Text2Html(<line1>,<line2>)$/;"	c
Text2Html	plugin/ScreenShot.vim	/^function! Text2Html(line1,line2)$/;"	f
TextWidth	menu.vim	/^fun! s:TextWidth()$/;"	f
Tlist	plugin/taglist.vim	/^    command! -nargs=0 -bar Tlist TlistToggle$/;"	c
TlistAddFiles	plugin/taglist.vim	/^    command! -nargs=+ -complete=file TlistAddFiles$/;"	c
TlistAddFilesRecursive	plugin/taglist.vim	/^    command! -nargs=+ -complete=dir TlistAddFilesRecursive$/;"	c
TlistClose	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistClose call s:Tlist_Window_Close()$/;"	c
TlistDebug	plugin/taglist.vim	/^    command! -nargs=? -complete=file -bar TlistDebug$/;"	c
TlistHighlightTag	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistHighlightTag call s:Tlist_Window_Highlight_Tag($/;"	c
TlistLock	plugin/taglist.vim	/^    command! -bar TlistLock let Tlist_Auto_Update=0$/;"	c
TlistMessages	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistMessages call s:Tlist_Debug_Show()$/;"	c
TlistOpen	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistOpen call s:Tlist_Window_Open()$/;"	c
TlistSessionLoad	plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionLoad$/;"	c
TlistSessionSave	plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionSave$/;"	c
TlistShowPrototype	plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowPrototype$/;"	c
TlistShowTag	plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowTag$/;"	c
TlistSync	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistSync TlistHighlightTag$/;"	c
TlistToggle	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistToggle call s:Tlist_Window_Toggle()$/;"	c
TlistUndebug	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUndebug  call s:Tlist_Debug_Disable()$/;"	c
TlistUnlock	plugin/taglist.vim	/^    command! -bar TlistUnlock let Tlist_Auto_Update=1$/;"	c
TlistUpdate	plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUpdate call s:Tlist_Update_Current_File()$/;"	c
Tlist_Add_Files	plugin/taglist.vim	/^function! s:Tlist_Add_Files(...)$/;"	f
Tlist_Add_Files_Recursive	plugin/taglist.vim	/^function! s:Tlist_Add_Files_Recursive(dir, ...)$/;"	f
Tlist_Auto_Highlight_Tag	plugin/taglist.vim	/^        let Tlist_Auto_Highlight_Tag = 1$/;"	v
Tlist_Auto_Open	plugin/taglist.vim	/^        let Tlist_Auto_Open = 0$/;"	v
Tlist_Auto_Update	plugin/taglist.vim	/^        let Tlist_Auto_Update = 1$/;"	v
Tlist_Ballon_Expr	plugin/taglist.vim	/^function! Tlist_Ballon_Expr()$/;"	f
Tlist_Buffer_Removed	plugin/taglist.vim	/^function! s:Tlist_Buffer_Removed(filename)$/;"	f
Tlist_Change_Sort	plugin/taglist.vim	/^function! s:Tlist_Change_Sort(caller, action, sort_type)$/;"	f
Tlist_Close_On_Select	plugin/taglist.vim	/^        let Tlist_Close_On_Select = 0$/;"	v
Tlist_Compact_Format	plugin/taglist.vim	/^        let Tlist_Compact_Format = 0$/;"	v
Tlist_Ctags_Cmd	ftplugin/latex-suite/main.vim	/^		let Tlist_Ctags_Cmd = s:tex_ctags ." --langdef=tex --langmap=tex:.tex.ltx.latex"$/;"	v
Tlist_Ctags_Cmd	ftplugin/txt.vim	/^let Tlist_Ctags_Cmd = TBrowser_Ctags_Cmd . s:TBrowser_Config$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags'$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags.exe'$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exctags'$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exuberant-ctags'$/;"	v
Tlist_Ctags_Cmd	plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'tags'$/;"	v
Tlist_Debug_Disable	plugin/taglist.vim	/^function! s:Tlist_Debug_Disable(...)$/;"	f
Tlist_Debug_Enable	plugin/taglist.vim	/^function! s:Tlist_Debug_Enable(...)$/;"	f
Tlist_Debug_Show	plugin/taglist.vim	/^function! s:Tlist_Debug_Show()$/;"	f
Tlist_Detect_Filetype	plugin/taglist.vim	/^function! s:Tlist_Detect_Filetype(fname)$/;"	f
Tlist_Discard_FileInfo	plugin/taglist.vim	/^function! s:Tlist_Discard_FileInfo(fidx)$/;"	f
Tlist_Discard_TagInfo	plugin/taglist.vim	/^function! s:Tlist_Discard_TagInfo(fidx)$/;"	f
Tlist_Display_Prototype	plugin/taglist.vim	/^        let Tlist_Display_Prototype = 0$/;"	v
Tlist_Display_Tag_Scope	plugin/taglist.vim	/^        let Tlist_Display_Tag_Scope = 1$/;"	v
Tlist_Enable_Fold_Column	plugin/taglist.vim	/^        let Tlist_Enable_Fold_Column = 1$/;"	v
Tlist_Exe_Cmd_No_Acmds	plugin/taglist.vim	/^function! s:Tlist_Exe_Cmd_No_Acmds(cmd)$/;"	f
Tlist_Exit_OnlyWindow	plugin/taglist.vim	/^        let Tlist_Exit_OnlyWindow = 0$/;"	v
Tlist_Extract_Tag_Scope	plugin/taglist.vim	/^function! s:Tlist_Extract_Tag_Scope(tag_line)$/;"	f
Tlist_Extract_Tagtype	plugin/taglist.vim	/^function! s:Tlist_Extract_Tagtype(tag_line)$/;"	f
Tlist_FileType_Init	plugin/taglist.vim	/^function! s:Tlist_FileType_Init(ftype)$/;"	f
Tlist_File_Fold_Auto_Close	plugin/taglist.vim	/^        let Tlist_File_Fold_Auto_Close = 0$/;"	v
Tlist_Find_Nearest_Tag_Idx	plugin/taglist.vim	/^function! s:Tlist_Find_Nearest_Tag_Idx(fidx, linenum)$/;"	f
Tlist_GainFocus_On_ToggleOpen	plugin/taglist.vim	/^        let Tlist_GainFocus_On_ToggleOpen = 0$/;"	v
Tlist_Get_Buffer_Filetype	plugin/taglist.vim	/^function! s:Tlist_Get_Buffer_Filetype(bnum)$/;"	f
Tlist_Get_File_Index	plugin/taglist.vim	/^function! s:Tlist_Get_File_Index(fname)$/;"	f
Tlist_Get_Tag_Linenum	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Linenum(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Prototype(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype_By_Line	plugin/taglist.vim	/^function! Tlist_Get_Tag_Prototype_By_Line(...)$/;"	f
Tlist_Get_Tag_SearchPat	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_SearchPat(fidx, tidx)$/;"	f
Tlist_Get_Tag_Type_By_Tag	plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Type_By_Tag(fidx, tidx)$/;"	f
Tlist_Get_Tagname_By_Line	plugin/taglist.vim	/^function! Tlist_Get_Tagname_By_Line(...)$/;"	f
Tlist_Highlight_Tag_On_BufEnter	plugin/taglist.vim	/^        let Tlist_Highlight_Tag_On_BufEnter = 1$/;"	v
Tlist_Inc_Winwidth	plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 0$/;"	v
Tlist_Inc_Winwidth	plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 1$/;"	v
Tlist_Init_File	plugin/taglist.vim	/^function! s:Tlist_Init_File(filename, ftype)$/;"	f
Tlist_Log_Msg	plugin/taglist.vim	/^function! s:Tlist_Log_Msg(msg)$/;"	f
Tlist_Max_Submenu_Items	plugin/taglist.vim	/^        let Tlist_Max_Submenu_Items = 20$/;"	v
Tlist_Max_Tag_Length	plugin/taglist.vim	/^        let Tlist_Max_Tag_Length = 10$/;"	v
Tlist_Menu_Add_Base_Menu	plugin/taglist.vim	/^function! s:Tlist_Menu_Add_Base_Menu()$/;"	f
Tlist_Menu_File_Refresh	plugin/taglist.vim	/^function! s:Tlist_Menu_File_Refresh(fidx)$/;"	f
Tlist_Menu_Get_Tag_Type_Cmd	plugin/taglist.vim	/^function! s:Tlist_Menu_Get_Tag_Type_Cmd(fidx, ftype, add_ttype_name, ttype_idx)$/;"	f
Tlist_Menu_Init	plugin/taglist.vim	/^function! s:Tlist_Menu_Init()$/;"	f
Tlist_Menu_Jump_To_Tag	plugin/taglist.vim	/^function! s:Tlist_Menu_Jump_To_Tag(tidx)$/;"	f
Tlist_Menu_Refresh	plugin/taglist.vim	/^function! s:Tlist_Menu_Refresh()$/;"	f
Tlist_Menu_Remove_File	plugin/taglist.vim	/^function! s:Tlist_Menu_Remove_File()$/;"	f
Tlist_Menu_Update_File	plugin/taglist.vim	/^function! s:Tlist_Menu_Update_File(clear_menu)$/;"	f
Tlist_Parse_Tagline	plugin/taglist.vim	/^function! s:Tlist_Parse_Tagline(tag_line)$/;"	f
Tlist_Post_Close_Cleanup	plugin/taglist.vim	/^function! s:Tlist_Post_Close_Cleanup()$/;"	f
Tlist_Process_Dir	plugin/taglist.vim	/^function! s:Tlist_Process_Dir(dir_name, pat)$/;"	f
Tlist_Process_File	plugin/taglist.vim	/^function! s:Tlist_Process_File(filename, ftype)$/;"	f
Tlist_Process_File_Always	plugin/taglist.vim	/^        let Tlist_Process_File_Always = 0$/;"	v
Tlist_Process_Filelist	plugin/taglist.vim	/^function! s:Tlist_Process_Filelist(file_names)$/;"	f
Tlist_Refresh	plugin/taglist.vim	/^function! s:Tlist_Refresh()$/;"	f
Tlist_Refresh_Folds	plugin/taglist.vim	/^function! s:Tlist_Refresh_Folds()$/;"	f
Tlist_Remove_File	plugin/taglist.vim	/^function! s:Tlist_Remove_File(file_idx, user_request)$/;"	f
Tlist_Session_Load	plugin/taglist.vim	/^function! s:Tlist_Session_Load(...)$/;"	f
Tlist_Session_Save	plugin/taglist.vim	/^function! s:Tlist_Session_Save(...)$/;"	f
Tlist_Set_App	plugin/taglist.vim	/^function! Tlist_Set_App(name)$/;"	f
Tlist_Show_Menu	plugin/taglist.vim	/^        let Tlist_Show_Menu = 0$/;"	v
Tlist_Show_One_File	plugin/taglist.vim	/^        let Tlist_Show_One_File = 0$/;"	v
Tlist_Skip_File	plugin/taglist.vim	/^function! s:Tlist_Skip_File(filename, ftype)$/;"	f
Tlist_Sort_Type	plugin/taglist.vim	/^        let Tlist_Sort_Type = 'order'$/;"	v
Tlist_Update_Current_File	plugin/taglist.vim	/^function! s:Tlist_Update_Current_File()$/;"	f
Tlist_Update_File	plugin/taglist.vim	/^function! Tlist_Update_File(filename, ftype)$/;"	f
Tlist_Update_Remove_List	plugin/taglist.vim	/^function! s:Tlist_Update_Remove_List(filename, add)$/;"	f
Tlist_Use_Horiz_Window	plugin/taglist.vim	/^        let Tlist_Use_Horiz_Window = 0$/;"	v
Tlist_Use_Right_Window	plugin/taglist.vim	/^        let Tlist_Use_Right_Window = 0$/;"	v
Tlist_Use_SingleClick	plugin/taglist.vim	/^        let Tlist_Use_SingleClick = 0$/;"	v
Tlist_User_Removed_File	plugin/taglist.vim	/^function! s:Tlist_User_Removed_File(filename)$/;"	f
Tlist_Vim_Session_Load	plugin/taglist.vim	/^function! s:Tlist_Vim_Session_Load()$/;"	f
Tlist_Warning_Msg	plugin/taglist.vim	/^function! s:Tlist_Warning_Msg(msg)$/;"	f
Tlist_WinHeight	plugin/taglist.vim	/^        let Tlist_WinHeight = 10$/;"	v
Tlist_WinWidth	plugin/taglist.vim	/^        let Tlist_WinWidth = 30$/;"	v
Tlist_Window_Check_Auto_Open	plugin/taglist.vim	/^function! s:Tlist_Window_Check_Auto_Open()$/;"	f
Tlist_Window_Check_Width	plugin/taglist.vim	/^function! s:Tlist_Window_Check_Width()$/;"	f
Tlist_Window_Close	plugin/taglist.vim	/^function! s:Tlist_Window_Close()$/;"	f
Tlist_Window_Create	plugin/taglist.vim	/^function! s:Tlist_Window_Create()$/;"	f
Tlist_Window_Display_Help	plugin/taglist.vim	/^function! s:Tlist_Window_Display_Help()$/;"	f
Tlist_Window_Exit_Only_Window	plugin/taglist.vim	/^function! s:Tlist_Window_Exit_Only_Window()$/;"	f
Tlist_Window_Get_File_Index_By_Linenum	plugin/taglist.vim	/^function! s:Tlist_Window_Get_File_Index_By_Linenum(lnum)$/;"	f
Tlist_Window_Get_Tag_Index	plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Index(fidx, lnum)$/;"	f
Tlist_Window_Get_Tag_Type_By_Linenum	plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Type_By_Linenum(fidx, lnum)$/;"	f
Tlist_Window_Goto_Window	plugin/taglist.vim	/^function! s:Tlist_Window_Goto_Window()$/;"	f
Tlist_Window_Highlight_Line	plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Line()$/;"	f
Tlist_Window_Highlight_Tag	plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Tag(filename, cur_lnum, cntx, center)$/;"	f
Tlist_Window_Init	plugin/taglist.vim	/^function! s:Tlist_Window_Init()$/;"	f
Tlist_Window_Jump_To_Tag	plugin/taglist.vim	/^function! s:Tlist_Window_Jump_To_Tag(win_ctrl)$/;"	f
Tlist_Window_Mark_File_Window	plugin/taglist.vim	/^function! s:Tlist_Window_Mark_File_Window()$/;"	f
Tlist_Window_Move_To_File	plugin/taglist.vim	/^function! s:Tlist_Window_Move_To_File(dir)$/;"	f
Tlist_Window_Open	plugin/taglist.vim	/^function! s:Tlist_Window_Open()$/;"	f
Tlist_Window_Open_File	plugin/taglist.vim	/^function! s:Tlist_Window_Open_File(win_ctrl, filename, tagpat)$/;"	f
Tlist_Window_Open_File_Fold	plugin/taglist.vim	/^function! s:Tlist_Window_Open_File_Fold(acmd_bufnr)$/;"	f
Tlist_Window_Refresh	plugin/taglist.vim	/^function! s:Tlist_Window_Refresh()$/;"	f
Tlist_Window_Refresh_File	plugin/taglist.vim	/^function! s:Tlist_Window_Refresh_File(filename, ftype)$/;"	f
Tlist_Window_Remove_File_From_Display	plugin/taglist.vim	/^function! s:Tlist_Window_Remove_File_From_Display(fidx)$/;"	f
Tlist_Window_Show_Info	plugin/taglist.vim	/^function! s:Tlist_Window_Show_Info()$/;"	f
Tlist_Window_Toggle	plugin/taglist.vim	/^function! s:Tlist_Window_Toggle()$/;"	f
Tlist_Window_Toggle_Help_Text	plugin/taglist.vim	/^function! s:Tlist_Window_Toggle_Help_Text()$/;"	f
Tlist_Window_Update_File	plugin/taglist.vim	/^function! s:Tlist_Window_Update_File()$/;"	f
Tlist_Window_Update_Line_Offsets	plugin/taglist.vim	/^function! s:Tlist_Window_Update_Line_Offsets(start_idx, increment, offset)$/;"	f
Tlist_Window_Zoom	plugin/taglist.vim	/^function! s:Tlist_Window_Zoom()$/;"	f
ToHtml	plugin/ScreenShot.vim	/^function! ToHtml()$/;"	f
ToggleGuiOption	menu.vim	/^fun! s:ToggleGuiOption(option)$/;"	f
ToolBar.Find	ftplugin/html/HTML.vim	/^    vmenu       ToolBar.Find    y:promptfind <C-R>"<CR>$/;"	m
ToolBar.Paste		<C-R>+	menu.vim	/^  cnoremenu	 ToolBar.Paste		<C-R>+$/;"	m
ToolBar.Print		:hardcopy<CR>	menu.vim	/^    vnoremenu ToolBar.Print		:hardcopy<CR>$/;"	m
ToolBar.Print		:w	menu.vim	/^    vnoremenu ToolBar.Print		:w !lpr<CR>$/;"	m
ToolBar.Replace		y:promptrepl	menu.vim	/^    vnoremenu ToolBar.Replace		y:promptrepl <C-R>=<SID>FixFText()<CR><CR>$/;"	m
ToolBar.Replace	ftplugin/html/HTML.vim	/^    vmenu       ToolBar.Replace :s\/$/;"	m
ToolBar.Replace	ftplugin/html/HTML.vim	/^    vmenu       ToolBar.Replace y:promptrepl <C-R>"<CR>$/;"	m
TreeDirNode.AbsoluteTreeRoot	plugin/NERD_tree.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	plugin/NERD_tree.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	plugin/NERD_tree.vim	/^function! s:TreeDirNode.New(path)$/;"	f
TreeDirNode._initChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openRecursively2	plugin/NERD_tree.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/;"	f
TreeDirNode.activate	plugin/NERD_tree.vim	/^function! s:TreeDirNode.activate(forceKeepWinOpen)$/;"	f
TreeDirNode.addChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	plugin/NERD_tree.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.findNode	plugin/NERD_tree.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getVisibleChildCount	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.open	plugin/NERD_tree.vim	/^function! s:TreeDirNode.open()$/;"	f
TreeDirNode.openExplorer	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openInNewTab	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode.openRecursively	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	plugin/NERD_tree.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.removeChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.reveal	plugin/NERD_tree.vim	/^function! s:TreeDirNode.reveal(path)$/;"	f
TreeDirNode.sortChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	plugin/NERD_tree.vim	/^function! s:TreeDirNode.toggleOpen()$/;"	f
TreeDirNode.transplantChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootForTab	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode.GetRootLineNum	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootLineNum()$/;"	f
TreeFileNode.GetSelected	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	plugin/NERD_tree.vim	/^function! s:TreeFileNode.New(path)$/;"	f
TreeFileNode._renderToString	plugin/NERD_tree.vim	/^function! s:TreeFileNode._renderToString(depth, drawText, vertMap, isLastChild)$/;"	f
TreeFileNode.activate	plugin/NERD_tree.vim	/^function! s:TreeFileNode.activate(forceKeepWinOpen)$/;"	f
TreeFileNode.bookmark	plugin/NERD_tree.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	plugin/NERD_tree.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBoomarks	plugin/NERD_tree.vim	/^function! s:TreeFileNode.clearBoomarks()$/;"	f
TreeFileNode.copy	plugin/NERD_tree.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	plugin/NERD_tree.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.displayString	plugin/NERD_tree.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode.equals	plugin/NERD_tree.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findOpenDirSiblingWithVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode.findSibling	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getLineNum	plugin/NERD_tree.vim	/^function! s:TreeFileNode.getLineNum()$/;"	f
TreeFileNode.isRoot	plugin/NERD_tree.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	plugin/NERD_tree.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.makeRoot	plugin/NERD_tree.vim	/^function! s:TreeFileNode.makeRoot()$/;"	f
TreeFileNode.open	plugin/NERD_tree.vim	/^function! s:TreeFileNode.open()$/;"	f
TreeFileNode.openInNewTab	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode.openSplit	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	plugin/NERD_tree.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	plugin/NERD_tree.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.rename	plugin/NERD_tree.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	plugin/NERD_tree.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TreeListMove	autoload/netrw.vim	/^fun! s:TreeListMove(dir)$/;"	f
TruncateArray	plugin/ScreenShot.vim	/^function! s:TruncateArray(array,maxwid,left,invischar)$/;"	f
Tshortcuts	ftplugin/latex-suite/wizardfuncs.vim	/^command! -nargs=? Tshortcuts call Tex_shortcuts(<f-args>)<CR>$/;"	c
TxtBrowserSearch	plugin/txtbrowser.vim	/^function! s:TxtBrowserSearch (...) range$/;"	f
TxtBrowserWord	plugin/txtbrowser.vim	/^function! s:TxtBrowserWord (...) range$/;"	f
TxtBrowser_Dict_Url	plugin/txtbrowser.vim	/^    let TxtBrowser_Dict_Url = 'http:\/\/www.google.cn\/dictionary?aq=f&langpair=en|zh-CN&q=text&hl=zh-CN'$/;"	v
TxtBrowser_Title_Level	ftplugin/txt.vim	/^	let TxtBrowser_Title_Level = 3$/;"	v
TxtbrowserGoto	plugin/txtbrowser.vim	/^function! s:TxtbrowserGoto(...)$/;"	f
TxtbrowserOpenUrl	plugin/txtbrowser.vim	/^function! s:TxtbrowserOpenUrl (url)$/;"	f
Txtbrowser_Search_Engine	plugin/txtbrowser.vim	/^    let Txtbrowser_Search_Engine = 'http:\/\/www.google.com\/search?hl=zh-CN&source=hp&q=text&btnG=Google+%E6%90%9C%E7%B4%A2&lr=&aq=f&oq='$/;"	v
U	macros/hanoi/hanoi.vim	/^map U L$/;"	m
USAGE	tools/shtags.pl	/^USAGE: $program [-kvwVx] [-t <file>] <files>$/;"	l
UWAGA	tutor/tutor.pl	/^	 UWAGA:$/;"	l
UWAGA	tutor/tutor.pl	/^  UWAGA: Litera  d  pojawi siê na dole ekranu. Vim czeka na wpisanie  w .$/;"	l
UWAGA	tutor/tutor.pl	/^  UWAGA: Przeczytaj ca³± lekcjê zanim wykonasz jakie¶ polecenia!!!$/;"	l
UWAGA	tutor/tutor.pl	/^UWAGA:  Mno¿nik pomiêdzy operatorem  d  i ruchem dzia³a podobnie do ruchu bez$/;"	l
UWAGA	tutor/tutor.pl	/^UWAGA:  Mo¿esz u¿ywaæ <BS> aby poprawiaæ b³êdy w czasie pisania.$/;"	l
UWAGA	tutor/tutor.pl	/^UWAGA: :q!<ENTER> porzuca wszelkie zmiany jakie zrobi³e¶. W nastêpnych$/;"	l
UWAGA	tutor/tutor.pl	/^UWAGA: Mo¿esz te¿ wczytaæ wyj¶cie zewnêtrznego polecenia. Na przyk³ad$/;"	l
UWAGA	tutor/tutor.pl	/^UWAGA: Mo¿esz te¿ zobaczyæ pozycjê kursora w prawym, dolnym rogu ekranu.$/;"	l
UWAGA	tutor/tutor.pl	/^UWAGA: Pamiêtaj by uczyæ siê æwicz±c, a nie pamiêciowo.$/;"	l
UWAGA	tutor/tutor.pl	/^UWAGA: Po wykonaniu kroku 2. zobaczysz tekst z Lekcji 5.3. Potem przejd¼$/;"	l
UWAGA	tutor/tutor.pl	/^UWAGA: Tryb Replace jest jak tryb Insert, ale ka¿dy znak usuwa istniej±cy$/;"	l
UWAGA	tutor/tutor.pl	/^UWAGA: Ucz siê przez æwiczenie, nie wkuwanie.$/;"	l
UWAGA	tutor/tutor.pl	/^UWAGA: Uzupe³nianie dzia³a dla wielu poleceñ. Spróbuj wcisn±æ CTRL-D i <TAB>.$/;"	l
UWAGA	tutor/tutor.pl	/^UWAGA: Wci¶niêcie  v  zaczyna tryb Wizualny. Mo¿esz poruszaæ kursorem by$/;"	l
UWAGA	tutor/tutor.pl	/^UWAGA: Wci¶niêcie <ESC> przeniesie Ciê z powrotem do trybu Normal$/;"	l
UWAGA	tutor/tutor.pl	/^UWAGA: Wpisanie tylko ruchu w trybie Normal bez operatora przeniesie kursor$/;"	l
UnEsc	plugin/NERD_commenter.vim	/^function s:UnEsc(str, escChar)$/;"	f
UncommentLineNormal	plugin/NERD_commenter.vim	/^function s:UncommentLineNormal(line)$/;"	f
UncommentLines	plugin/NERD_commenter.vim	/^function s:UncommentLines(topLine, bottomLine)$/;"	f
UncommentLinesNormal	plugin/NERD_commenter.vim	/^function s:UncommentLinesNormal(topline, bottomline)$/;"	f
UncommentLinesSexy	plugin/NERD_commenter.vim	/^function s:UncommentLinesSexy(topline, bottomline)$/;"	f
Unfinalise	ftplugin/debchangelog.vim	/^function Unfinalise()$/;"	f
UnfinaliseMenu	ftplugin/debchangelog.vim	/^function <SID>UnfinaliseMenu()$/;"	f
UntabbedCol	plugin/NERD_commenter.vim	/^function s:UntabbedCol(line, col)$/;"	f
Update	optwin.vim	/^fun! <SID>Update(lnum, line, local, thiswin)$/;"	f
UpdateBuffersMenu	autoload/netrw.vim	/^fun! s:UpdateBuffersMenu()$/;"	f
Urgency	ftplugin/debchangelog.vim	/^function Urgency(urg)$/;"	f
Usage	tools/efm_perl.pl	/^Usage:$/;"	l
UseAppleScript	browser_launcher.vim	/^	function! s:UseAppleScript() " {{{$/;"	f
UseBufWinVars	autoload/netrw.vim	/^fun! s:UseBufWinVars()$/;"	f
UseVimball	plugin/vimballPlugin.vim	/^com! -na=? -complete=dir  UseVimball  call vimball#Vimball(1,<f-args>)$/;"	c
Uwaga	tutor/tutor.pl	/^Uwaga:  'b³ond' to nie jest metoda by przeliterowaæ b³±d; 'b³ond' to b³±d.$/;"	l
Uwaga	tutor/tutor.pl	/^Uwaga:  Kiedy szukanie osi±gnie koniec pliku bêdzie kontynuowa³o od pocz±tku$/;"	l
Uwaga	tutor/tutor.pl	/^Uwaga:  W ten sposób mo¿na wykonaæ wszystkie polecenia pow³oki.$/;"	l
Uwaga	tutor/tutor.pl	/^Uwaga:  Wszystkie polecenia  :  musz± byæ zakoñczone <ENTER>.$/;"	l
Uwaga	tutor/tutor.pl	/^Uwaga:  a ,  i  oraz  A  prowadz± do trybu Insert, jedyn± ró¿nic± jest miejsce$/;"	l
Uwaga	tutor/tutor.pl	/^Uwaga: Aby ignorowaæ wielko¶æ liter dla jednego wyszukiwania: \/ignore\\c<ENTER>$/;"	l
Uwaga	tutor/tutor.pl	/^Uwaga: Aby usun±æ pod¶wietlanie dopasowañ wpisz:   :nohlsearch$/;"	l
Uwaga	tutor/tutor.pl	/^Uwaga: Je¶li nie jeste¶ pewien czego¶ co wpisa³e¶, wci¶nij <ESC> by wróciæ do$/;"	l
Uwaga	tutor/tutor.pl	/^Uwaga: Klawisze kursora tak¿e powinny dzia³aæ, ale u¿ywaj±c  hjkl  bêdziesz$/;"	l
Uwaga	tutor/tutor.pl	/^Uwaga: Ta funkcja jest bardzo u¿yteczna w debuggowaniu programu$/;"	l
Uwaga	tutor/tutor.pl	/^Uwaga: Zauwa¿, ¿e gdyby¶ teraz wyszed³ z Vima, a nastêpnie wszed³ ponownie$/;"	l
Uwaga	tutor/tutor.pl	/^Uwaga: mo¿esz u¿yæ  y  jako operatora;  yw  kopiuje jeden wyraz.$/;"	l
V	macros/hanoi/hanoi.vim	/^map V Go\/$/;"	m
V	macros/life/life.vim	/^map V R$/;"	m
VCSAdd	plugin/vcscommand.vim	/^com! -nargs=* VCSAdd call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Add', [<f-args>]))$/;"	c
VCSAnnotate	plugin/vcscommand.vim	/^com! -nargs=* -bang VCSAnnotate call s:VCSAnnotate(<q-bang>, <f-args>)$/;"	c
VCSAnnotate	plugin/vcscommand.vim	/^function! s:VCSAnnotate(bang, ...)$/;"	f
VCSBlame	plugin/vcscommand.vim	/^com! -nargs=* -bang VCSBlame call s:VCSAnnotate(<q-bang>, <f-args>)$/;"	c
VCSCommand	plugin/vcscommand.vim	/^augroup VCSCommand$/;"	a
VCSCommandChangeToCurrentFileDir	plugin/vcscommand.vim	/^function! VCSCommandChangeToCurrentFileDir(fileName)$/;"	f
VCSCommandChdir	plugin/vcscommand.vim	/^function! VCSCommandChdir(directory)$/;"	f
VCSCommandCommit	plugin/vcscommand.vim	/^augroup VCSCommandCommit$/;"	a
VCSCommandDisableBufferSetup	plugin/vcscommand.vim	/^com! VCSCommandDisableBufferSetup call VCSCommandDisableBufferSetup()$/;"	c
VCSCommandDisableBufferSetup	plugin/vcscommand.vim	/^function! VCSCommandDisableBufferSetup()$/;"	f
VCSCommandDoCommand	plugin/vcscommand.vim	/^function! VCSCommandDoCommand(cmd, cmdName, statusText, options)$/;"	f
VCSCommandEnableBufferSetup	plugin/vcscommand.vim	/^com! VCSCommandEnableBufferSetup call VCSCommandEnableBufferSetup()$/;"	c
VCSCommandEnableBufferSetup	plugin/vcscommand.vim	/^function! VCSCommandEnableBufferSetup()$/;"	f
VCSCommandGetOption	plugin/vcscommand.vim	/^function! VCSCommandGetOption(name, default)$/;"	f
VCSCommandGetOriginalBuffer	plugin/vcscommand.vim	/^function! VCSCommandGetOriginalBuffer(vcsBuffer)$/;"	f
VCSCommandGetStatusLine	plugin/vcscommand.vim	/^function! VCSCommandGetStatusLine()$/;"	f
VCSCommandGetVCSType	plugin/vcscommand.vim	/^function! VCSCommandGetVCSType(buffer)$/;"	f
VCSCommandRegisterModule	plugin/vcscommand.vim	/^function! VCSCommandRegisterModule(name, path, commandMap, mappingMap)$/;"	f
VCSCommandUtility.addMenuItem	plugin/vcscommand.vim	/^function! s:VCSCommandUtility.addMenuItem(shortcut, command)$/;"	f
VCSCommandUtility.system	plugin/vcscommand.vim	/^function! s:VCSCommandUtility.system(...)$/;"	f
VCSCommandVIMShutdown	plugin/vcscommand.vim	/^augroup VCSCommandVIMShutdown$/;"	a
VCSCommit	plugin/vcscommand.vim	/^com! -nargs=? -bang VCSCommit call s:VCSCommit(<q-bang>, <q-args>)$/;"	c
VCSCommit	plugin/vcscommand.vim	/^function! s:VCSCommit(bang, message)$/;"	f
VCSDelete	plugin/vcscommand.vim	/^com! -nargs=* VCSDelete call s:ExecuteVCSCommand('Delete', [<f-args>])$/;"	c
VCSDiff	plugin/vcscommand.vim	/^com! -nargs=* VCSDiff call s:VCSDiff(<f-args>)$/;"	c
VCSDiff	plugin/vcscommand.vim	/^function! s:VCSDiff(...)  "{{{2$/;"	f
VCSFinishCommit	plugin/vcscommand.vim	/^function! s:VCSFinishCommit(logMessageList, originalBuffer)$/;"	f
VCSFinishCommitWithBuffer	plugin/vcscommand.vim	/^function! s:VCSFinishCommitWithBuffer()$/;"	f
VCSGotoOriginal	plugin/vcscommand.vim	/^com! -nargs=0 -bang VCSGotoOriginal call s:VCSGotoOriginal(<q-bang>)$/;"	c
VCSGotoOriginal	plugin/vcscommand.vim	/^function! s:VCSGotoOriginal(bang)$/;"	f
VCSInfo	plugin/vcscommand.vim	/^com! -nargs=* VCSInfo call s:ExecuteVCSCommand('Info', [<f-args>])$/;"	c
VCSLock	plugin/vcscommand.vim	/^com! -nargs=* VCSLock call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Lock', [<f-args>]))$/;"	c
VCSLog	plugin/vcscommand.vim	/^com! -nargs=* VCSLog call s:ExecuteVCSCommand('Log', [<f-args>])$/;"	c
VCSReload	plugin/vcscommand.vim	/^com! VCSReload let savedPlugins = s:plugins|let s:plugins = {}|call s:ClearMenu()|unlet! g:loaded_VCSCommand|runtime plugin\/vcscommand.vim|for plugin in values(savedPlugins)|execute 'source' plugin[0]|endfor|unlet savedPlugins$/;"	c
VCSRemove	plugin/vcscommand.vim	/^com! -nargs=* VCSRemove call s:ExecuteVCSCommand('Delete', [<f-args>])$/;"	c
VCSRevert	plugin/vcscommand.vim	/^com! -nargs=0 VCSRevert call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Revert', []))$/;"	c
VCSReview	plugin/vcscommand.vim	/^com! -nargs=? VCSReview call s:VCSReview(<f-args>)$/;"	c
VCSReview	plugin/vcscommand.vim	/^function! s:VCSReview(...)  "{{{2$/;"	f
VCSStatus	plugin/vcscommand.vim	/^com! -nargs=* VCSStatus call s:ExecuteVCSCommand('Status', [<f-args>])$/;"	c
VCSUnlock	plugin/vcscommand.vim	/^com! -nargs=* VCSUnlock call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Unlock', [<f-args>]))$/;"	c
VCSUpdate	plugin/vcscommand.vim	/^com! -nargs=0 VCSUpdate call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Update', []))$/;"	c
VCSVimDiff	plugin/vcscommand.vim	/^com! -nargs=* VCSVimDiff call s:VCSVimDiff(<f-args>)$/;"	c
VCSVimDiff	plugin/vcscommand.vim	/^function! s:VCSVimDiff(...)$/;"	f
VE	plugin/vimExplorer.vim	/^command! -nargs=? -complete=file VE    call VENew('<args>')$/;"	c
VEC	plugin/vimExplorer.vim	/^command! -nargs=0 -complete=file VEC   call VEDestroy()$/;"	c
VEConf	plugin/vimExplorer.vim	/^        let VEConf.externalExplorer = "explorer.exe"$/;"	v
VEConf	plugin/vimExplorer.vim	/^        let VEConf.externalExplorer = "nautilus"$/;"	v
VEConf	plugin/vimExplorer.vim	/^        let VEConf.externalExplorer = g:VEConf_externalExplorer$/;"	v
VEConf	plugin/vimExplorer.vim	/^        let VEConf.filePanelHotkey[i] = g:VEConf_fileHotkey[i]$/;"	v
VEConf	plugin/vimExplorer.vim	/^        let VEConf.treePanelHotkey[i] = g:VEConf_treeHotkey[i]$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.browseHistory = 100$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.browseHistory = g:VEConf_browseHistory$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.favorite = ".ve_favorite"$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.favorite = g:VEConf_favorite$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.fileDeleteConfirm = 1$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.fileDeleteConfirm = g:VEConf_fileDeleteConfirm$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.fileGroupSortDirection = 1$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.fileGroupSortDirection = g:VEConf_fileGroupSortDirection$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.filePanelFilter = ''$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.filePanelFilter = g:VEConf_filePanelFilter$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.filePanelSortType = 0$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.filePanelSortType = g:VEConf_filePanelSortType$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.filePanelSplitLocation = "belowright"$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.filePanelSplitLocation = g:VEConf_filePanelSplitLocation$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.filePanelSplitMode = "vertical"$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.filePanelSplitMode = g:VEConf_filePanelSplitMode$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.filePanelWidth = 40$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.filePanelWidth = g:VEConf_filePanelWidth$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.overWriteExisting = 0$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.overWriteExisting = g:VEConf_overWriteExisting$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.previewSplitLocation = "belowright"$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.previewSplitLocation = g:VEConf_previewSplitLocation$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.showFileSizeInMKB = 1$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.showFileSizeInMKB = g:VEConf_showFileSizeInMKB$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.showFolderStatus = 1$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.showFolderStatus = g:VEConf_showFolderStatus$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.showHiddenFiles = 1$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.showHiddenFiles = VEConf_showHiddenFiles$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.sortCaseSensitive = 0$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.sortCaseSensitive = g:VEConf_sortCaseSensitive$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.systemEncoding = ''$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.systemEncoding = g:VEConf_systemEncoding$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.treePanelSplitLocation = "leftabove"$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.treePanelSplitLocation = g:VEConf_treePanelSplitLocation$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.treePanelSplitMode = "vertical"$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.treePanelSplitMode = g:VEConf_treePanelSplitMode$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.treePanelWidth = 30$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.treePanelWidth = g:VEConf_treePanelWidth$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.treeSortDirection = 1$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.treeSortDirection = g:VEConf_treeSortDirection$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.win32Disks = ["A:","B:","C:","D:","E:","F:","G:","H:",$/;"	v
VEConf	plugin/vimExplorer.vim	/^    let VEConf.win32Disks = g:VEConf_win32Disks$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf = {}$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey = {}$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.addToFavorite   = 'F'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.browseHistory   = 'b'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.clearSelect     = 'Mc'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.closePreview    = 'U'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.cutSelected     = 'sx'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.cutSingle       = 'xx'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.deleteSelected  = 'sd'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.deleteSingle    = 'dd'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.diff2files      = '='$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.favorite        = 'f'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.gotoBackward    = '<c-o>'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.gotoForward     = '<c-i>'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.gotoPath        = '<c-g>'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.gotoPlace       = "'"$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.help            = '?'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.itemClickMouse  = '<2-LeftMouse>'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.itemClicked     = '<cr>'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.markDirectory   = 'Md'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.markExecutable  = 'Me'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.markPlace       = 'm'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.markViaRegexp   = 'Mr'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.markVimFiles    = 'Mv'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.newDirectory    = '+d'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.newFile         = '+f'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.openPreview     = 'u'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.openRenamer     = ';r'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.paste           = 'p'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.quitVE          = 'Q'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.refresh         = 'r'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.rename          = 'R'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.search          = 'g\/'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.showYankList    = 'yl'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.startExplorer   = ';e'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.startShell      = ';c'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.switchPanel     = '<c-tab>'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.tabView         = 'e'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.tabViewMulti    = 'se'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.toUpperDir      = '<bs>'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.toggleHidden    = 'H'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.toggleModes     = 'i'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.toggleSelectDown= '<space>'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.toggleSelectUp  = '<s-space>'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.toggleTreePanel = 't'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.viewMarks       = 'J'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.visualCut       = 'x'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.visualDelete    = 'd'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.visualSelect    = '<space>'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.visualYank      = 'y'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.yankSelected    = 'sy'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.filePanelHotkey.yankSingle      = 'yy'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.treePanelHotkey = {}$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.treePanelHotkey.addToFavorite   = 'F'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.treePanelHotkey.browseHistory   = 'b'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.treePanelHotkey.favorite        = 'f'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.treePanelHotkey.gotoPath        = '<c-g>'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.treePanelHotkey.help            = '?'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.treePanelHotkey.quitVE          = 'Q'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.treePanelHotkey.refresh         = 'r'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.treePanelHotkey.switchPanel     = '<c-tab>'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.treePanelHotkey.toUpperDir      = '<bs>'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.treePanelHotkey.toggleFilePanel = 't'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.treePanelHotkey.toggleNode      = '<cr>'$/;"	v
VEConf	plugin/vimExplorer.vim	/^let VEConf.treePanelHotkey.toggleNodeMouse = '<2-LeftMouse>'$/;"	v
VEConf.filePanelSyntax	plugin/vimExplorer.vim	/^function! VEConf.filePanelSyntax()$/;"	f
VEConf.treePanelSyntax	plugin/vimExplorer.vim	/^function! VEConf.treePanelSyntax()$/;"	f
VEConf_multiFileActions	plugin/vimExplorer.vim	/^    function! VEConf_multiFileActions['test3'](fileList)$/;"	f
VEConf_multiFileActions	plugin/vimExplorer.vim	/^    let VEConf_multiFileActions = {}$/;"	v
VEConf_multiFileActions	plugin/vimExplorer.vim	/^function! VEConf_multiFileActions['openMultiFilesWithVim'](fileList)$/;"	f
VEConf_multiFileHotKeys	plugin/vimExplorer.vim	/^    let VEConf_multiFileHotKeys = {}$/;"	v
VEConf_multiFileHotKeys	plugin/vimExplorer.vim	/^    let VEConf_multiFileHotKeys['test3'] = 'T3'$/;"	v
VEConf_multiFileHotKeys	plugin/vimExplorer.vim	/^let VEConf_multiFileHotKeys['openMultiFilesWithVim'] = VEConf.filePanelHotkey.tabViewMulti$/;"	v
VEConf_normalActions	plugin/vimExplorer.vim	/^    let VEConf_normalActions = {}$/;"	v
VEConf_normalActions	plugin/vimExplorer.vim	/^function! VEConf_normalActions['openRenamer']()$/;"	f
VEConf_normalActions	plugin/vimExplorer.vim	/^function! VEConf_normalActions['startExplorer']()$/;"	f
VEConf_normalActions	plugin/vimExplorer.vim	/^function! VEConf_normalActions['startShell']()$/;"	f
VEConf_normalHotKeys	plugin/vimExplorer.vim	/^    let VEConf_normalHotKeys = {}$/;"	v
VEConf_normalHotKeys	plugin/vimExplorer.vim	/^let VEConf_normalHotKeys['openRenamer'] = VEConf.filePanelHotkey.openRenamer$/;"	v
VEConf_normalHotKeys	plugin/vimExplorer.vim	/^let VEConf_normalHotKeys['startExplorer'] = VEConf.filePanelHotkey.startExplorer$/;"	v
VEConf_normalHotKeys	plugin/vimExplorer.vim	/^let VEConf_normalHotKeys['startShell'] = VEConf.filePanelHotkey.startShell$/;"	v
VEConf_showFolderStatus	plugin/vimExplorer.vim	/^    let VEConf_showFolderStatus = 0$/;"	v
VEConf_singleFileActions	plugin/vimExplorer.vim	/^    function! VEConf_singleFileActions['test2'](path)$/;"	f
VEConf_singleFileActions	plugin/vimExplorer.vim	/^    let VEConf_singleFileActions = {}$/;"	v
VEConf_singleFileActions	plugin/vimExplorer.vim	/^function! VEConf_singleFileActions['openInNewTab'](path)$/;"	f
VEConf_singleFileHotKeys	plugin/vimExplorer.vim	/^    let VEConf_singleFileHotKeys = {}$/;"	v
VEConf_singleFileHotKeys	plugin/vimExplorer.vim	/^    let VEConf_singleFileHotKeys['test2'] = 'T2'$/;"	v
VEConf_singleFileHotKeys	plugin/vimExplorer.vim	/^let VEConf_singleFileHotKeys['openInNewTab'] = VEConf.filePanelHotkey.tabView$/;"	v
VEContainer.showClipboard	plugin/vimExplorer.vim	/^function! s:VEContainer.showClipboard()$/;"	f
VEDestroy	plugin/vimExplorer.vim	/^function! VEDestroy()$/;"	f
VEFilePanel.clearSelect	plugin/vimExplorer.vim	/^function! s:VEFilePanel.clearSelect()$/;"	f
VEFilePanel.createActions	plugin/vimExplorer.vim	/^function! s:VEFilePanel.createActions()$/;"	f
VEFilePanel.createSyntax	plugin/vimExplorer.vim	/^function! s:VEFilePanel.createSyntax()$/;"	f
VEFilePanel.deleteSelectedFiles	plugin/vimExplorer.vim	/^function! s:VEFilePanel.deleteSelectedFiles()$/;"	f
VEFilePanel.deleteSingle	plugin/vimExplorer.vim	/^function! s:VEFilePanel.deleteSingle(line)$/;"	f
VEFilePanel.drawList	plugin/vimExplorer.vim	/^function! s:VEFilePanel.drawList()$/;"	f
VEFilePanel.getFileListFromCwd	plugin/vimExplorer.vim	/^function! s:VEFilePanel.getFileListFromCwd()$/;"	f
VEFilePanel.getPathUnderCursor	plugin/vimExplorer.vim	/^function! s:VEFilePanel.getPathUnderCursor(num)$/;"	f
VEFilePanel.hide	plugin/vimExplorer.vim	/^function! s:VEFilePanel.hide()$/;"	f
VEFilePanel.init	plugin/vimExplorer.vim	/^function! s:VEFilePanel.init(name,path)$/;"	f
VEFilePanel.itemClicked	plugin/vimExplorer.vim	/^function! s:VEFilePanel.itemClicked(line)$/;"	f
VEFilePanel.itemPreview	plugin/vimExplorer.vim	/^function! s:VEFilePanel.itemPreview(line)$/;"	f
VEFilePanel.markExecutable	plugin/vimExplorer.vim	/^function! s:VEFilePanel.markExecutable()$/;"	f
VEFilePanel.markViaRegexp	plugin/vimExplorer.vim	/^function! s:VEFilePanel.markViaRegexp(regexp)$/;"	f
VEFilePanel.multiAction	plugin/vimExplorer.vim	/^function! s:VEFilePanel.multiAction(actionName)$/;"	f
VEFilePanel.newDirectory	plugin/vimExplorer.vim	/^function! s:VEFilePanel.newDirectory()$/;"	f
VEFilePanel.newFile	plugin/vimExplorer.vim	/^function! s:VEFilePanel.newFile()$/;"	f
VEFilePanel.normalAction	plugin/vimExplorer.vim	/^function! s:VEFilePanel.normalAction(actionName)$/;"	f
VEFilePanel.only	plugin/vimExplorer.vim	/^function! s:VEFilePanel.only()$/;"	f
VEFilePanel.paste	plugin/vimExplorer.vim	/^function! s:VEFilePanel.paste()$/;"	f
VEFilePanel.pathChanged	plugin/vimExplorer.vim	/^function! s:VEFilePanel.pathChanged(path)$/;"	f
VEFilePanel.refresh	plugin/vimExplorer.vim	/^function! s:VEFilePanel.refresh()$/;"	f
VEFilePanel.rename	plugin/vimExplorer.vim	/^function! s:VEFilePanel.rename(line)$/;"	f
VEFilePanel.search	plugin/vimExplorer.vim	/^function! s:VEFilePanel.search()$/;"	f
VEFilePanel.setFocus	plugin/vimExplorer.vim	/^function! s:VEFilePanel.setFocus()$/;"	f
VEFilePanel.show	plugin/vimExplorer.vim	/^function! s:VEFilePanel.show()$/;"	f
VEFilePanel.singleFileAction	plugin/vimExplorer.vim	/^function! s:VEFilePanel.singleFileAction(line,actionName)$/;"	f
VEFilePanel.sortByName	plugin/vimExplorer.vim	/^function! s:VEFilePanel.sortByName()$/;"	f
VEFilePanel.sortByTime	plugin/vimExplorer.vim	/^function! s:VEFilePanel.sortByTime()$/;"	f
VEFilePanel.sortByType	plugin/vimExplorer.vim	/^function! s:VEFilePanel.sortByType()$/;"	f
VEFilePanel.statusFileName	plugin/vimExplorer.vim	/^function! s:VEFilePanel.statusFileName()$/;"	f
VEFilePanel.toggleModes	plugin/vimExplorer.vim	/^function! s:VEFilePanel.toggleModes()$/;"	f
VEFilePanel.toggleSelect	plugin/vimExplorer.vim	/^function! s:VEFilePanel.toggleSelect(direction)$/;"	f
VEFilePanel.updateDisplayList	plugin/vimExplorer.vim	/^function! s:VEFilePanel.updateDisplayList()$/;"	f
VEFilePanel.visualDelete	plugin/vimExplorer.vim	/^function! s:VEFilePanel.visualDelete(firstLine,lastLine)$/;"	f
VEFilePanel.visualSelect	plugin/vimExplorer.vim	/^function! s:VEFilePanel.visualSelect(firstLine,lastLine)$/;"	f
VEFilePanel.visualYank	plugin/vimExplorer.vim	/^function! s:VEFilePanel.visualYank(firstLine,lastLine,mode)$/;"	f
VEFilePanel.yankSingle	plugin/vimExplorer.vim	/^function! s:VEFilePanel.yankSingle(mode)$/;"	f
VEFrameWork.destroy	plugin/vimExplorer.vim	/^function! s:VEFrameWork.destroy()$/;"	f
VEFrameWork.gotoBackward	plugin/vimExplorer.vim	/^function! s:VEFrameWork.gotoBackward()$/;"	f
VEFrameWork.gotoForward	plugin/vimExplorer.vim	/^function! s:VEFrameWork.gotoForward()$/;"	f
VEFrameWork.gotoPath	plugin/vimExplorer.vim	/^function! s:VEFrameWork.gotoPath(path)$/;"	f
VEFrameWork.init	plugin/vimExplorer.vim	/^function! s:VEFrameWork.init(name,path)$/;"	f
VEFrameWork.show	plugin/vimExplorer.vim	/^function! s:VEFrameWork.show()$/;"	f
VENew	plugin/vimExplorer.vim	/^function! VENew(path)$/;"	f
VENode.draw	plugin/vimExplorer.vim	/^function! s:VENode.draw(tree,depth)$/;"	f
VENode.init	plugin/vimExplorer.vim	/^function! s:VENode.init(path)$/;"	f
VENode.openPath	plugin/vimExplorer.vim	/^function! s:VENode.openPath(path)$/;"	f
VENode.toggle	plugin/vimExplorer.vim	/^function! s:VENode.toggle(path)$/;"	f
VENode.updateNode	plugin/vimExplorer.vim	/^function! s:VENode.updateNode()$/;"	f
VEPlatform	plugin/vimExplorer.vim	/^let VEPlatform = {}$/;"	v
VEPlatform.cdToPath	plugin/vimExplorer.vim	/^function! VEPlatform.cdToPath(path)$/;"	f
VEPlatform.confirm	plugin/vimExplorer.vim	/^function! VEPlatform.confirm(text,defaultChoice)$/;"	f
VEPlatform.copyMultiFile	plugin/vimExplorer.vim	/^function! VEPlatform.copyMultiFile(fileList,topath)$/;"	f
VEPlatform.copyfile	plugin/vimExplorer.vim	/^function! VEPlatform.copyfile(filename,topath)$/;"	f
VEPlatform.delete	plugin/vimExplorer.vim	/^function! VEPlatform.delete(name)$/;"	f
VEPlatform.deleteMultiple	plugin/vimExplorer.vim	/^function! VEPlatform.deleteMultiple(fileList)$/;"	f
VEPlatform.deleteSingle	plugin/vimExplorer.vim	/^function! VEPlatform.deleteSingle(path)$/;"	f
VEPlatform.escape	plugin/vimExplorer.vim	/^function! VEPlatform.escape(path)$/;"	f
VEPlatform.executable	plugin/vimExplorer.vim	/^function! VEPlatform.executable(filename)$/;"	f
VEPlatform.getHome	plugin/vimExplorer.vim	/^function! VEPlatform.getHome()$/;"	f
VEPlatform.getRoot	plugin/vimExplorer.vim	/^function! VEPlatform.getRoot(rootDict)$/;"	f
VEPlatform.getUpperDir	plugin/vimExplorer.vim	/^function! VEPlatform.getUpperDir(path)$/;"	f
VEPlatform.getcwd	plugin/vimExplorer.vim	/^function! VEPlatform.getcwd()$/;"	f
VEPlatform.globpath	plugin/vimExplorer.vim	/^function! VEPlatform.globpath(path)$/;"	f
VEPlatform.globpath_file	plugin/vimExplorer.vim	/^function! VEPlatform.globpath_file(path)$/;"	f
VEPlatform.haswin32	plugin/vimExplorer.vim	/^function! VEPlatform.haswin32()$/;"	f
VEPlatform.mkdir	plugin/vimExplorer.vim	/^function! VEPlatform.mkdir(path)$/;"	f
VEPlatform.mkfile	plugin/vimExplorer.vim	/^function! VEPlatform.mkfile(filename)$/;"	f
VEPlatform.pathToName	plugin/vimExplorer.vim	/^function! VEPlatform.pathToName(path)$/;"	f
VEPlatform.search	plugin/vimExplorer.vim	/^function! VEPlatform.search(filename,path)$/;"	f
VEPlatform.select	plugin/vimExplorer.vim	/^function! VEPlatform.select(list,title)$/;"	f
VEPlatform.start	plugin/vimExplorer.vim	/^function! VEPlatform.start(path)$/;"	f
VEPlatform.startExplorer	plugin/vimExplorer.vim	/^function! VEPlatform.startExplorer()$/;"	f
VEPlatform.startShell	plugin/vimExplorer.vim	/^function! VEPlatform.startShell()$/;"	f
VEPlatform.system	plugin/vimExplorer.vim	/^function! VEPlatform.system(cmd)$/;"	f
VEPlatform_sortCompare	plugin/vimExplorer.vim	/^function! VEPlatform_sortCompare(t1,t2)$/;"	f
VERSION	tools/efm_perl.pl	/^use constant VERSION => 0.2;$/;"	c
VETree.draw	plugin/vimExplorer.vim	/^function! s:VETree.draw()$/;"	f
VETree.init	plugin/vimExplorer.vim	/^function! s:VETree.init()$/;"	f
VETree.openPath	plugin/vimExplorer.vim	/^function! s:VETree.openPath(path)$/;"	f
VETree.togglePath	plugin/vimExplorer.vim	/^function! s:VETree.togglePath(path)$/;"	f
VETree.update	plugin/vimExplorer.vim	/^function! s:VETree.update(path)$/;"	f
VETreePanel.createActions	plugin/vimExplorer.vim	/^function! s:VETreePanel.createActions()$/;"	f
VETreePanel.createSyntax	plugin/vimExplorer.vim	/^function! s:VETreePanel.createSyntax()$/;"	f
VETreePanel.drawTree	plugin/vimExplorer.vim	/^function! s:VETreePanel.drawTree()$/;"	f
VETreePanel.getPathUnderCursor	plugin/vimExplorer.vim	/^function! s:VETreePanel.getPathUnderCursor(num)$/;"	f
VETreePanel.hide	plugin/vimExplorer.vim	/^function! s:VETreePanel.hide()$/;"	f
VETreePanel.init	plugin/vimExplorer.vim	/^function! s:VETreePanel.init(name,path)$/;"	f
VETreePanel.nodeClicked	plugin/vimExplorer.vim	/^function! s:VETreePanel.nodeClicked(num)$/;"	f
VETreePanel.pathChanged	plugin/vimExplorer.vim	/^function! s:VETreePanel.pathChanged(path)$/;"	f
VETreePanel.refresh	plugin/vimExplorer.vim	/^function! s:VETreePanel.refresh()$/;"	f
VETreePanel.setFocus	plugin/vimExplorer.vim	/^function! s:VETreePanel.setFocus()$/;"	f
VETreePanel.show	plugin/vimExplorer.vim	/^function! s:VETreePanel.show()$/;"	f
VE_AddToFavorite	plugin/vimExplorer.vim	/^function! VE_AddToFavorite(where)$/;"	f
VE_BrowseHistory	plugin/vimExplorer.vim	/^function! VE_BrowseHistory()$/;"	f
VE_ClearSelectFile	plugin/vimExplorer.vim	/^function! VE_ClearSelectFile()$/;"	f
VE_ClosePreviewPanel	plugin/vimExplorer.vim	/^function! VE_ClosePreviewPanel()$/;"	f
VE_DeleteSelectedFiles	plugin/vimExplorer.vim	/^function! VE_DeleteSelectedFiles()$/;"	f
VE_DeleteSingle	plugin/vimExplorer.vim	/^function! VE_DeleteSingle()$/;"	f
VE_Diff	plugin/vimExplorer.vim	/^function! VE_Diff()$/;"	f
VE_FileSearch	plugin/vimExplorer.vim	/^function! VE_FileSearch()$/;"	f
VE_GetStatusFileName	plugin/vimExplorer.vim	/^function! VE_GetStatusFileName()$/;"	f
VE_GotoBackward	plugin/vimExplorer.vim	/^function! VE_GotoBackward()$/;"	f
VE_GotoFavorite	plugin/vimExplorer.vim	/^function! VE_GotoFavorite()$/;"	f
VE_GotoForward	plugin/vimExplorer.vim	/^function! VE_GotoForward()$/;"	f
VE_GotoPath	plugin/vimExplorer.vim	/^function! VE_GotoPath(path)$/;"	f
VE_MarkExecutable	plugin/vimExplorer.vim	/^function! VE_MarkExecutable()$/;"	f
VE_MarkList	plugin/vimExplorer.vim	/^function! VE_MarkList()$/;"	f
VE_MarkPlace	plugin/vimExplorer.vim	/^function! VE_MarkPlace(char)$/;"	f
VE_MarkSwitchTo	plugin/vimExplorer.vim	/^function! VE_MarkSwitchTo(char)$/;"	f
VE_MarkViaRegexp	plugin/vimExplorer.vim	/^function! VE_MarkViaRegexp(regexp)$/;"	f
VE_MultiFileAction	plugin/vimExplorer.vim	/^function! VE_MultiFileAction(actionName)$/;"	f
VE_NewDirectory	plugin/vimExplorer.vim	/^function! VE_NewDirectory()$/;"	f
VE_NewFile	plugin/vimExplorer.vim	/^function! VE_NewFile()$/;"	f
VE_NormalAction	plugin/vimExplorer.vim	/^function! VE_NormalAction(actionName)$/;"	f
VE_OnFileItemClick	plugin/vimExplorer.vim	/^function! VE_OnFileItemClick()$/;"	f
VE_OnFileOpenPreview	plugin/vimExplorer.vim	/^function! VE_OnFileOpenPreview()$/;"	f
VE_OnTreeNodeClick	plugin/vimExplorer.vim	/^function! VE_OnTreeNodeClick()$/;"	f
VE_OpenPath	plugin/vimExplorer.vim	/^function! VE_OpenPath()$/;"	f
VE_Paste	plugin/vimExplorer.vim	/^function! VE_Paste()$/;"	f
VE_RefreshFilePanel	plugin/vimExplorer.vim	/^function! VE_RefreshFilePanel()$/;"	f
VE_Rename	plugin/vimExplorer.vim	/^function! VE_Rename()$/;"	f
VE_ShowYankList	plugin/vimExplorer.vim	/^function! VE_ShowYankList()$/;"	f
VE_SingleFileAction	plugin/vimExplorer.vim	/^function! VE_SingleFileAction(actionName)$/;"	f
VE_SyncDir	plugin/vimExplorer.vim	/^function! VE_SyncDir()$/;"	f
VE_ToUpperDir	plugin/vimExplorer.vim	/^function! VE_ToUpperDir()$/;"	f
VE_ToggleFilePanel	plugin/vimExplorer.vim	/^function! VE_ToggleFilePanel()$/;"	f
VE_ToggleHidden	plugin/vimExplorer.vim	/^function! VE_ToggleHidden()$/;"	f
VE_ToggleModes	plugin/vimExplorer.vim	/^function! VE_ToggleModes()$/;"	f
VE_ToggleSelectFile	plugin/vimExplorer.vim	/^function! VE_ToggleSelectFile(direction)$/;"	f
VE_ToggleTreePanel	plugin/vimExplorer.vim	/^function! VE_ToggleTreePanel()$/;"	f
VE_TreeRefresh	plugin/vimExplorer.vim	/^function! VE_TreeRefresh()$/;"	f
VE_VisualDelete	plugin/vimExplorer.vim	/^function! VE_VisualDelete() range$/;"	f
VE_VisualSelect	plugin/vimExplorer.vim	/^function! VE_VisualSelect() range$/;"	f
VE_VisualYank	plugin/vimExplorer.vim	/^function! VE_VisualYank(mode) range$/;"	f
VE_YankSelectedFiles	plugin/vimExplorer.vim	/^function! VE_YankSelectedFiles(mode)$/;"	f
VE_YankSingle	plugin/vimExplorer.vim	/^function! VE_YankSingle(mode)$/;"	f
VE_getPathUnderCursor	plugin/vimExplorer.vim	/^function! VE_getPathUnderCursor(where)$/;"	f
VEnclose	plugin/imaps.vim	/^function! VEnclose(vstart, vend, VStart, VEnd)$/;"	f
VI	ftplugin/html/HTML.vim	/^function! s:VI()$/;"	f
VarNames	tools/pltags.pl	/^sub VarNames($)$/;"	s
VbGetIndent	indent/vb.vim	/^fun! VbGetIndent(lnum)$/;"	f
VbSearch	ftplugin/vb.vim	/^fun! <SID>VbSearch(pattern, flags)$/;"	f
Vec	MangleImageTag.vim	/^function! s:Vec(nums) "{{{1$/;"	f
Vexplore	plugin/netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Vexplore	call netrw#Explore(<count>,1,4+<bang>0,<q-args>)$/;"	c
VimDiffRestore	plugin/vcscommand.vim	/^augroup VimDiffRestore$/;"	a
VimDiffRestore	plugin/vcscommand.vim	/^function! s:VimDiffRestore(vimDiffBuff)$/;"	f
VimShNewBuf	vimsh.vim	/^            command! -nargs=1 VimShNewBuf python spawn_buf( "_<args>_" )$/;"	c
VimShRedraw	vimsh.vim	/^function! VimShRedraw()$/;"	f
VimballHome	autoload/vimball.vim	/^fun! s:VimballHome()$/;"	f
VimballList	plugin/vimballPlugin.vim	/^com! -na=0                VimballList call vimball#Vimball(0)$/;"	c
W	macros/life/life.vim	/^map W makh,3`ah,3`ajh,3($/;"	m
WR	ftplugin/html/HTML.vim	/^function! s:WR(type)$/;"	f
WarnIfNotUnfinalised	ftplugin/debchangelog.vim	/^function <SID>WarnIfNotUnfinalised()$/;"	f
WebBrowser	plugin/browser.vim	/^com! -nargs=+ WebBrowser      call OpenWebBrowser(<q-args>)$/;"	c
Wholematch	macros/matchit.vim	/^fun! s:Wholematch(string, pat, start)$/;"	f
Wholematch	plugin/matchit.vim	/^fun! s:Wholematch(string, pat, start)$/;"	f
Wholematch	plugin/plugin/matchit.vim	/^fun! s:Wholematch(string, pat, start)$/;"	f
Wikipedia	plugin/browser.vim	/^com! -nargs=+ Wikipedia       call OpenWikipedia(<q-args>)$/;"	c
WinPath	autoload/netrw.vim	/^fun! s:WinPath(path)$/;"	f
Window_DelParent	plugin/ScreenShot.vim	/^function! s:Window_DelParent(self)$/;"	f
Window_IsTop	plugin/ScreenShot.vim	/^function! s:Window_IsTop(self,top)$/;"	f
Window_New	plugin/ScreenShot.vim	/^function! s:Window_New(window,num)$/;"	f
Window_TryMerge	plugin/ScreenShot.vim	/^function! s:Window_TryMerge(self,new)$/;"	f
WipeoutCommandBuffers	plugin/vcscommand.vim	/^function! s:WipeoutCommandBuffers(originalBuffer, VCSCommand)$/;"	f
Wydawca	tutor/tutor.pl	/^	Wydawca: Helion 2001 (O'Reilly) - wg 6. ang. wydania$/;"	l
Wydawca	tutor/tutor.pl	/^	Wydawca: Helion 2001 (O'Reilly).$/;"	l
Wydawca	tutor/tutor.pl	/^	Wydawca: New Riders$/;"	l
Wydawca	tutor/tutor.pl	/^	Wydawca: O'Reilly & Associates Inc.$/;"	l
X	colors/desert256.vim	/^    fun <SID>X(group, fg, bg, attr)$/;"	f
X	colors/inkpot.vim	/^fun! <SID>X(a)$/;"	f
X	colors/jellybeans.vim	/^fun! s:X(group, fg, bg, attr, lcfg, lcbg)$/;"	f
X	colors/summerfruit256.vim	/^    fun <SID>X(group, fg, bg, attr)$/;"	f
X	colors/vividchalk.vim	/^fun! s:X(a)$/;"	f
X	colors/wombat256.vim	/^fun <SID>X(group, fg, bg, attr)$/;"	f
X	macros/hanoi/hanoi.vim	/^map X x$/;"	m
XMLFoldLabel	ftplugin/XMLFolding.vim	/^ fun! XMLFoldLabel()$/;"	f
XMLent	ftplugin/xml.vim	/^command! -nargs=? XMLent call xmlcomplete#CreateEntConnection(<f-args>)$/;"	c
XMLns	ftplugin/xml.vim	/^command! -nargs=+ XMLns call xmlcomplete#CreateConnection(<f-args>)$/;"	c
Xf86confdeclopt	syntax/xf86conf.vim	/^	command -nargs=+ Xf86confdeclopt syn keyword xf86confOptionName <args> contained nextgroup=xf86confValue,xf86confComment skipwhite$/;"	c
Xf86confdeclopt	syntax/xf86conf.vim	/^	command -nargs=+ Xf86confdeclopt syn keyword xf86confOptionName <args> contained$/;"	c
XmlIndentGet	indent/xml.vim	/^fun! XmlIndentGet(lnum, use_syntax_check)$/;"	f
XmlIndentSum	indent/xml.vim	/^fun! <SID>XmlIndentSum(lnum, style, add)$/;"	f
XmlIndentSynCheck	indent/xml.vim	/^fun! <SID>XmlIndentSynCheck(lnum)$/;"	f
XmlIndentWithPattern	indent/xml.vim	/^fun! <SID>XmlIndentWithPattern(line, pat)$/;"	f
XxdBack	menu.vim	/^func! s:XxdBack()$/;"	f
XxdConv	menu.vim	/^func! s:XxdConv()$/;"	f
XxdFind	menu.vim	/^func! s:XxdFind()$/;"	f
Y	macros/hanoi/hanoi.vim	/^map Y o0123456789Z0q$/;"	m
ZIP_EXCLUDE	c-support/codesnippets/Makefile	/^ZIP_EXCLUDE     = *.{o,gz,zip}$/;"	m
ZipBrowseSelect	autoload/zip.vim	/^fun! s:ZipBrowseSelect()$/;"	f
["	ftplugin/vim.vim	/^nnoremap <silent><buffer> [" :call search('\\%(^\\s*".*\\n\\)\\%(^\\s*"\\)\\@!', "bW")<CR>$/;"	m
["	ftplugin/vim.vim	/^vnoremap <silent><buffer> [" :<C-U>exe "normal! gv"<Bar>call search('\\%(^\\s*".*\\n\\)\\%(^\\s*"\\)\\@!', "bW")<CR>$/;"	m
[#	ftplugin/hamster.vim	/^noremap <silent><buffer> [# :call search('^\\s*#\\@!', "bW")<CR>$/;"	m
[%	macros/matchit.vim	/^nnoremap <silent> [% :<C-U>call <SID>MultiMatch("bW", "n") <CR>$/;"	m
[%	macros/matchit.vim	/^onoremap <silent> [% v:<C-U>call <SID>MultiMatch("bW", "o") <CR>$/;"	m
[%	macros/matchit.vim	/^vmap [% <Esc>[%m'gv``$/;"	m
[%	plugin/matchit.vim	/^nnoremap <silent> [% :<C-U>call <SID>MultiMatch("bW", "n") <CR>$/;"	m
[%	plugin/matchit.vim	/^onoremap <silent> [% v:<C-U>call <SID>MultiMatch("bW", "o") <CR>$/;"	m
[%	plugin/matchit.vim	/^vmap [% <Esc>[%m'gv``$/;"	m
[%	plugin/plugin/matchit.vim	/^nnoremap <silent> [% :<C-U>call <SID>MultiMatch("bW", "n") <CR>$/;"	m
[%	plugin/plugin/matchit.vim	/^onoremap <silent> [% v:<C-U>call <SID>MultiMatch("bW", "o") <CR>$/;"	m
[%	plugin/plugin/matchit.vim	/^vmap [% <Esc>[%m'gv``$/;"	m
[M	ftplugin/ruby.vim	/^  noremap <silent> <buffer> [M :<C-U>call <SID>searchsyn('\\<end\\>','rubyDefine','b')<CR>$/;"	m
[[	ftplugin/abaqus.vim	/^nnoremap <silent> <buffer> [[ :call <SID>Abaqus_Jump('?^\\*\\a?')<CR>$/;"	m
[[	ftplugin/cobol.vim	/^    noremap <silent> <buffer> [[ m':call search('\\c^\\%(\\s*\\<Bar>.\\{6\\}\\s\\+\\)\\zs[A-Za-z0-9-]\\+\\s\\+\\%(division\\<Bar>section\\)\\s*\\.','bW')<CR>$/;"	m
[[	ftplugin/hamster.vim	/^noremap <silent><buffer> [[ :call search('^\\s*sub\\>', "bW")<CR>$/;"	m
[[	ftplugin/python.vim	/^nnoremap <silent> <buffer> [[ :call <SID>Python_jump('?^\\(class\\\\|def\\)')<cr>$/;"	m
[[	ftplugin/ruby.vim	/^  noremap <silent> <buffer> [[ :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>','rubyModule\\<Bar>rubyClass','b')<CR>$/;"	m
[[	ftplugin/sql.vim	/^nmap <buffer> <silent> [[ :call search('\\\\c^\\\\s*begin\\\\>', 'bW' )<CR>$/;"	m
[[	ftplugin/sql.vim	/^vmap <buffer> <silent> [[ :<C-U>exec "normal! gv"<Bar>call search('\\\\c^\\\\s*begin\\\\>', 'bW' )<CR>$/;"	m
[[	ftplugin/vb.vim	/^nnoremap <buffer> <silent> [[ :call <SID>VbSearch('^\\s*\\(\\(private\\|public\\)\\s\\+\\)\\=\\(function\\\\|sub\\)', 'bW')<cr>$/;"	m
[[	ftplugin/vhdl.vim	/^noremap  <buffer><silent>[[ :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\%(\\\\<end\\\\s\\\\+\\\\)\\\\@<!\\\\<".b:vhdl_explore."\\\\>\\\\c\\\\<Bar>\\\\%^","bW")')<CR>$/;"	m
[[	ftplugin/vhdl.vim	/^vnoremap <buffer><silent>[[ :<C-u>cal <SID>CountWrapper('[[')<CR>$/;"	m
[[	ftplugin/vim.vim	/^nnoremap <silent><buffer> [[ m':call search('^\\s*fu\\%[nction]\\>', "bW")<CR>$/;"	m
[[	ftplugin/vim.vim	/^vnoremap <silent><buffer> [[ m':<C-U>exe "normal! gv"<Bar>call search('^\\s*fu\\%[nction]\\>', "bW")<CR>$/;"	m
[]	ftplugin/cobol.vim	/^    noremap <silent> <buffer> [] m':call <SID>toend('b')<CR>$/;"	m
[]	ftplugin/hamster.vim	/^noremap <silent><buffer> [] :call search('^\\s*endsub\\>', "bW")<CR>$/;"	m
[]	ftplugin/ruby.vim	/^  noremap <silent> <buffer> [] :<C-U>call <SID>searchsyn('\\<end\\>','rubyModule\\<Bar>rubyClass','b')<CR>$/;"	m
[]	ftplugin/sql.vim	/^nmap <buffer> <silent> [] :call search('\\\\c^\\\\s*end\\\\W*$', 'bW' )<CR>$/;"	m
[]	ftplugin/sql.vim	/^vmap <buffer> <silent> [] :<C-U>exec "normal! gv"<Bar>call search('\\\\c^\\\\s*end\\\\W*$', 'bW' )<CR>$/;"	m
[]	ftplugin/vb.vim	/^nnoremap <buffer> <silent> [] :call <SID>VbSearch('^\\s*\\<end\\>\\s\\+\\(function\\\\|sub\\)', 'bW')<cr>$/;"	m
[]	ftplugin/vhdl.vim	/^noremap  <buffer><silent>[] :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\<end\\\\s\\\\+".b:vhdl_explore."\\\\>\\\\c\\\\<Bar>\\\\%^","bW")')<CR>$/;"	m
[]	ftplugin/vhdl.vim	/^vnoremap <buffer><silent>[] :<C-u>cal <SID>CountWrapper('[]')<CR>$/;"	m
[]	ftplugin/vim.vim	/^nnoremap <silent><buffer> [] m':call search('^\\s*endf*\\%[unction]\\>', "bW")<CR>$/;"	m
[]	ftplugin/vim.vim	/^vnoremap <silent><buffer> [] m':<C-U>exe "normal! gv"<Bar>call search('^\\s*endf*\\%[unction]\\>', "bW")<CR>$/;"	m
[m	ftplugin/python.vim	/^nnoremap <silent> <buffer> [m :call <SID>Python_jump('?^\\s*\\(class\\\\|def\\)')<cr>$/;"	m
[m	ftplugin/ruby.vim	/^  noremap <silent> <buffer> [m :<C-U>call <SID>searchsyn('\\<def\\>','rubyDefine','b')<CR>$/;"	m
\c	plugin/ScrollColor.vim	/^map \\c :echo g:colors_name<cr>$/;"	m
\n	plugin/ScrollColor.vim	/^map \\n :CN<cr>$/;"	m
\p	plugin/ScrollColor.vim	/^map \\p :CP<cr>$/;"	m
]"	ftplugin/vim.vim	/^nnoremap <silent><buffer> ]" :call search('^\\(\\s*".*\\n\\)\\@<!\\(\\s*"\\)', "W")<CR>$/;"	m
]"	ftplugin/vim.vim	/^vnoremap <silent><buffer> ]" :<C-U>exe "normal! gv"<Bar>call search('^\\(\\s*".*\\n\\)\\@<!\\(\\s*"\\)', "W")<CR>$/;"	m
]#	ftplugin/hamster.vim	/^noremap <silent><buffer> ]# :call search('^\\s*#\\@!', "W")<CR>$/;"	m
]%	macros/matchit.vim	/^nnoremap <silent> ]% :<C-U>call <SID>MultiMatch("W",  "n") <CR>$/;"	m
]%	macros/matchit.vim	/^onoremap <silent> ]% v:<C-U>call <SID>MultiMatch("W",  "o") <CR>$/;"	m
]%	macros/matchit.vim	/^vmap ]% <Esc>]%m'gv``$/;"	m
]%	plugin/matchit.vim	/^nnoremap <silent> ]% :<C-U>call <SID>MultiMatch("W",  "n") <CR>$/;"	m
]%	plugin/matchit.vim	/^onoremap <silent> ]% v:<C-U>call <SID>MultiMatch("W",  "o") <CR>$/;"	m
]%	plugin/matchit.vim	/^vmap ]% <Esc>]%m'gv``$/;"	m
]%	plugin/plugin/matchit.vim	/^nnoremap <silent> ]% :<C-U>call <SID>MultiMatch("W",  "n") <CR>$/;"	m
]%	plugin/plugin/matchit.vim	/^onoremap <silent> ]% v:<C-U>call <SID>MultiMatch("W",  "o") <CR>$/;"	m
]%	plugin/plugin/matchit.vim	/^vmap ]% <Esc>]%m'gv``$/;"	m
]M	ftplugin/ruby.vim	/^  noremap <silent> <buffer> ]M :<C-U>call <SID>searchsyn('\\<end\\>','rubyDefine','')<CR>$/;"	m
][	ftplugin/cobol.vim	/^    noremap <silent> <buffer> ][ m':call <SID>toend('')<CR>$/;"	m
][	ftplugin/hamster.vim	/^noremap <silent><buffer> ][ :call search('^\\s*endsub\\>', "W")<CR>$/;"	m
][	ftplugin/ruby.vim	/^  noremap <silent> <buffer> ][ :<C-U>call <SID>searchsyn('\\<end\\>','rubyModule\\<Bar>rubyClass','')<CR>$/;"	m
][	ftplugin/sql.vim	/^nmap <buffer> <silent> ][ :call search('\\\\c^\\\\s*end\\\\W*$', 'W' )<CR>$/;"	m
][	ftplugin/sql.vim	/^vmap <buffer> <silent> ][ :<C-U>exec "normal! gv"<Bar>call search('\\\\c^\\\\s*end\\\\W*$', 'W' )<CR>$/;"	m
][	ftplugin/vb.vim	/^nnoremap <buffer> <silent> ][ :call <SID>VbSearch('^\\s*\\<end\\>\\s\\+\\(function\\\\|sub\\)', 'W')<cr>$/;"	m
][	ftplugin/vhdl.vim	/^noremap  <buffer><silent>][ :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\<end\\\\s\\\\+".b:vhdl_explore."\\\\>\\\\c\\\\<Bar>\\\\%$","W")')<CR>$/;"	m
][	ftplugin/vhdl.vim	/^vnoremap <buffer><silent>][ :<C-u>cal <SID>CountWrapper('][')<CR>$/;"	m
][	ftplugin/vim.vim	/^nnoremap <silent><buffer> ][ m':call search('^\\s*endf*\\%[unction]\\>', "W")<CR>$/;"	m
][	ftplugin/vim.vim	/^vnoremap <silent><buffer> ][ m':<C-U>exe "normal! gv"<Bar>call search('^\\s*endf*\\%[unction]\\>', "W")<CR>$/;"	m
]]	ftplugin/abaqus.vim	/^nnoremap <silent> <buffer> ]] :call <SID>Abaqus_Jump('\/^\\*\\a\/')<CR>$/;"	m
]]	ftplugin/cobol.vim	/^    noremap <silent> <buffer> ]] m':call search('\\c^\\%(\\s*\\<Bar>.\\{6\\}\\s\\+\\)\\zs[A-Za-z0-9-]\\+\\s\\+\\%(division\\<Bar>section\\)\\.','W')<CR>$/;"	m
]]	ftplugin/hamster.vim	/^noremap <silent><buffer> ]] :call search('^\\s*sub\\>', "W")<CR>$/;"	m
]]	ftplugin/python.vim	/^nnoremap <silent> <buffer> ]] :call <SID>Python_jump('\/^\\(class\\\\|def\\)')<cr>$/;"	m
]]	ftplugin/ruby.vim	/^  noremap <silent> <buffer> ]] :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>','rubyModule\\<Bar>rubyClass','')<CR>$/;"	m
]]	ftplugin/sql.vim	/^nmap <buffer> <silent> ]] :call search('\\\\c^\\\\s*begin\\\\>', 'W' )<CR>$/;"	m
]]	ftplugin/sql.vim	/^vmap <buffer> <silent> ]] :<C-U>exec "normal! gv"<Bar>call search('\\\\c^\\\\s*begin\\\\>', 'W' )<CR>$/;"	m
]]	ftplugin/vb.vim	/^nnoremap <buffer> <silent> ]] :call <SID>VbSearch('^\\s*\\(\\(private\\|public\\)\\s\\+\\)\\=\\(function\\\\|sub\\)', 'W')<cr>$/;"	m
]]	ftplugin/vhdl.vim	/^noremap  <buffer><silent>]] :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\%(\\\\<end\\\\s\\\\+\\\\)\\\\@<!\\\\<".b:vhdl_explore."\\\\>\\\\c\\\\<Bar>\\\\%$","W")')<CR>$/;"	m
]]	ftplugin/vhdl.vim	/^vnoremap <buffer><silent>]] :<C-u>cal <SID>CountWrapper(']]')<CR>$/;"	m
]]	ftplugin/vim.vim	/^nnoremap <silent><buffer> ]] m':call search('^\\s*fu\\%[nction]\\>', "W")<CR>$/;"	m
]]	ftplugin/vim.vim	/^vnoremap <silent><buffer> ]] m':<C-U>exe "normal! gv"<Bar>call search('^\\s*fu\\%[nction]\\>', "W")<CR>$/;"	m
]m	ftplugin/python.vim	/^nnoremap <silent> <buffer> ]m :call <SID>Python_jump('\/^\\s*\\(class\\\\|def\\)')<cr>$/;"	m
]m	ftplugin/ruby.vim	/^  noremap <silent> <buffer> ]m :<C-U>call <SID>searchsyn('\\<def\\>','rubyDefine','')<CR>$/;"	m
__getitem__	ftplugin/latex-suite/bibtools.py	/^    def __getitem__(self, key):$/;"	m	class:Bibliography	file:
__init__	ftplugin/latex-suite/bibtools.py	/^    def __init__(self, filelist=''):$/;"	m	class:BibFile
__init__	ftplugin/latex-suite/bibtools.py	/^    def __init__(self, txt, macros={}):$/;"	m	class:Bibliography
__init__	vimsh.py	/^    def __init__( self, _sh, _arg, _filename ):$/;"	m	class:vimsh
__str__	ftplugin/latex-suite/bibtools.py	/^    def __str__(self):$/;"	m	class:BibFile	file:
__str__	ftplugin/latex-suite/bibtools.py	/^    def __str__(self):$/;"	m	class:Bibliography	file:
_j	macros/justify.vim	/^nmap _j :%call Justify('tw',4)<CR>$/;"	m
_j	macros/justify.vim	/^vmap _j :call Justify('tw',4)<CR>$/;"	m
`	<Esc>:call	fortran_stubs.vim	/^inoremap `	<Esc>:call FortranStubs()<CR>a$/;"	m
a	tutor/tutor.cs	/^  4. Pokud si tyto kroky spolehlivì pamatuje¹, vykonej kroky 1 a¾ 3, èím¾$/;"	v
a%	macros/matchit.vim	/^vmap a% <Esc>[%v]%$/;"	m
a%	plugin/matchit.vim	/^vmap a% <Esc>[%v]%$/;"	m
a%	plugin/plugin/matchit.vim	/^vmap a% <Esc>[%v]%$/;"	m
activateNode	plugin/NERD_tree.vim	/^function! s:activateNode(forceKeepWindowOpen)$/;"	f
ada#Completion	autoload/ada.vim	/^function ada#Completion (cmd)$/;"	f
ada#Completion_End	autoload/ada.vim	/^function ada#Completion_End ()$/;"	f
ada#Create_Tags	autoload/ada.vim	/^function ada#Create_Tags (option)$/;"	f
ada#Insert_Backspace	autoload/ada.vim	/^function ada#Insert_Backspace ()$/;"	f
ada#Jump_Tag	autoload/ada.vim	/^function ada#Jump_Tag (Word, Mode)$/;"	f
ada#List_Tag	autoload/ada.vim	/^function ada#List_Tag (...)$/;"	f
ada#Map_Menu	autoload/ada.vim	/^function ada#Map_Menu (Text, Keys, Command)$/;"	f
ada#Map_Popup	autoload/ada.vim	/^function ada#Map_Popup (Text, Keys, Command)$/;"	f
ada#Pretty_Print_Folding	autoload/ada.vim	/^   function ada#Pretty_Print_Folding (Line)			     " {{{2$/;"	f
ada#Switch_Session	autoload/ada.vim	/^function ada#Switch_Session (New_Session)$/;"	f
ada#Switch_Syntax_Option	autoload/ada.vim	/^function ada#Switch_Syntax_Option (option)$/;"	f
ada#User_Complete	autoload/ada.vim	/^function! ada#User_Complete(findstart, base)$/;"	f
ada#Word	autoload/ada.vim	/^function ada#Word (...)$/;"	f
adacomplete#Complete	autoload/adacomplete.vim	/^function! adacomplete#Complete (findstart, base)$/;"	f
addFileNameAndNumber	ftplugin/latex-suite/outline.py	/^def addFileNameAndNumber(lines):$/;"	f
addfile	ftplugin/latex-suite/bibtools.py	/^    def addfile(self, file):$/;"	m	class:BibFile
addfilter	ftplugin/latex-suite/bibtools.py	/^    def addfilter(self, filterspec):$/;"	m	class:BibFile
addsortfield	ftplugin/latex-suite/bibtools.py	/^    def addsortfield(self, field):$/;"	m	class:BibFile
all	doc/Makefile	/^all = $(projects) $(htmlfiles) $(cssfiles) $(txtfiles) $/;"	m
amp	ftplugin/changelog.vim	/^            let amp = stridx(name, '&')$/;"	v
apply_opts	colors/marklar.vim	/^        function! s:apply_opts()$/;"	f
as	tutor/tutor.cs	/^      5)  Hodinky ukazují èas,$/;"	v
at	syntax/sed.vim	/^let __at = char2nr("@")$/;"	v
ault	vimsh.py	/^            user_shell = '\/bin\/sh'$/;"	f	function:remove_buf
auto	tutor/tutor.cs	/^      4)  Mám auto,$/;"	v
b	macros/less.vim	/^noremap <script> b <C-B><SID>L$/;"	m
b:DoubleDollars	ftplugin/latex-suite/envmacros.vim	/^	let b:DoubleDollars = 0$/;"	v
b:HTMLclearMappings	ftplugin/html/HTML.vim	/^let b:HTMLclearMappings = 'normal '$/;"	v
b:InPHPcode	indent/php.vim	/^let b:InPHPcode = 0$/;"	v
b:InPHPcode_and_script	indent/php.vim	/^let b:InPHPcode_and_script = 0$/;"	v
b:InPHPcode_checked	indent/php.vim	/^let b:InPHPcode_checked = 0$/;"	v
b:InPHPcode_tofind	indent/php.vim	/^let b:InPHPcode_tofind = ""$/;"	v
b:PHP_BracesAtCodeLevel	indent/php.vim	/^    let b:PHP_BracesAtCodeLevel = 0$/;"	v
b:PHP_BracesAtCodeLevel	indent/php.vim	/^    let b:PHP_BracesAtCodeLevel = PHP_BracesAtCodeLevel$/;"	v
b:PHP_CurrentIndentLevel	indent/php.vim	/^let b:PHP_CurrentIndentLevel = b:PHP_default_indenting$/;"	v
b:PHP_InsideMultilineComment	indent/php.vim	/^let b:PHP_InsideMultilineComment = 0$/;"	v
b:PHP_LastIndentedWasComment	indent/php.vim	/^let b:PHP_LastIndentedWasComment = 0$/;"	v
b:PHP_autoformatcomment	indent/php.vim	/^    let b:PHP_autoformatcomment = 1$/;"	v
b:PHP_autoformatcomment	indent/php.vim	/^    let b:PHP_autoformatcomment = PHP_autoformatcomment$/;"	v
b:PHP_default_indenting	indent/php.vim	/^    let b:PHP_default_indenting = 0$/;"	v
b:PHP_default_indenting	indent/php.vim	/^    let b:PHP_default_indenting = PHP_default_indenting * &sw$/;"	v
b:PHP_indentbeforelast	indent/php.vim	/^let b:PHP_indentbeforelast = 0$/;"	v
b:PHP_indentinghuge	indent/php.vim	/^let b:PHP_indentinghuge = 0$/;"	v
b:PHP_lastindented	indent/php.vim	/^let b:PHP_lastindented = 0$/;"	v
b:PHP_oldchangetick	indent/php.vim	/^let b:PHP_oldchangetick = b:changedtick$/;"	v
b:PHP_vintage_case_default_indent	indent/php.vim	/^    let b:PHP_vintage_case_default_indent = 0$/;"	v
b:PHP_vintage_case_default_indent	indent/php.vim	/^    let b:PHP_vintage_case_default_indent = PHP_vintage_case_default_indent$/;"	v
b:UserIsTypingComment	indent/php.vim	/^let b:UserIsTypingComment = 0$/;"	v
b:allStmts	indent/mupad.vim	/^let b:allStmts=''$/;"	v
b:annotation_file_located	ftplugin/ocaml.vim	/^  let b:annotation_file_located = 0$/;"	v
b:autohotkey_syntax_sync_minlines	syntax/autohotkey.vim	/^  let b:autohotkey_syntax_sync_minlines = 50$/;"	v
b:autohotkey_syntax_sync_minlines	syntax/autohotkey.vim	/^  let b:autohotkey_syntax_sync_minlines = g:autohotkey_syntax_sync_minlines$/;"	v
b:bdf_minlines	syntax/bdf.vim	/^  let b:bdf_minlines = 30$/;"	v
b:bdf_minlines	syntax/bdf.vim	/^  let b:bdf_minlines = bdf_minlines$/;"	v
b:browsefilter	ftplugin/abaqus.vim	/^    let b:browsefilter = "Abaqus Input Files (*.inp *.inc)\\t*.inp;*.inc\\n" .$/;"	v
b:browsefilter	ftplugin/ant.vim	/^    let b:browsefilter = "Build Files (build.xml)\\tbuild.xml\\n" .$/;"	v
b:browsefilter	ftplugin/aspvbs.vim	/^    let  b:browsefilter="ASP Files (*.asp)\\t*.asp\\n" . s:browsefilter$/;"	v
b:browsefilter	ftplugin/cobol.vim	/^  let b:browsefilter = "COBOL Source Files (*.cbl, *.cob)\\t*.cbl;*.cob;*.lib\\n".$/;"	v
b:browsefilter	ftplugin/config.vim	/^    let  b:browsefilter="Configure Scripts (configure.*, config.*)\\tconfigure*;config.*\\n" .$/;"	v
b:browsefilter	ftplugin/cs.vim	/^    let b:browsefilter = "C# Source Files (*.cs)\\t*.cs\\n" .$/;"	v
b:browsefilter	ftplugin/csh.vim	/^    let  b:browsefilter="csh Scripts (*.csh)\\t*.csh\\n" .$/;"	v
b:browsefilter	ftplugin/dosbatch.vim	/^  let b:browsefilter = "DOS Batch Files (*.bat, *.btm, *.cmd)\\t*.bat;*.btm;*.cmd\\nAll Files (*.*)\\t*.*\\n"$/;"	v
b:browsefilter	ftplugin/dtd.vim	/^    let  b:browsefilter="DTD Files (*.dtd)\\t*.dtd\\n" .$/;"	v
b:browsefilter	ftplugin/eruby.vim	/^  let b:browsefilter="eRuby Files (*.erb, *.rhtml)\\t*.erb;*.rhtml\\n" . s:browsefilter$/;"	v
b:browsefilter	ftplugin/fortran.vim	/^  let b:browsefilter = "Fortran Files (*.f;*.F;*.for;*.f77;*.f90;*.f95;*.fpp;*.ftn)\\t*.f;*.F;*.for;*.f77;*.f90;*.f95;*.fpp;*.ftn\\n" .$/;"	v
b:browsefilter	ftplugin/haml.vim	/^  let b:browsefilter="Haml Files (*.haml)\\t*.haml\\nSass Files (*.sass)\\t*.sass\\n" . s:browsefilter$/;"	v
b:browsefilter	ftplugin/html.vim	/^    let  b:browsefilter="HTML Files (*.html,*.htm)\\t*.htm;*.html\\n" .$/;"	v
b:browsefilter	ftplugin/ishd.vim	/^    let b:browsefilter = "InstallShield Files (*.rul)\\t*.rul\\n" .$/;"	v
b:browsefilter	ftplugin/java.vim	/^    let  b:browsefilter="Java Files (*.java)\\t*.java\\n" .$/;"	v
b:browsefilter	ftplugin/javascript.vim	/^    let  b:browsefilter="Javascript Files (*.js)\\t*.js\\n" .$/;"	v
b:browsefilter	ftplugin/jsp.vim	/^    let  b:browsefilter="JSP Files (*.jsp)\\t*.jsp\\n" . s:browsefilter$/;"	v
b:browsefilter	ftplugin/kwt.vim	/^    let b:browsefilter = "Kimwitu\/Kimwitu++ Files (*.k)\\t*.k\\n" .$/;"	v
b:browsefilter	ftplugin/msmessages.vim	/^  let b:browsefilter = "MS Message Files (*.mc)\\t*.mc\\n" .$/;"	v
b:browsefilter	ftplugin/mupad.vim	/^  let  b:browsefilter=$/;"	v
b:browsefilter	ftplugin/occam.vim	/^  let b:browsefilter = "All Occam Files (*.occ *.inc)\\t*.occ;*.inc\\n" .$/;"	v
b:browsefilter	ftplugin/old.c.vim	/^    let b:browsefilter = "C Source Files (*.c)\\t*.c\\n" .$/;"	v
b:browsefilter	ftplugin/old.c.vim	/^    let b:browsefilter = "C++ Source Files (*.cpp *.c++)\\t*.cpp;*.c++\\n" .$/;"	v
b:browsefilter	ftplugin/old.c.vim	/^    let b:browsefilter = "Ch Source Files (*.ch *.chf)\\t*.ch;*.chf\\n" .$/;"	v
b:browsefilter	ftplugin/perl.vim	/^    let b:browsefilter = "Perl Source Files (*.pl)\\t*.pl\\n" .$/;"	v
b:browsefilter	ftplugin/php.vim	/^    let  b:browsefilter="PHP Files (*.php)\\t*.php\\n" . s:browsefilter$/;"	v
b:browsefilter	ftplugin/postscr.vim	/^  let b:browsefilter = "PostScript Files (*.ps)\\t*.ps\\n" .$/;"	v
b:browsefilter	ftplugin/pyrex.vim	/^    let  b:browsefilter = "Pyrex files (*.pyx,*.pxd)\\t*.pyx;*.pxd\\n" .$/;"	v
b:browsefilter	ftplugin/python.vim	/^    let b:browsefilter = "Python Files (*.py)\\t*.py\\n" .$/;"	v
b:browsefilter	ftplugin/ruby.vim	/^  let b:browsefilter = "Ruby Source Files (*.rb)\\t*.rb\\n" .$/;"	v
b:browsefilter	ftplugin/sgml.vim	/^    let  b:browsefilter="SGML Files (*.sgml,*.sgm)\\t*.sgm*\\n" . s:browsefilter$/;"	v
b:browsefilter	ftplugin/sql.vim	/^    let b:browsefilter = "SQL Files (*.sql)\\t*.sql\\n" .$/;"	v
b:browsefilter	ftplugin/svg.vim	/^    let  b:browsefilter="SVG Files (*.svg)\\t*.svg\\n" . s:browsefilter$/;"	v
b:browsefilter	ftplugin/tcsh.vim	/^    let  b:browsefilter="tcsh Scripts (*.tcsh)\\t*.tcsh\\n" . s:browsefilter$/;"	v
b:browsefilter	ftplugin/verilog.vim	/^  let b:browsefilter = "Verilog Source Files (*.v)\\t*.v\\n" .$/;"	v
b:browsefilter	ftplugin/xhtml.vim	/^    let  b:browsefilter="XHTML files (*.xhtml, *.xhtm)\\t*.xhtml;*.xhtm\\n" . s:browsefilter$/;"	v
b:browsefilter	ftplugin/xml.vim	/^    let  b:browsefilter="XML Files (*.xml)\\t*.xml\\n" .$/;"	v
b:browsefilter	ftplugin/xsd.vim	/^    let  b:browsefilter="XSD Files (*.xsd)\\t*.xsd\\n" . s:browsefilter$/;"	v
b:browsefilter	ftplugin/xslt.vim	/^    let  b:browsefilter="XSLT Files (*.xsl,*.xslt)\\t*.xsl;*.xslt\\n" . b:browsefilter$/;"	v
b:browsefilter	syntax/lpc.vim	/^    let b:browsefilter = "LPC Source Files (*.c *.d *.h)\\t*.c;*.d;*.h\\n" .$/;"	v
b:c_minlines	syntax/c.vim	/^    let b:c_minlines = 15	" mostly for () constructs$/;"	v
b:c_minlines	syntax/c.vim	/^    let b:c_minlines = 50	" #if 0 constructs can be long$/;"	v
b:c_minlines	syntax/c.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	syntax/calendar.vim	/^    let b:c_minlines = 15       " mostly for () constructs$/;"	v
b:c_minlines	syntax/calendar.vim	/^    let b:c_minlines = 50       " #if 0 constructs can be long$/;"	v
b:c_minlines	syntax/calendar.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	syntax/indent.vim	/^    let b:c_minlines = 15       " mostly for () constructs$/;"	v
b:c_minlines	syntax/indent.vim	/^    let b:c_minlines = 50       " #if 0 constructs can be long$/;"	v
b:c_minlines	syntax/indent.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	syntax/lpc.vim	/^    let b:c_minlines = 15	" mostly for () constructs$/;"	v
b:c_minlines	syntax/lpc.vim	/^    let b:c_minlines = 50	" #if 0 constructs can be long$/;"	v
b:c_minlines	syntax/lpc.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:comment_end	ftplugin/sql.vim	/^let b:comment_end = '\\\\(^\\\\s*'.b:comment_leader.'.*\\\\n\\\\)'.$/;"	v
b:comment_jump_over	ftplugin/sql.vim	/^let b:comment_jump_over  = "call search('".$/;"	v
b:comment_leader	ftplugin/sql.vim	/^let b:comment_leader = '\\\\(--\\\\\\|\\\\\/\\\\\/\\\\\\|\\\\*\\\\\\|\\\\\/\\\\*\\\\\\|\\\\*\\\\\/\\\\)'$/;"	v
b:comment_skip_back	ftplugin/sql.vim	/^let b:comment_skip_back  = "call search('".$/;"	v
b:comment_start	ftplugin/sql.vim	/^let b:comment_start  = '^\\\\(\\\\s*'.b:comment_leader.'.*\\\\n\\\\)\\\\@<!'.$/;"	v
b:current_ftplugin	ftplugin/sql.vim	/^let b:current_ftplugin = 'sql'$/;"	v
b:current_indent	indent/sqlanywhere.vim	/^let b:current_indent = "sqlanywhere"$/;"	v
b:current_syntax	syntax/a2ps.vim	/^let b:current_syntax = "a2ps"$/;"	v
b:current_syntax	syntax/a65.vim	/^let b:current_syntax = "a65"$/;"	v
b:current_syntax	syntax/aap.vim	/^let b:current_syntax = "aap"$/;"	v
b:current_syntax	syntax/abap.vim	/^let b:current_syntax = "abap"$/;"	v
b:current_syntax	syntax/abaqus.vim	/^let b:current_syntax = "abaqus"$/;"	v
b:current_syntax	syntax/abc.vim	/^let b:current_syntax = "abc"$/;"	v
b:current_syntax	syntax/abel.vim	/^let b:current_syntax = "abel"$/;"	v
b:current_syntax	syntax/acedb.vim	/^let b:current_syntax = "acedb"$/;"	v
b:current_syntax	syntax/ada.vim	/^let b:current_syntax = "ada"$/;"	v
b:current_syntax	syntax/aflex.vim	/^let b:current_syntax = "aflex"$/;"	v
b:current_syntax	syntax/ahdl.vim	/^let b:current_syntax = "ahdl"$/;"	v
b:current_syntax	syntax/alsaconf.vim	/^let b:current_syntax = "alsaconf"$/;"	v
b:current_syntax	syntax/amiga.vim	/^let b:current_syntax = "amiga"$/;"	v
b:current_syntax	syntax/aml.vim	/^let b:current_syntax = "aml"$/;"	v
b:current_syntax	syntax/ampl.vim	/^let b:current_syntax = "ampl"$/;"	v
b:current_syntax	syntax/ant.vim	/^let b:current_syntax = "ant"$/;"	v
b:current_syntax	syntax/antlr.vim	/^let b:current_syntax = "antlr"$/;"	v
b:current_syntax	syntax/apache.vim	/^let b:current_syntax = "apache"$/;"	v
b:current_syntax	syntax/apachestyle.vim	/^let b:current_syntax = "apachestyle"$/;"	v
b:current_syntax	syntax/arch.vim	/^let b:current_syntax = "arch"$/;"	v
b:current_syntax	syntax/art.vim	/^let b:current_syntax = "art"$/;"	v
b:current_syntax	syntax/asm.vim	/^let b:current_syntax = "asm"$/;"	v
b:current_syntax	syntax/asm68k.vim	/^let b:current_syntax = "asm68k"$/;"	v
b:current_syntax	syntax/asmh8300.vim	/^let b:current_syntax = "asmh8300"$/;"	v
b:current_syntax	syntax/asn.vim	/^let b:current_syntax = "asn"$/;"	v
b:current_syntax	syntax/aspperl.vim	/^let b:current_syntax = "aspperl"$/;"	v
b:current_syntax	syntax/aspvbs.vim	/^let b:current_syntax = "aspvbs"$/;"	v
b:current_syntax	syntax/asterisk.vim	/^let b:current_syntax = "asterisk" $/;"	v
b:current_syntax	syntax/asteriskvm.vim	/^let b:current_syntax = "asteriskvm"$/;"	v
b:current_syntax	syntax/atlas.vim	/^let b:current_syntax = "atlas"$/;"	v
b:current_syntax	syntax/autohotkey.vim	/^let b:current_syntax = "autohotkey"$/;"	v
b:current_syntax	syntax/automake.vim	/^let b:current_syntax = "automake"$/;"	v
b:current_syntax	syntax/ave.vim	/^let b:current_syntax = "ave"$/;"	v
b:current_syntax	syntax/awk.vim	/^let b:current_syntax = "awk"$/;"	v
b:current_syntax	syntax/ayacc.vim	/^let b:current_syntax = "ayacc"$/;"	v
b:current_syntax	syntax/b.vim	/^let b:current_syntax = "b"$/;"	v
b:current_syntax	syntax/baan.vim	/^let b:current_syntax = "baan"$/;"	v
b:current_syntax	syntax/basic.vim	/^let b:current_syntax = "basic"$/;"	v
b:current_syntax	syntax/bc.vim	/^let b:current_syntax = "bc"$/;"	v
b:current_syntax	syntax/bdf.vim	/^let b:current_syntax = "bdf"$/;"	v
b:current_syntax	syntax/bib.vim	/^let b:current_syntax = "bib"$/;"	v
b:current_syntax	syntax/bindzone.vim	/^let b:current_syntax = "bindzone"$/;"	v
b:current_syntax	syntax/blank.vim	/^let b:current_syntax = "blank"$/;"	v
b:current_syntax	syntax/bst.vim	/^let b:current_syntax = "bst"$/;"	v
b:current_syntax	syntax/btm.vim	/^let b:current_syntax = "btm"$/;"	v
b:current_syntax	syntax/bzr.vim	/^let b:current_syntax = "bzr"$/;"	v
b:current_syntax	syntax/c.vim	/^let b:current_syntax = "c"$/;"	v
b:current_syntax	syntax/calendar.vim	/^let b:current_syntax = "calendar"$/;"	v
b:current_syntax	syntax/catalog.vim	/^let b:current_syntax = "catalog"$/;"	v
b:current_syntax	syntax/cdl.vim	/^let b:current_syntax = "cdl"$/;"	v
b:current_syntax	syntax/cdrdaoconf.vim	/^let b:current_syntax = "cdrdaoconf"$/;"	v
b:current_syntax	syntax/cdrtoc.vim	/^let b:current_syntax = "cdrtoc"$/;"	v
b:current_syntax	syntax/cf.vim	/^let b:current_syntax = "cf"$/;"	v
b:current_syntax	syntax/cfg.vim	/^let b:current_syntax = "cfg"$/;"	v
b:current_syntax	syntax/ch.vim	/^let b:current_syntax = "ch"$/;"	v
b:current_syntax	syntax/change.vim	/^let b:current_syntax = "change"$/;"	v
b:current_syntax	syntax/changelog.vim	/^let b:current_syntax = "changelog"$/;"	v
b:current_syntax	syntax/changes.vim	/^let b:current_syntax = "changes"$/;"	v
b:current_syntax	syntax/cheetah.vim	/^let b:current_syntax = "cheetah"$/;"	v
b:current_syntax	syntax/chill.vim	/^let b:current_syntax = "chill"$/;"	v
b:current_syntax	syntax/chordpro.vim	/^let b:current_syntax = "chordpro"$/;"	v
b:current_syntax	syntax/cl.vim	/^let b:current_syntax = "cl"$/;"	v
b:current_syntax	syntax/clean.vim	/^let b:current_syntax = "clean"$/;"	v
b:current_syntax	syntax/clipper.vim	/^let b:current_syntax = "clipper"$/;"	v
b:current_syntax	syntax/cmake.vim	/^let b:current_syntax = "cmake"$/;"	v
b:current_syntax	syntax/cmusrc.vim	/^let b:current_syntax = "cmusrc"$/;"	v
b:current_syntax	syntax/cobol.vim	/^let b:current_syntax = "cobol"$/;"	v
b:current_syntax	syntax/conaryrecipe.vim	/^let b:current_syntax = "conaryrecipe"$/;"	v
b:current_syntax	syntax/conf.vim	/^let b:current_syntax = "conf"$/;"	v
b:current_syntax	syntax/config.vim	/^let b:current_syntax = "config"$/;"	v
b:current_syntax	syntax/context.vim	/^let b:current_syntax = "context"$/;"	v
b:current_syntax	syntax/cpp.vim	/^let b:current_syntax = "cpp"$/;"	v
b:current_syntax	syntax/crm.vim	/^let b:current_syntax = "crm"$/;"	v
b:current_syntax	syntax/crontab.vim	/^let b:current_syntax = "crontab"$/;"	v
b:current_syntax	syntax/cs.vim	/^let b:current_syntax = "cs"$/;"	v
b:current_syntax	syntax/csc.vim	/^let b:current_syntax = "csc"$/;"	v
b:current_syntax	syntax/csh.vim	/^let b:current_syntax = "csh"$/;"	v
b:current_syntax	syntax/csp.vim	/^let b:current_syntax = "csp"$/;"	v
b:current_syntax	syntax/css.vim	/^let b:current_syntax = "css"$/;"	v
b:current_syntax	syntax/cterm.vim	/^let b:current_syntax = "cterm"$/;"	v
b:current_syntax	syntax/cuda.vim	/^let b:current_syntax = "cuda"$/;"	v
b:current_syntax	syntax/cupl.vim	/^let b:current_syntax = "cupl"$/;"	v
b:current_syntax	syntax/cuplsim.vim	/^let b:current_syntax = "cuplsim"$/;"	v
b:current_syntax	syntax/cvs.vim	/^let b:current_syntax = "cvs"$/;"	v
b:current_syntax	syntax/cvsannotate.vim	/^let b:current_syntax="CVSAnnotate"$/;"	v
b:current_syntax	syntax/cvsrc.vim	/^let b:current_syntax = "cvsrc"$/;"	v
b:current_syntax	syntax/cweb.vim	/^let b:current_syntax = "cweb"$/;"	v
b:current_syntax	syntax/cynlib.vim	/^let b:current_syntax = "cynlib"$/;"	v
b:current_syntax	syntax/cynpp.vim	/^let b:current_syntax = "cynpp"$/;"	v
b:current_syntax	syntax/d.vim	/^let b:current_syntax = "d"$/;"	v
b:current_syntax	syntax/dcd.vim	/^let b:current_syntax = "dcd"$/;"	v
b:current_syntax	syntax/dcl.vim	/^let b:current_syntax = "dcl"$/;"	v
b:current_syntax	syntax/debchangelog.vim	/^let b:current_syntax = "debchangelog"$/;"	v
b:current_syntax	syntax/debcontrol.vim	/^let b:current_syntax = "debcontrol"$/;"	v
b:current_syntax	syntax/debsources.vim	/^let b:current_syntax = "debsources"$/;"	v
b:current_syntax	syntax/def.vim	/^let b:current_syntax = "def"$/;"	v
b:current_syntax	syntax/denyhosts.vim	/^let b:current_syntax = "denyhosts"$/;"	v
b:current_syntax	syntax/desc.vim	/^let b:current_syntax = "desc"$/;"	v
b:current_syntax	syntax/desktop.vim	/^let b:current_syntax = "desktop"$/;"	v
b:current_syntax	syntax/dictconf.vim	/^let b:current_syntax = "dictconf"$/;"	v
b:current_syntax	syntax/dictdconf.vim	/^let b:current_syntax = "dictdconf"$/;"	v
b:current_syntax	syntax/diff.vim	/^let b:current_syntax = "diff"$/;"	v
b:current_syntax	syntax/dircolors.vim	/^let b:current_syntax = "dircolors"$/;"	v
b:current_syntax	syntax/diva.vim	/^let b:current_syntax = "diva"$/;"	v
b:current_syntax	syntax/django.vim	/^let b:current_syntax = "django"$/;"	v
b:current_syntax	syntax/docbk.vim	/^let b:current_syntax = "docbk"$/;"	v
b:current_syntax	syntax/dosbatch.vim	/^let b:current_syntax = "dosbatch"$/;"	v
b:current_syntax	syntax/dosini.vim	/^let b:current_syntax = "dosini"$/;"	v
b:current_syntax	syntax/dot.vim	/^let b:current_syntax = "dot"$/;"	v
b:current_syntax	syntax/doxygen.vim	/^    let b:current_syntax = "doxygen"$/;"	v
b:current_syntax	syntax/doxygen.vim	/^    let b:current_syntax = b:current_syntax.'.doxygen'$/;"	v
b:current_syntax	syntax/doxygen.vim	/^    let b:current_syntax=b:doxygen_syntax_save$/;"	v
b:current_syntax	syntax/dracula.vim	/^let b:current_syntax = "dracula"$/;"	v
b:current_syntax	syntax/dsl.vim	/^let b:current_syntax = "dsl"$/;"	v
b:current_syntax	syntax/dtd.vim	/^let b:current_syntax = "dtd"$/;"	v
b:current_syntax	syntax/dtml.vim	/^let b:current_syntax = "dtml"$/;"	v
b:current_syntax	syntax/dtrace.vim	/^let b:current_syntax = "dtrace"$/;"	v
b:current_syntax	syntax/dylan.vim	/^let b:current_syntax = "dylan"$/;"	v
b:current_syntax	syntax/dylanintr.vim	/^let b:current_syntax = "dylanintr"$/;"	v
b:current_syntax	syntax/dylanlid.vim	/^let b:current_syntax = "dylanlid"$/;"	v
b:current_syntax	syntax/ecd.vim	/^let b:current_syntax = "ecd"$/;"	v
b:current_syntax	syntax/edif.vim	/^let b:current_syntax = "edif"$/;"	v
b:current_syntax	syntax/eiffel.vim	/^let b:current_syntax = "eiffel"$/;"	v
b:current_syntax	syntax/elf.vim	/^let b:current_syntax = "elf"$/;"	v
b:current_syntax	syntax/elinks.vim	/^let b:current_syntax = "elinks"$/;"	v
b:current_syntax	syntax/elmfilt.vim	/^let b:current_syntax = "elmfilt"$/;"	v
b:current_syntax	syntax/erlang.vim	/^let b:current_syntax = "erlang"$/;"	v
b:current_syntax	syntax/eruby.vim	/^let b:current_syntax = 'eruby'$/;"	v
b:current_syntax	syntax/esmtprc.vim	/^let b:current_syntax="esmtprc"$/;"	v
b:current_syntax	syntax/esqlc.vim	/^let b:current_syntax = "esqlc"$/;"	v
b:current_syntax	syntax/esterel.vim	/^let b:current_syntax = "esterel"$/;"	v
b:current_syntax	syntax/eterm.vim	/^let b:current_syntax = "eterm"$/;"	v
b:current_syntax	syntax/eviews.vim	/^let b:current_syntax="eviews"$/;"	v
b:current_syntax	syntax/exim.vim	/^let b:current_syntax = "exim"$/;"	v
b:current_syntax	syntax/expect.vim	/^let b:current_syntax = "expect"$/;"	v
b:current_syntax	syntax/exports.vim	/^let b:current_syntax = "exports"$/;"	v
b:current_syntax	syntax/fasm.vim	/^let b:current_syntax = "fasm"$/;"	v
b:current_syntax	syntax/fdcc.vim	/^let b:current_syntax = "fdcc"$/;"	v
b:current_syntax	syntax/fetchmail.vim	/^let b:current_syntax = "fetchmail"$/;"	v
b:current_syntax	syntax/fgl.vim	/^let b:current_syntax = "fgl"$/;"	v
b:current_syntax	syntax/flexwiki.vim	/^let b:current_syntax="FlexWiki"$/;"	v
b:current_syntax	syntax/focexec.vim	/^let b:current_syntax = "focexec"$/;"	v
b:current_syntax	syntax/form.vim	/^  let b:current_syntax = "form"$/;"	v
b:current_syntax	syntax/forth.vim	/^let b:current_syntax = "forth"$/;"	v
b:current_syntax	syntax/fortran.vim	/^let b:current_syntax = "fortran"$/;"	v
b:current_syntax	syntax/foxpro.vim	/^let b:current_syntax = "foxpro"$/;"	v
b:current_syntax	syntax/framescript.vim	/^let b:current_syntax = "framescript"$/;"	v
b:current_syntax	syntax/freebasic.vim	/^let b:current_syntax = "freebasic"$/;"	v
b:current_syntax	syntax/fstab.vim	/^let b:current_syntax = "fstab"$/;"	v
b:current_syntax	syntax/fvwm.vim	/^let b:current_syntax = "fvwm"$/;"	v
b:current_syntax	syntax/fvwm2m4.vim	/^let b:current_syntax = 'fvwm2m4'$/;"	v
b:current_syntax	syntax/gdb.vim	/^let b:current_syntax = "gdb"$/;"	v
b:current_syntax	syntax/gdmo.vim	/^let b:current_syntax = "gdmo"$/;"	v
b:current_syntax	syntax/gedcom.vim	/^let b:current_syntax = "gedcom"$/;"	v
b:current_syntax	syntax/git.vim	/^let b:current_syntax = "git"$/;"	v
b:current_syntax	syntax/gitannotate.vim	/^let b:current_syntax="gitAnnotate"$/;"	v
b:current_syntax	syntax/gitcommit.vim	/^let b:current_syntax = "gitcommit"$/;"	v
b:current_syntax	syntax/gitconfig.vim	/^let b:current_syntax = "gitconfig"$/;"	v
b:current_syntax	syntax/gitrebase.vim	/^let b:current_syntax = "gitrebase"$/;"	v
b:current_syntax	syntax/gitsendemail.vim	/^let b:current_syntax = "gitsendemail"$/;"	v
b:current_syntax	syntax/gkrellmrc.vim	/^let b:current_syntax = "gkrellmrc"$/;"	v
b:current_syntax	syntax/gnuplot.vim	/^let b:current_syntax = "gnuplot"$/;"	v
b:current_syntax	syntax/gp.vim	/^let b:current_syntax = "gp"$/;"	v
b:current_syntax	syntax/gpg.vim	/^let b:current_syntax = "gpg"$/;"	v
b:current_syntax	syntax/grads.vim	/^let b:current_syntax = "grads"$/;"	v
b:current_syntax	syntax/gretl.vim	/^let b:current_syntax="gretl"$/;"	v
b:current_syntax	syntax/groovy.vim	/^let b:current_syntax = "groovy"$/;"	v
b:current_syntax	syntax/group.vim	/^let b:current_syntax = "group"$/;"	v
b:current_syntax	syntax/grub.vim	/^let b:current_syntax = "grub"$/;"	v
b:current_syntax	syntax/gsp.vim	/^let b:current_syntax = "gsp"$/;"	v
b:current_syntax	syntax/gtkrc.vim	/^let b:current_syntax = "gtkrc"$/;"	v
b:current_syntax	syntax/haml.vim	/^let b:current_syntax = "haml"$/;"	v
b:current_syntax	syntax/hamster.vim	/^let b:current_syntax = "hamster"$/;"	v
b:current_syntax	syntax/haskell.vim	/^let b:current_syntax = "haskell"$/;"	v
b:current_syntax	syntax/haste.vim	/^let b:current_syntax = "haste"$/;"	v
b:current_syntax	syntax/hastepreproc.vim	/^let b:current_syntax = "hastepreproc"$/;"	v
b:current_syntax	syntax/hb.vim	/^let b:current_syntax = "hb"$/;"	v
b:current_syntax	syntax/help.vim	/^let b:current_syntax = "help"$/;"	v
b:current_syntax	syntax/hercules.vim	/^let b:current_syntax = "hercules"$/;"	v
b:current_syntax	syntax/hex.vim	/^let b:current_syntax = "hex"$/;"	v
b:current_syntax	syntax/hgannotate.vim	/^let b:current_syntax="hgAnnotate"$/;"	v
b:current_syntax	syntax/hog.vim	/^let b:current_syntax = "hog"$/;"	v
b:current_syntax	syntax/hostconf.vim	/^let b:current_syntax = "hostconf"$/;"	v
b:current_syntax	syntax/html.vim	/^let b:current_syntax = "html"$/;"	v
b:current_syntax	syntax/htmlcheetah.vim	/^let b:current_syntax = "htmlcheetah"$/;"	v
b:current_syntax	syntax/htmldjango.vim	/^let b:current_syntax = "htmldjango"$/;"	v
b:current_syntax	syntax/htmlm4.vim	/^let b:current_syntax = "htmlm4"$/;"	v
b:current_syntax	syntax/htmlos.vim	/^let b:current_syntax = "htmlos"$/;"	v
b:current_syntax	syntax/ia64.vim	/^let b:current_syntax = "ia64"$/;"	v
b:current_syntax	syntax/ibasic.vim	/^let b:current_syntax = "ibasic"$/;"	v
b:current_syntax	syntax/icemenu.vim	/^let b:current_syntax = "IceMenu"$/;"	v
b:current_syntax	syntax/icon.vim	/^let b:current_syntax = "icon"$/;"	v
b:current_syntax	syntax/idl.vim	/^let b:current_syntax = "idl"$/;"	v
b:current_syntax	syntax/idlang.vim	/^let b:current_syntax = "idlang"$/;"	v
b:current_syntax	syntax/indent.vim	/^let b:current_syntax = "indent"$/;"	v
b:current_syntax	syntax/inform.vim	/^let b:current_syntax = "inform"$/;"	v
b:current_syntax	syntax/initex.vim	/^let b:current_syntax = "initex"$/;"	v
b:current_syntax	syntax/initng.vim	/^let b:current_syntax = "initng"$/;"	v
b:current_syntax	syntax/inittab.vim	/^let b:current_syntax = "inittab"$/;"	v
b:current_syntax	syntax/ishd.vim	/^let b:current_syntax = "ishd"$/;"	v
b:current_syntax	syntax/iss.vim	/^let b:current_syntax = "iss"$/;"	v
b:current_syntax	syntax/ist.vim	/^let b:current_syntax = "ist"$/;"	v
b:current_syntax	syntax/jal.vim	/^let b:current_syntax = "jal"$/;"	v
b:current_syntax	syntax/jam.vim	/^let b:current_syntax = "jam"$/;"	v
b:current_syntax	syntax/jargon.vim	/^let b:current_syntax = "jargon"$/;"	v
b:current_syntax	syntax/java.vim	/^let b:current_syntax = "java"$/;"	v
b:current_syntax	syntax/javacc.vim	/^let b:current_syntax = "javacc"$/;"	v
b:current_syntax	syntax/javascript.vim	/^let b:current_syntax = "javascript"$/;"	v
b:current_syntax	syntax/jess.vim	/^let b:current_syntax = "jess"$/;"	v
b:current_syntax	syntax/jgraph.vim	/^let b:current_syntax = "jgraph"$/;"	v
b:current_syntax	syntax/jproperties.vim	/^let b:current_syntax = "jproperties"$/;"	v
b:current_syntax	syntax/jsp.vim	/^let b:current_syntax = "jsp"$/;"	v
b:current_syntax	syntax/kconfig.vim	/^let b:current_syntax = "kconfig"$/;"	v
b:current_syntax	syntax/kix.vim	/^let b:current_syntax = "kix"$/;"	v
b:current_syntax	syntax/kscript.vim	/^let b:current_syntax = "kscript"$/;"	v
b:current_syntax	syntax/kwt.vim	/^let b:current_syntax = "kwt"$/;"	v
b:current_syntax	syntax/lace.vim	/^let b:current_syntax = "lace"$/;"	v
b:current_syntax	syntax/latte.vim	/^let b:current_syntax = "latte"$/;"	v
b:current_syntax	syntax/ld.vim	/^let b:current_syntax = "ld"$/;"	v
b:current_syntax	syntax/ldapconf.vim	/^let b:current_syntax = "ldapconf"$/;"	v
b:current_syntax	syntax/ldif.vim	/^let b:current_syntax = "ldif"$/;"	v
b:current_syntax	syntax/lex.vim	/^let b:current_syntax = "lex"$/;"	v
b:current_syntax	syntax/lftp.vim	/^let b:current_syntax = "lftp"$/;"	v
b:current_syntax	syntax/lhaskell.vim	/^let b:current_syntax = "lhaskell"$/;"	v
b:current_syntax	syntax/libao.vim	/^let b:current_syntax = "libao"$/;"	v
b:current_syntax	syntax/lifelines.vim	/^let b:current_syntax = "lifelines"$/;"	v
b:current_syntax	syntax/lilo.vim	/^let b:current_syntax = "lilo"$/;"	v
b:current_syntax	syntax/limits.vim	/^let b:current_syntax = "limits"$/;"	v
b:current_syntax	syntax/lisp.vim	/^let b:current_syntax = "lisp"$/;"	v
b:current_syntax	syntax/lite.vim	/^let b:current_syntax = "lite"$/;"	v
b:current_syntax	syntax/litestep.vim	/^let b:current_syntax = "litestep"$/;"	v
b:current_syntax	syntax/loginaccess.vim	/^let b:current_syntax = "loginaccess"$/;"	v
b:current_syntax	syntax/logindefs.vim	/^let b:current_syntax = "logindefs"$/;"	v
b:current_syntax	syntax/logtalk.vim	/^let b:current_syntax = "logtalk"$/;"	v
b:current_syntax	syntax/lotos.vim	/^let b:current_syntax = "lotos"$/;"	v
b:current_syntax	syntax/lout.vim	/^let b:current_syntax = "lout"$/;"	v
b:current_syntax	syntax/lpc.vim	/^let b:current_syntax = "lpc"$/;"	v
b:current_syntax	syntax/lprolog.vim	/^let b:current_syntax = "lprolog"$/;"	v
b:current_syntax	syntax/lscript.vim	/^let b:current_syntax = "lscript"$/;"	v
b:current_syntax	syntax/lsl.vim	/^let b:current_syntax = "lsl"$/;"	v
b:current_syntax	syntax/lss.vim	/^let b:current_syntax = "lss"$/;"	v
b:current_syntax	syntax/lua.vim	/^let b:current_syntax = "lua"$/;"	v
b:current_syntax	syntax/lynx.vim	/^let b:current_syntax = "lynx"$/;"	v
b:current_syntax	syntax/m4.vim	/^let b:current_syntax = "m4"$/;"	v
b:current_syntax	syntax/mail.vim	/^let b:current_syntax = "mail"$/;"	v
b:current_syntax	syntax/mailaliases.vim	/^let b:current_syntax = "mailaliases"$/;"	v
b:current_syntax	syntax/mailcap.vim	/^let b:current_syntax = "mailcap"$/;"	v
b:current_syntax	syntax/make.vim	/^let b:current_syntax = "make"$/;"	v
b:current_syntax	syntax/man.vim	/^let b:current_syntax = "man"$/;"	v
b:current_syntax	syntax/manconf.vim	/^let b:current_syntax = "manconf"$/;"	v
b:current_syntax	syntax/maple.vim	/^let b:current_syntax = "maple"$/;"	v
b:current_syntax	syntax/masm.vim	/^let b:current_syntax = "masm"$/;"	v
b:current_syntax	syntax/mason.vim	/^let b:current_syntax = "mason"$/;"	v
b:current_syntax	syntax/master.vim	/^let b:current_syntax = "master"$/;"	v
b:current_syntax	syntax/matlab.vim	/^let b:current_syntax = "matlab"$/;"	v
b:current_syntax	syntax/maxima.vim	/^let b:current_syntax = "maxima"$/;"	v
b:current_syntax	syntax/mel.vim	/^let b:current_syntax = "mel"$/;"	v
b:current_syntax	syntax/messages.vim	/^let b:current_syntax = "messages"$/;"	v
b:current_syntax	syntax/mf.vim	/^let b:current_syntax = "mf"$/;"	v
b:current_syntax	syntax/mgl.vim	/^let b:current_syntax = "mgl"$/;"	v
b:current_syntax	syntax/mgp.vim	/^let b:current_syntax = "mgp"$/;"	v
b:current_syntax	syntax/mib.vim	/^let b:current_syntax = "mib"$/;"	v
b:current_syntax	syntax/mma.vim	/^let b:current_syntax = "mma"$/;"	v
b:current_syntax	syntax/mmix.vim	/^let b:current_syntax = "mmix"$/;"	v
b:current_syntax	syntax/mmp.vim	/^let b:current_syntax = "mmp"$/;"	v
b:current_syntax	syntax/modconf.vim	/^let b:current_syntax = "modconf"$/;"	v
b:current_syntax	syntax/model.vim	/^let b:current_syntax = "model"$/;"	v
b:current_syntax	syntax/modsim3.vim	/^let b:current_syntax = "modsim3"$/;"	v
b:current_syntax	syntax/modula2.vim	/^let b:current_syntax = "modula2"$/;"	v
b:current_syntax	syntax/modula3.vim	/^let b:current_syntax = "modula3"$/;"	v
b:current_syntax	syntax/monk.vim	/^let b:current_syntax = "monk"$/;"	v
b:current_syntax	syntax/moo.vim	/^let b:current_syntax = "moo"$/;"	v
b:current_syntax	syntax/mp.vim	/^let b:current_syntax = "mp"$/;"	v
b:current_syntax	syntax/mplayerconf.vim	/^let b:current_syntax = "mplayerconf"$/;"	v
b:current_syntax	syntax/mrxvtrc.vim	/^let b:current_syntax = "mrxvtrc"$/;"	v
b:current_syntax	syntax/msidl.vim	/^let b:current_syntax = "msidl"$/;"	v
b:current_syntax	syntax/msmessages.vim	/^let b:current_syntax = "msmessages"$/;"	v
b:current_syntax	syntax/msql.vim	/^let b:current_syntax = "msql"$/;"	v
b:current_syntax	syntax/mush.vim	/^let b:current_syntax = "mush"$/;"	v
b:current_syntax	syntax/muttrc.vim	/^let b:current_syntax = "muttrc"$/;"	v
b:current_syntax	syntax/mysql.vim	/^let b:current_syntax = "mysql"$/;"	v
b:current_syntax	syntax/named.vim	/^let b:current_syntax = "named"$/;"	v
b:current_syntax	syntax/nanorc.vim	/^let b:current_syntax = "nanorc"$/;"	v
b:current_syntax	syntax/nasm.vim	/^let b:current_syntax = "nasm"$/;"	v
b:current_syntax	syntax/nastran.vim	/^let b:current_syntax = "nastran"$/;"	v
b:current_syntax	syntax/natural.vim	/^let b:current_syntax = "natural"$/;"	v
b:current_syntax	syntax/ncf.vim	/^let b:current_syntax = "ncf"$/;"	v
b:current_syntax	syntax/netrc.vim	/^let b:current_syntax = "netrc"$/;"	v
b:current_syntax	syntax/netrw.vim	/^let   b:current_syntax = "netrwlist"$/;"	v
b:current_syntax	syntax/nqc.vim	/^let b:current_syntax = "nqc"$/;"	v
b:current_syntax	syntax/nroff.vim	/^let b:current_syntax = "nroff"$/;"	v
b:current_syntax	syntax/nsis.vim	/^let b:current_syntax = "nsis"$/;"	v
b:current_syntax	syntax/objc.vim	/^let b:current_syntax = "objc"$/;"	v
b:current_syntax	syntax/objcpp.vim	/^let b:current_syntax = "objcpp"$/;"	v
b:current_syntax	syntax/ocaml.vim	/^let b:current_syntax = "ocaml"$/;"	v
b:current_syntax	syntax/occam.vim	/^let b:current_syntax = "occam"$/;"	v
b:current_syntax	syntax/omnimark.vim	/^let b:current_syntax = "omnimark"$/;"	v
b:current_syntax	syntax/openroad.vim	/^let b:current_syntax = "openroad"$/;"	v
b:current_syntax	syntax/opl.vim	/^let b:current_syntax = "opl"$/;"	v
b:current_syntax	syntax/ora.vim	/^let b:current_syntax = "ora"$/;"	v
b:current_syntax	syntax/pamconf.vim	/^let b:current_syntax = "pamconf"$/;"	v
b:current_syntax	syntax/papp.vim	/^let b:current_syntax = "papp"$/;"	v
b:current_syntax	syntax/pascal.vim	/^let b:current_syntax = "pascal"$/;"	v
b:current_syntax	syntax/passwd.vim	/^let b:current_syntax = "passwd"$/;"	v
b:current_syntax	syntax/pcap.vim	/^let b:current_syntax = "pcap"$/;"	v
b:current_syntax	syntax/pccts.vim	/^let b:current_syntax = "pccts"$/;"	v
b:current_syntax	syntax/pdf.vim	/^let b:current_syntax = "pdf"$/;"	v
b:current_syntax	syntax/perl.vim	/^let b:current_syntax = "perl"$/;"	v
b:current_syntax	syntax/pf.vim	/^let b:current_syntax = "pf"$/;"	v
b:current_syntax	syntax/pfmain.vim	/^let b:current_syntax = "pfmain"$/;"	v
b:current_syntax	syntax/php.vim	/^let b:current_syntax = "php"$/;"	v
b:current_syntax	syntax/pic.vim	/^let b:current_syntax = "pic"$/;"	v
b:current_syntax	syntax/pike.vim	/^let b:current_syntax = "pike"$/;"	v
b:current_syntax	syntax/pilrc.vim	/^let b:current_syntax = "pilrc"$/;"	v
b:current_syntax	syntax/pine.vim	/^let b:current_syntax = "pine"$/;"	v
b:current_syntax	syntax/pinfo.vim	/^let b:current_syntax = "pinfo"$/;"	v
b:current_syntax	syntax/plaintex.vim	/^let b:current_syntax = "plaintex"$/;"	v
b:current_syntax	syntax/plm.vim	/^let b:current_syntax = "plm"$/;"	v
b:current_syntax	syntax/plp.vim	/^let b:current_syntax = "plp"$/;"	v
b:current_syntax	syntax/plsql.vim	/^let b:current_syntax = "plsql"$/;"	v
b:current_syntax	syntax/po.vim	/^let b:current_syntax = "po"$/;"	v
b:current_syntax	syntax/pod.vim	/^let b:current_syntax = "pod"$/;"	v
b:current_syntax	syntax/postscr.vim	/^let b:current_syntax = "postscr"$/;"	v
b:current_syntax	syntax/pov.vim	/^let b:current_syntax = "pov"$/;"	v
b:current_syntax	syntax/povini.vim	/^let b:current_syntax = "povini"$/;"	v
b:current_syntax	syntax/ppd.vim	/^let b:current_syntax = "ppd"$/;"	v
b:current_syntax	syntax/ppwiz.vim	/^let b:current_syntax = "ppwiz"$/;"	v
b:current_syntax	syntax/prescribe.vim	/^let b:current_syntax = "prescribe"$/;"	v
b:current_syntax	syntax/privoxy.vim	/^let b:current_syntax = "privoxy"$/;"	v
b:current_syntax	syntax/procmail.vim	/^let b:current_syntax = "procmail"$/;"	v
b:current_syntax	syntax/progress.vim	/^let b:current_syntax = "progress"$/;"	v
b:current_syntax	syntax/prolog.vim	/^let b:current_syntax = "prolog"$/;"	v
b:current_syntax	syntax/promela.vim	/^let b:current_syntax = "promela"$/;"	v
b:current_syntax	syntax/protocols.vim	/^let b:current_syntax = "protocols"$/;"	v
b:current_syntax	syntax/psf.vim	/^let b:current_syntax = "psf"$/;"	v
b:current_syntax	syntax/ptcap.vim	/^let b:current_syntax = "ptcap"$/;"	v
b:current_syntax	syntax/purifylog.vim	/^let b:current_syntax = "purifylog"$/;"	v
b:current_syntax	syntax/pyrex.vim	/^let b:current_syntax = "pyrex"$/;"	v
b:current_syntax	syntax/python.vim	/^let b:current_syntax = "python"$/;"	v
b:current_syntax	syntax/qf.vim	/^let b:current_syntax = "qf"$/;"	v
b:current_syntax	syntax/quake.vim	/^let b:current_syntax = "quake"$/;"	v
b:current_syntax	syntax/r.vim	/^let b:current_syntax="r"$/;"	v
b:current_syntax	syntax/racc.vim	/^let b:current_syntax = "racc"$/;"	v
b:current_syntax	syntax/radiance.vim	/^let b:current_syntax = "radiance"$/;"	v
b:current_syntax	syntax/ratpoison.vim	/^let b:current_syntax = "ratpoison"$/;"	v
b:current_syntax	syntax/rc.vim	/^let b:current_syntax = "rc"$/;"	v
b:current_syntax	syntax/rcs.vim	/^let b:current_syntax = "rcs"$/;"	v
b:current_syntax	syntax/rcslog.vim	/^let b:current_syntax = "rcslog"$/;"	v
b:current_syntax	syntax/readline.vim	/^let b:current_syntax = "readline"$/;"	v
b:current_syntax	syntax/rebol.vim	/^let b:current_syntax = "rebol"$/;"	v
b:current_syntax	syntax/registry.vim	/^let b:current_syntax = "registry"$/;"	v
b:current_syntax	syntax/remind.vim	/^let b:current_syntax = "remind"$/;"	v
b:current_syntax	syntax/resolv.vim	/^let b:current_syntax = "resolv"$/;"	v
b:current_syntax	syntax/reva.vim	/^let b:current_syntax = "reva"$/;"	v
b:current_syntax	syntax/rexx.vim	/^let b:current_syntax = "rexx"$/;"	v
b:current_syntax	syntax/rhelp.vim	/^let   b:current_syntax = "rhelp"$/;"	v
b:current_syntax	syntax/rib.vim	/^let b:current_syntax = "rib"$/;"	v
b:current_syntax	syntax/rnc.vim	/^let b:current_syntax = "rnc"$/;"	v
b:current_syntax	syntax/rnoweb.vim	/^let   b:current_syntax = "rnoweb"$/;"	v
b:current_syntax	syntax/robots.vim	/^let b:current_syntax = "robots"$/;"	v
b:current_syntax	syntax/rpcgen.vim	/^let b:current_syntax = "rpcgen"$/;"	v
b:current_syntax	syntax/rpl.vim	/^let b:current_syntax = "rpl"$/;"	v
b:current_syntax	syntax/rst.vim	/^let b:current_syntax = "rst"$/;"	v
b:current_syntax	syntax/rtf.vim	/^let b:current_syntax = "rtf"$/;"	v
b:current_syntax	syntax/ruby.vim	/^let b:current_syntax = "ruby"$/;"	v
b:current_syntax	syntax/samba.vim	/^let b:current_syntax = "samba"$/;"	v
b:current_syntax	syntax/sas.vim	/^let b:current_syntax = "sas"$/;"	v
b:current_syntax	syntax/sass.vim	/^let b:current_syntax = "sass"$/;"	v
b:current_syntax	syntax/sather.vim	/^let b:current_syntax = "sather"$/;"	v
b:current_syntax	syntax/scheme.vim	/^let b:current_syntax = "scheme"$/;"	v
b:current_syntax	syntax/scilab.vim	/^let b:current_syntax = "scilab"$/;"	v
b:current_syntax	syntax/screen.vim	/^let b:current_syntax = "screen"$/;"	v
b:current_syntax	syntax/sd.vim	/^let b:current_syntax = "sd"$/;"	v
b:current_syntax	syntax/sdl.vim	/^let b:current_syntax = "sdl"$/;"	v
b:current_syntax	syntax/sed.vim	/^let b:current_syntax = "sed"$/;"	v
b:current_syntax	syntax/sensors.vim	/^let b:current_syntax = "sensors"$/;"	v
b:current_syntax	syntax/services.vim	/^let b:current_syntax = "services"$/;"	v
b:current_syntax	syntax/setserial.vim	/^let b:current_syntax = "setserial"$/;"	v
b:current_syntax	syntax/sgml.vim	/^let b:current_syntax = "sgml"$/;"	v
b:current_syntax	syntax/sgmldecl.vim	/^let b:current_syntax = "sgmldecl"$/;"	v
b:current_syntax	syntax/sgmllnx.vim	/^let b:current_syntax = "sgmllnx"$/;"	v
b:current_syntax	syntax/sh.vim	/^ let b:current_syntax = "bash"$/;"	v
b:current_syntax	syntax/sh.vim	/^ let b:current_syntax = "ksh"$/;"	v
b:current_syntax	syntax/sh.vim	/^ let b:current_syntax = "sh"$/;"	v
b:current_syntax	syntax/sicad.vim	/^let b:current_syntax = "sicad"$/;"	v
b:current_syntax	syntax/sieve.vim	/^let b:current_syntax = "sieve"$/;"	v
b:current_syntax	syntax/simula.vim	/^let b:current_syntax = "simula"$/;"	v
b:current_syntax	syntax/sinda.vim	/^let b:current_syntax = "sinda"$/;"	v
b:current_syntax	syntax/sindacmp.vim	/^let b:current_syntax = "sindacmp"$/;"	v
b:current_syntax	syntax/sindaout.vim	/^let b:current_syntax = "sindaout"$/;"	v
b:current_syntax	syntax/sisu.vim	/^let b:current_syntax = "sisu"$/;"	v
b:current_syntax	syntax/skill.vim	/^let b:current_syntax = "skill"$/;"	v
b:current_syntax	syntax/sl.vim	/^let b:current_syntax = "sl"$/;"	v
b:current_syntax	syntax/slang.vim	/^let b:current_syntax = "slang"$/;"	v
b:current_syntax	syntax/slice.vim	/^let b:current_syntax = "slice"$/;"	v
b:current_syntax	syntax/slpconf.vim	/^let b:current_syntax = "slpconf"$/;"	v
b:current_syntax	syntax/slpreg.vim	/^let b:current_syntax = "slpreg"$/;"	v
b:current_syntax	syntax/slpspi.vim	/^let b:current_syntax = "slpspi"$/;"	v
b:current_syntax	syntax/slrnrc.vim	/^let b:current_syntax = "slrnrc"$/;"	v
b:current_syntax	syntax/slrnsc.vim	/^let b:current_syntax = "slrnsc"$/;"	v
b:current_syntax	syntax/sm.vim	/^let b:current_syntax = "sm"$/;"	v
b:current_syntax	syntax/smarty.vim	/^let b:current_syntax = "smarty"$/;"	v
b:current_syntax	syntax/smcl.vim	/^let b:current_syntax = "smcl"$/;"	v
b:current_syntax	syntax/smil.vim	/^let b:current_syntax = "smil"$/;"	v
b:current_syntax	syntax/smith.vim	/^let b:current_syntax = "smith"$/;"	v
b:current_syntax	syntax/sml.vim	/^let b:current_syntax = "sml"$/;"	v
b:current_syntax	syntax/snnsnet.vim	/^let b:current_syntax = "snnsnet"$/;"	v
b:current_syntax	syntax/snnspat.vim	/^let b:current_syntax = "snnspat"$/;"	v
b:current_syntax	syntax/snnsres.vim	/^let b:current_syntax = "snnsres"$/;"	v
b:current_syntax	syntax/snobol4.vim	/^let b:current_syntax = "snobol4"$/;"	v
b:current_syntax	syntax/spec.vim	/^let b:current_syntax = "spec"$/;"	v
b:current_syntax	syntax/specman.vim	/^let b:current_syntax = "specman"$/;"	v
b:current_syntax	syntax/spice.vim	/^let b:current_syntax = "spice"$/;"	v
b:current_syntax	syntax/splint.vim	/^let b:current_syntax = "splint"$/;"	v
b:current_syntax	syntax/spup.vim	/^let b:current_syntax = "spup"$/;"	v
b:current_syntax	syntax/spyce.vim	/^let b:current_syntax = "spyce"$/;"	v
b:current_syntax	syntax/sqlanywhere.vim	/^let b:current_syntax = "sqlanywhere"$/;"	v
b:current_syntax	syntax/sqlforms.vim	/^let b:current_syntax = "sqlforms"$/;"	v
b:current_syntax	syntax/sqlinformix.vim	/^let b:current_syntax = "sqlinformix"$/;"	v
b:current_syntax	syntax/sqlj.vim	/^let b:current_syntax = "sqlj"$/;"	v
b:current_syntax	syntax/sqloracle.vim	/^let b:current_syntax = "sql"$/;"	v
b:current_syntax	syntax/sqr.vim	/^let b:current_syntax = "sqr"$/;"	v
b:current_syntax	syntax/squid.vim	/^let b:current_syntax = "squid"$/;"	v
b:current_syntax	syntax/sshconfig.vim	/^let b:current_syntax = "sshconfig"$/;"	v
b:current_syntax	syntax/sshdconfig.vim	/^let b:current_syntax = "sshdconfig"$/;"	v
b:current_syntax	syntax/st.vim	/^let b:current_syntax = "st"$/;"	v
b:current_syntax	syntax/stata.vim	/^let b:current_syntax = "stata"$/;"	v
b:current_syntax	syntax/stp.vim	/^let b:current_syntax = "stp"$/;"	v
b:current_syntax	syntax/strace.vim	/^let b:current_syntax = "strace"$/;"	v
b:current_syntax	syntax/sudoers.vim	/^let b:current_syntax = "sudoers"$/;"	v
b:current_syntax	syntax/svkannotate.vim	/^let b:current_syntax="svkAnnotate"$/;"	v
b:current_syntax	syntax/svn.vim	/^let b:current_syntax = "svn"$/;"	v
b:current_syntax	syntax/svnannotate.vim	/^let b:current_syntax="svnAnnotate"$/;"	v
b:current_syntax	syntax/sysctl.vim	/^let b:current_syntax = "sysctl"$/;"	v
b:current_syntax	syntax/tads.vim	/^let b:current_syntax = "tads"$/;"	v
b:current_syntax	syntax/tags.vim	/^let b:current_syntax = "tags"$/;"	v
b:current_syntax	syntax/tak.vim	/^let b:current_syntax = "tak"$/;"	v
b:current_syntax	syntax/takcmp.vim	/^let b:current_syntax = "takcmp"$/;"	v
b:current_syntax	syntax/takout.vim	/^let b:current_syntax = "takout"$/;"	v
b:current_syntax	syntax/tcl.vim	/^let b:current_syntax = "tcl"$/;"	v
b:current_syntax	syntax/tcsh.vim	/^let b:current_syntax = 'tcsh'$/;"	v
b:current_syntax	syntax/terminfo.vim	/^let b:current_syntax = "terminfo"$/;"	v
b:current_syntax	syntax/tex.vim	/^let   b:current_syntax = "tex"$/;"	v
b:current_syntax	syntax/texinfo.vim	/^let b:current_syntax = "texinfo"$/;"	v
b:current_syntax	syntax/texmf.vim	/^let b:current_syntax = "texmf"$/;"	v
b:current_syntax	syntax/tf.vim	/^let b:current_syntax = "tf"$/;"	v
b:current_syntax	syntax/tidy.vim	/^let b:current_syntax = "tidy"$/;"	v
b:current_syntax	syntax/tilde.vim	/^let b:current_syntax = "tilde"$/;"	v
b:current_syntax	syntax/tli.vim	/^let b:current_syntax = "tli"$/;"	v
b:current_syntax	syntax/tpp.vim	/^let b:current_syntax = "tpp"$/;"	v
b:current_syntax	syntax/trasys.vim	/^let b:current_syntax = "trasys"$/;"	v
b:current_syntax	syntax/tsalt.vim	/^let b:current_syntax = "tsalt"$/;"	v
b:current_syntax	syntax/tsscl.vim	/^let b:current_syntax = "tsscl"$/;"	v
b:current_syntax	syntax/tssgm.vim	/^let b:current_syntax = "tssgm"$/;"	v
b:current_syntax	syntax/tssop.vim	/^let b:current_syntax = "tssop"$/;"	v
b:current_syntax	syntax/txt.vim	/^let b:current_syntax = 'txt'$/;"	v
b:current_syntax	syntax/uc.vim	/^let b:current_syntax = "uc"$/;"	v
b:current_syntax	syntax/udevconf.vim	/^let b:current_syntax = "udevconf"$/;"	v
b:current_syntax	syntax/udevperm.vim	/^let b:current_syntax = "udevperm"$/;"	v
b:current_syntax	syntax/udevrules.vim	/^let b:current_syntax = "udevrules"$/;"	v
b:current_syntax	syntax/uil.vim	/^let b:current_syntax = "uil"$/;"	v
b:current_syntax	syntax/updatedb.vim	/^let b:current_syntax = "updatedb"$/;"	v
b:current_syntax	syntax/valgrind.vim	/^let b:current_syntax = "valgrind"$/;"	v
b:current_syntax	syntax/vb.vim	/^let b:current_syntax = "vb"$/;"	v
b:current_syntax	syntax/vcscommit.vim	/^let b:current_syntax = "vcscommit"$/;"	v
b:current_syntax	syntax/vera.vim	/^let b:current_syntax = "vera"$/;"	v
b:current_syntax	syntax/verilog.vim	/^let b:current_syntax = "verilog"$/;"	v
b:current_syntax	syntax/verilogams.vim	/^let b:current_syntax = "verilogams"$/;"	v
b:current_syntax	syntax/vgrindefs.vim	/^let b:current_syntax = "vgrindefs"$/;"	v
b:current_syntax	syntax/vhdl.vim	/^let b:current_syntax = "vhdl"$/;"	v
b:current_syntax	syntax/vim.vim	/^let b:current_syntax = "vim"$/;"	v
b:current_syntax	syntax/viminfo.vim	/^let b:current_syntax = "viminfo"$/;"	v
b:current_syntax	syntax/virata.vim	/^let b:current_syntax = "virata"$/;"	v
b:current_syntax	syntax/vmasm.vim	/^let b:current_syntax = "vmasm"$/;"	v
b:current_syntax	syntax/voscm.vim	/^let b:current_syntax = "voscm"$/;"	v
b:current_syntax	syntax/vrml.vim	/^let b:current_syntax = "vrml"$/;"	v
b:current_syntax	syntax/vsejcl.vim	/^let b:current_syntax = "vsejcl"$/;"	v
b:current_syntax	syntax/wdiff.vim	/^let b:current_syntax = "wdiff"$/;"	v
b:current_syntax	syntax/web.vim	/^let b:current_syntax = "web"$/;"	v
b:current_syntax	syntax/webmacro.vim	/^let b:current_syntax = "webmacro"$/;"	v
b:current_syntax	syntax/wget.vim	/^let b:current_syntax = "wget"$/;"	v
b:current_syntax	syntax/winbatch.vim	/^let b:current_syntax = "winbatch"$/;"	v
b:current_syntax	syntax/wml.vim	/^let b:current_syntax = "wml"$/;"	v
b:current_syntax	syntax/wsh.vim	/^let b:current_syntax = "wsh"$/;"	v
b:current_syntax	syntax/wsml.vim	/^let b:current_syntax = "wsml"$/;"	v
b:current_syntax	syntax/wvdial.vim	/^let b:current_syntax = "wvdial"$/;"	v
b:current_syntax	syntax/xbl.vim	/^let b:current_syntax = "xbl"$/;"	v
b:current_syntax	syntax/xdefaults.vim	/^let b:current_syntax = "xdefaults"$/;"	v
b:current_syntax	syntax/xf86conf.vim	/^let b:current_syntax = "xf86conf"$/;"	v
b:current_syntax	syntax/xhtml.vim	/^let b:current_syntax = "xhtml"$/;"	v
b:current_syntax	syntax/xinetd.vim	/^let b:current_syntax = "xinetd"$/;"	v
b:current_syntax	syntax/xkb.vim	/^let b:current_syntax = "xkb"$/;"	v
b:current_syntax	syntax/xmath.vim	/^let b:current_syntax = "xmath"$/;"	v
b:current_syntax	syntax/xml.vim	/^let b:current_syntax = "xml"$/;"	v
b:current_syntax	syntax/xmodmap.vim	/^let b:current_syntax = "xmodmap"$/;"	v
b:current_syntax	syntax/xpm.vim	/^let b:current_syntax = "xpm"$/;"	v
b:current_syntax	syntax/xpm2.vim	/^let b:current_syntax = "xpm2"$/;"	v
b:current_syntax	syntax/xs.vim	/^let b:current_syntax = "xs"$/;"	v
b:current_syntax	syntax/xxd.vim	/^let b:current_syntax = "xxd"$/;"	v
b:current_syntax	syntax/yacc.vim	/^let b:current_syntax = "yacc"$/;"	v
b:current_syntax	syntax/yaml.vim	/^let b:current_syntax = "yaml"$/;"	v
b:current_syntax	syntax/z8a.vim	/^let b:current_syntax = "z8a"$/;"	v
b:current_syntax	syntax/zsh.vim	/^let b:current_syntax = "zsh"$/;"	v
b:curret_syntax	syntax/tasm.vim	/^let b:curret_syntax = "tasm"$/;"	v
b:dedentStmts	indent/mupad.vim	/^let b:dedentStmts=''$/;"	v
b:did_BASH_ftplugin	ftplugin/sh.vim	/^let b:did_BASH_ftplugin = 1$/;"	v
b:did_C_ftplugin	ftplugin/c.vim	/^let b:did_C_ftplugin = 1$/;"	v
b:did_brackets	ftplugin/latex-suite/brackets.vim	/^let b:did_brackets = 1$/;"	v
b:did_ftplugin	ftplugin/a2ps.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/aap.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/abaqus.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/ada.vim	/^let b:did_ftplugin = 45$/;"	v
b:did_ftplugin	ftplugin/alsaconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/ant.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/arch.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/aspvbs.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/bdf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/bst.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/calendar.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/cdrdaoconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/changelog.vim	/^  let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/cobol.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/conf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/config.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/context.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/crm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/cs.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/csc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/csh.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/css.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/cvsrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/debchangelog.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	ftplugin/debcontrol.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	ftplugin/denyhosts.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/dictconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/dictdconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/diff.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/dircolors.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/dosbatch.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/dosini.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/dtd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/dtrace.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/elinks.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/eruby.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/eterm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/fetchmail.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/flexwiki.vim	/^let b:did_ftplugin = 1  " Don't load another plugin for this buffer$/;"	v
b:did_ftplugin	ftplugin/fortran.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/framescript.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/fvwm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/git.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/gitcommit.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/gitconfig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/gitrebase.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/gpg.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/group.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/grub.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/haml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/hamster.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/haskell.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/help.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/hostconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/hostsaccess.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/html.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/indent.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/initex.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/ishd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/java.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/javascript.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/jsp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/kconfig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/ld.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/lftp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/libao.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/limits.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/lisp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/loginaccess.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/logindefs.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/logtalk.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/lprolog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/lua.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/m4.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/mail.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/mailaliases.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/mailcap.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/make.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/man.vim	/^  let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/manconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/matlab.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/mf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/modconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/mp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/mplayerconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/mrxvtrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/msmessages.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/mupad.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/muttrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/nanorc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/netrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/nsis.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/ocaml.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	ftplugin/occam.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/old.c.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/pamconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/pascal.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/passwd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/pdf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/perl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/php.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/pinfo.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/postscr.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/procmail.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/prolog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/protocols.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/python.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/quake.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/racc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/readline.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/reva.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/rnc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/rpl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/rst.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/ruby.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/sass.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/screen.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/sensors.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/services.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/setserial.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/sgml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/sieve.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/slpconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/slpreg.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/slpspi.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/spec.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/sql.vim	/^let b:did_ftplugin     = 1$/;"	v
b:did_ftplugin	ftplugin/sshconfig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/sudoers.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/svg.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/sysctl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/tcsh.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/terminfo.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/udevconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/udevperm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/udevrules.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/updatedb.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/vb.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/verilog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/vhdl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/vim.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/xdefaults.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/xf86conf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/xhtml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/xinetd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/xml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/xmodmap.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/xsd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/xslt.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/yaml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	ftplugin/zsh.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_html_mappings	ftplugin/html/HTML.vim	/^let b:did_html_mappings = 1$/;"	v
b:did_html_mappings_init	ftplugin/html/HTML.vim	/^    let b:did_html_mappings_init=-1$/;"	v
b:did_html_mappings_init	ftplugin/html/HTML.vim	/^let b:did_html_mappings_init = 1$/;"	v
b:did_indent	indent/ada.vim	/^let b:did_indent = 45$/;"	v
b:did_indent	indent/awk.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/bib.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/bst.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/c.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/cdl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/ch.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/changelog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/cmake.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/cobol.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/cpp.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/cs.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/css.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/d.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/dictconf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/dictdconf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/dtrace.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/dylan.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/eiffel.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/erlang.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/eruby.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/eterm.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/fortran.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/framescript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/gitconfig.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/haml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/hamster.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/html.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/idlang.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/ishd.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/java.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/javascript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/ld.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/lisp.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/logtalk.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/lua.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/make.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/matlab.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/mma.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/mp.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/mupad.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/objc.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/ocaml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/occam.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/pascal.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/perl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/php.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/postscr.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/pov.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/prolog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/python.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/readline.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/rpl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/rst.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/ruby.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/sass.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/sdl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/sh.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/sml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/sqlanywhere.vim	/^let b:did_indent     = 1$/;"	v
b:did_indent	indent/tcl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/tcsh.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/tex.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/tf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/tilde.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/vb.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/verilog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/vhdl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/vim.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/xf86conf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/xinetd.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/xml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/yacc.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	syntax/spyce.vim	/^let b:did_indent = 1	     " don't perform HTML indentation!$/;"	v
b:do_xhtml_mappings	ftplugin/html/HTML.vim	/^    let b:do_xhtml_mappings=0$/;"	v
b:do_xhtml_mappings	ftplugin/html/HTML.vim	/^    let b:do_xhtml_mappings=1$/;"	v
b:do_xhtml_mappings	ftplugin/html/HTML.vim	/^  let b:do_xhtml_mappings = 0$/;"	v
b:do_xhtml_mappings	ftplugin/html/HTML.vim	/^  let b:do_xhtml_mappings = 1$/;"	v
b:docbk_type	syntax/docbk.vim	/^    let b:docbk_type = 'sgml'$/;"	v
b:docbk_type	syntax/docbk.vim	/^    let b:docbk_type = 'xml'$/;"	v
b:docbk_type	syntax/docbksgml.vim	/^let b:docbk_type="sgml"$/;"	v
b:docbk_type	syntax/docbkxml.vim	/^let b:docbk_type="xml"$/;"	v
b:doneTexCompiler	compiler/tex.vim	/^let b:doneTexCompiler = 1$/;"	v
b:done_smartspace	ftplugin/latex-suite/smartspace.vim	/^let b:done_smartspace = 1$/;"	v
b:doxygen_syntax_save	syntax/doxygen.vim	/^    let b:doxygen_syntax_save=b:current_syntax$/;"	v
b:enforce_freedesktop_standard	syntax/desktop.vim	/^	let b:enforce_freedesktop_standard = 0$/;"	v
b:enforce_freedesktop_standard	syntax/desktop.vim	/^	let b:enforce_freedesktop_standard = 1$/;"	v
b:eruby_nest_level	syntax/eruby.vim	/^  let b:eruby_nest_level = 1$/;"	v
b:eruby_nest_level	syntax/eruby.vim	/^  let b:eruby_nest_level = strlen(substitute(substitute(substitute(expand("%:t"),'@','','g'),'\\c\\.\\%(erb\\|rhtml\\)\\>','@','g'),'[^@]','','g'))$/;"	v
b:eruby_subtype	ftplugin/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	ftplugin/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	ftplugin/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	ftplugin/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	ftplugin/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	ftplugin/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_subtype	ftplugin/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eruby_subtype	ftplugin/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype	syntax/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	syntax/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	syntax/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	syntax/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	syntax/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	syntax/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_subtype	syntax/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eruby_subtype	syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype_indentexpr	indent/eruby.vim	/^let b:eruby_subtype_indentexpr = &l:indentexpr$/;"	v
b:eterm_minlines	syntax/eterm.vim	/^  let b:eterm_minlines = 50$/;"	v
b:eterm_minlines	syntax/eterm.vim	/^  let b:eterm_minlines = eterm_minlines$/;"	v
b:extfname	syntax/tex.vim	/^let b:extfname=expand("%:e")$/;"	v
b:fortran_dialect	syntax/fortran.vim	/^    let b:fortran_dialect = "F"$/;"	v
b:fortran_dialect	syntax/fortran.vim	/^    let b:fortran_dialect = "elf"$/;"	v
b:fortran_dialect	syntax/fortran.vim	/^    let b:fortran_dialect = "f77"$/;"	v
b:fortran_dialect	syntax/fortran.vim	/^    let b:fortran_dialect = "f90"$/;"	v
b:fortran_dialect	syntax/fortran.vim	/^    let b:fortran_dialect = "f95"$/;"	v
b:fortran_dialect	syntax/fortran.vim	/^    let b:fortran_dialect = "unknown"$/;"	v
b:fortran_dialect	syntax/fortran.vim	/^    let b:fortran_dialect = matchstr(fortran_dialect,'\\<\\(f\\(9[05]\\|77\\)\\|elf\\|F\\)\\>')$/;"	v
b:fortran_dialect	syntax/fortran.vim	/^  let b:fortran_dialect = "unknown"$/;"	v
b:fortran_fixed_source	ftplugin/fortran.vim	/^	let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	ftplugin/fortran.vim	/^    let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	ftplugin/fortran.vim	/^    let b:fortran_fixed_source = 1$/;"	v
b:fortran_fixed_source	indent/fortran.vim	/^	let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	indent/fortran.vim	/^    let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	indent/fortran.vim	/^    let b:fortran_fixed_source = 1$/;"	v
b:fortran_fixed_source	syntax/fortran.vim	/^	let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	syntax/fortran.vim	/^    let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	syntax/fortran.vim	/^    let b:fortran_fixed_source = 1$/;"	v
b:fortran_retype	syntax/fortran.vim	/^  let b:fortran_retype = getline(1)." ".getline(2)." ".getline(3)$/;"	v
b:framescript_minlines	syntax/framescript.vim	/^let b:framescript_minlines = exists("framescript_minlines")$/;"	v
b:git_dir	ftplugin/git.vim	/^        let b:git_dir = $GIT_DIR$/;"	v
b:git_dir	ftplugin/git.vim	/^        let b:git_dir = matchstr(expand('%:p'),'.*\\.git\\>')$/;"	v
b:git_dir	ftplugin/git.vim	/^        let b:git_dir = substitute(b:git_dir,'\\\\','\/','g')$/;"	v
b:git_dir	ftplugin/gitcommit.vim	/^    let b:git_dir = expand("%:p:h")$/;"	v
b:hs_chs	syntax/chaskell.vim	/^let b:hs_chs=1$/;"	v
b:html_omni_flavor	ftplugin/html.vim	/^                let b:html_omni_flavor .= 'f'$/;"	v
b:html_omni_flavor	ftplugin/html.vim	/^                let b:html_omni_flavor .= 's'$/;"	v
b:html_omni_flavor	ftplugin/html.vim	/^                let b:html_omni_flavor .= 't'$/;"	v
b:html_omni_flavor	ftplugin/html.vim	/^                let b:html_omni_flavor = 'html40'$/;"	v
b:html_omni_flavor	ftplugin/html.vim	/^                let b:html_omni_flavor = 'html401'$/;"	v
b:html_omni_flavor	ftplugin/html.vim	/^                let b:html_omni_flavor = 'xhtml10'$/;"	v
b:html_omni_flavor	ftplugin/html.vim	/^            let b:html_omni_flavor = 'html32'$/;"	v
b:html_omni_flavor	ftplugin/html.vim	/^            let b:html_omni_flavor = 'html401t'$/;"	v
b:html_omni_flavor	ftplugin/html.vim	/^            let b:html_omni_flavor = 'xhtml10s'$/;"	v
b:html_omni_flavor	ftplugin/html.vim	/^            let b:html_omni_flavor = 'xhtml11'$/;"	v
b:html_tag_case	ftplugin/html/HTML.vim	/^      let b:html_tag_case = 'lowercase'$/;"	v
b:html_tag_case	ftplugin/html/HTML.vim	/^      let b:html_tag_case = 'uppercase'$/;"	v
b:html_tag_case	ftplugin/html/HTML.vim	/^      let b:html_tag_case = b:html_tag_case_save$/;"	v
b:html_tag_case	ftplugin/html/HTML.vim	/^  let b:html_tag_case = 'lowercase'$/;"	v
b:html_tag_case_save	ftplugin/html/HTML.vim	/^  let b:html_tag_case_save = b:html_tag_case$/;"	v
b:i	syntax/hitest.vim	/^   let b:i = b:i + 1$/;"	v
b:i	syntax/hitest.vim	/^let b:i = 1$/;"	v
b:indentStmts	indent/mupad.vim	/^let b:indentStmts=''$/;"	v
b:indent_use_syntax	indent/perl.vim	/^let b:indent_use_syntax = has("syntax")$/;"	v
b:internal_html_template	ftplugin/html/HTML.vim	/^  let b:internal_html_template = "<!DOCTYPE HTML PUBLIC \\"-\/\/W3C\/\/DTD HTML 4.01 Transitional\/\/EN\\"\\n" .$/;"	v
b:internal_html_template	ftplugin/html/HTML.vim	/^  let b:internal_html_template = "<!DOCTYPE html PUBLIC \\"-\/\/W3C\/\/DTD XHTML 1.0 Transitional\/\/EN\\"\\n" .$/;"	v
b:internal_html_template	ftplugin/html/HTML.vim	/^  let b:internal_html_template = substitute(b:internal_html_template, ' \/>', '>', 'g')$/;"	v
b:internal_html_template	ftplugin/html/HTML.vim	/^let b:internal_html_template = s:ConvertCase(b:internal_html_template)$/;"	v
b:is_bash	ftplugin/sh.vim	/^let b:is_bash           = 1$/;"	v
b:is_bash	syntax/sh.vim	/^    let b:is_bash= 1$/;"	v
b:is_bash	syntax/sh.vim	/^  let b:is_bash= 1$/;"	v
b:is_kornshell	syntax/sh.vim	/^    let b:is_kornshell= 1$/;"	v
b:is_sh	syntax/sh.vim	/^    let b:is_sh= 1$/;"	v
b:keymap	keymap/czech_utf-8.vim	/^let b:keymap = "czech"$/;"	v
b:keymap	keymap/magyar_utf-8.vim	/^let b:keymap = "magyar"$/;"	v
b:keymap_name	keymap/accents.vim	/^let b:keymap_name = "acc"$/;"	v
b:keymap_name	keymap/arabic_utf-8.vim	/^let b:keymap_name = "arab"$/;"	v
b:keymap_name	keymap/bulgarian-bds.vim	/^let b:keymap_name = "bds"$/;"	v
b:keymap_name	keymap/bulgarian-phonetic.vim	/^let b:keymap_name = "pho"$/;"	v
b:keymap_name	keymap/canfr-win.vim	/^let b:keymap_name = "canfr"$/;"	v
b:keymap_name	keymap/croatian_cp1250.vim	/^let b:keymap_name = "croatian-cp1250"$/;"	v
b:keymap_name	keymap/croatian_iso-8859-2.vim	/^let b:keymap_name = "croatian-iso-8859-2"$/;"	v
b:keymap_name	keymap/croatian_utf-8.vim	/^let b:keymap_name = "croatian-UTF-8"$/;"	v
b:keymap_name	keymap/esperanto_utf-8.vim	/^let b:keymap_name = "Eo"$/;"	v
b:keymap_name	keymap/greek_cp1253.vim	/^let b:keymap_name = "greek"$/;"	v
b:keymap_name	keymap/greek_cp737.vim	/^let b:keymap_name = "greek"$/;"	v
b:keymap_name	keymap/greek_iso-8859-7.vim	/^let b:keymap_name = "greek"$/;"	v
b:keymap_name	keymap/greek_utf-8.vim	/^let b:keymap_name = "grk"$/;"	v
b:keymap_name	keymap/hebrew_cp1255.vim	/^let b:keymap_name = "heb"$/;"	v
b:keymap_name	keymap/hebrew_iso-8859-8.vim	/^let b:keymap_name = "heb"$/;"	v
b:keymap_name	keymap/hebrew_utf-8.vim	/^let b:keymap_name = "heb"$/;"	v
b:keymap_name	keymap/hebrewp_cp1255.vim	/^let b:keymap_name = "hebp"$/;"	v
b:keymap_name	keymap/hebrewp_iso-8859-8.vim	/^let b:keymap_name = "hebp"$/;"	v
b:keymap_name	keymap/hebrewp_utf-8.vim	/^let b:keymap_name = "hebp"$/;"	v
b:keymap_name	keymap/kana.vim	/^let b:keymap_name = "kana"$/;"	v
b:keymap_name	keymap/lithuanian-baltic.vim	/^let b:keymap_name = "lt"$/;"	v
b:keymap_name	keymap/mongolian_utf-8.vim	/^let b:keymap_name = "mn"$/;"	v
b:keymap_name	keymap/persian-iranian_utf-8.vim	/^let b:keymap_name = "per"$/;"	v
b:keymap_name	keymap/pinyin.vim	/^let b:keymap_name = "py"$/;"	v
b:keymap_name	keymap/polish-slash_cp1250.vim	/^let b:keymap_name = "PL-slash-WIN"$/;"	v
b:keymap_name	keymap/polish-slash_cp852.vim	/^let b:keymap_name = "PL-slash-DOS"$/;"	v
b:keymap_name	keymap/polish-slash_iso-8859-2.vim	/^let b:keymap_name = "PL-slash-ISO"$/;"	v
b:keymap_name	keymap/polish-slash_utf-8.vim	/^let b:keymap_name = "PL-slash-UTF"$/;"	v
b:keymap_name	keymap/russian-dvorak.vim	/^let b:keymap_name = "ru"$/;"	v
b:keymap_name	keymap/russian-jcuken.vim	/^let b:keymap_name = "ru"$/;"	v
b:keymap_name	keymap/russian-jcukenwin.vim	/^let b:keymap_name = "ru"$/;"	v
b:keymap_name	keymap/russian-yawerty.vim	/^let b:keymap_name = "ru"$/;"	v
b:keymap_name	keymap/serbian-latin_utf-8.vim	/^let b:keymap_name = "serbian-UTF-8"$/;"	v
b:keymap_name	keymap/serbian_cp1250.vim	/^let b:keymap_name = "serbian-cp1250"$/;"	v
b:keymap_name	keymap/serbian_cp1251.vim	/^let b:keymap_name = "serbian-cp1251"$/;"	v
b:keymap_name	keymap/serbian_iso-8859-2.vim	/^let b:keymap_name = "serbian-iso-8859-2"$/;"	v
b:keymap_name	keymap/serbian_iso-8859-5.vim	/^let b:keymap_name = "serbian-iso-8859-5"$/;"	v
b:keymap_name	keymap/serbian_utf-8.vim	/^let b:keymap_name = "serbian-UTF-8"$/;"	v
b:keymap_name	keymap/sinhala-phonetic_utf-8.vim	/^let b:keymap_name = "sinhala"$/;"	v
b:keymap_name	keymap/slovak_cp1250.vim	/^let b:keymap_name = "sk"$/;"	v
b:keymap_name	keymap/slovak_iso-8859-2.vim	/^let b:keymap_name = "sk"$/;"	v
b:keymap_name	keymap/slovak_utf-8.vim	/^let b:keymap_name = "sk"$/;"	v
b:keymap_name	keymap/tamil_tscii.vim	/^let b:keymap_name = "tamil_tscii"$/;"	v
b:keymap_name	keymap/thaana-phonetic_utf-8.vim	/^let b:keymap_name= "thaana"$/;"	v
b:keymap_name	keymap/ukrainian-dvorak.vim	/^let b:keymap_name = "uk"$/;"	v
b:keymap_name	keymap/ukrainian-jcuken.vim	/^let b:keymap_name = "uk"$/;"	v
b:keymap_name	keymap/vietnamese-viqr_utf-8.vim	/^let b:keymap_name = "vietnamese"$/;"	v
b:lhs_markup	syntax/lhaskell.vim	/^	    let b:lhs_markup = "unknown"$/;"	v
b:lhs_markup	syntax/lhaskell.vim	/^	    let b:lhs_markup = matchstr(lhs_markup,'\\<\\%(tex\\|none\\)\\>')$/;"	v
b:lhs_markup	syntax/lhaskell.vim	/^	let b:lhs_markup = "plain"$/;"	v
b:lhs_markup	syntax/lhaskell.vim	/^	let b:lhs_markup = "tex"$/;"	v
b:lhs_markup	syntax/lhaskell.vim	/^	let b:lhs_markup = "unknown"$/;"	v
b:lmax	syntax/fortran.vim	/^      let b:lmax = line("$")$/;"	v
b:lmax	syntax/fortran.vim	/^    let b:lmax = 250$/;"	v
b:ln	syntax/fortran.vim	/^      let b:ln = b:ln + 1$/;"	v
b:ln	syntax/fortran.vim	/^    let b:ln=1$/;"	v
b:main_syntax	syntax/groff.vim	/^let b:main_syntax = "nroff"$/;"	v
b:match_ignorecase	ftplugin/aspvbs.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	ftplugin/cobol.vim	/^    let b:match_ignorecase=1$/;"	v
b:match_ignorecase	ftplugin/context.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	ftplugin/fortran.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	ftplugin/hamster.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	ftplugin/html.vim	/^    let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	ftplugin/ishd.vim	/^    let b:match_ignorecase=0$/;"	v
b:match_ignorecase	ftplugin/lua.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	ftplugin/ocaml.vim	/^let b:match_ignorecase=0$/;"	v
b:match_ignorecase	ftplugin/plaintex.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	ftplugin/postscr.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	ftplugin/ruby.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	ftplugin/spec.vim	/^let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	ftplugin/sql.vim	/^    let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	ftplugin/vb.vim	/^    let b:match_ignorecase=1$/;"	v
b:match_ignorecase	ftplugin/verilog.vim	/^  let b:match_ignorecase=0$/;"	v
b:match_ignorecase	ftplugin/vhdl.vim	/^  let b:match_ignorecase=1$/;"	v
b:match_ignorecase	ftplugin/vim.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	ftplugin/xml.vim	/^    let b:match_ignorecase=0$/;"	v
b:match_skip	ftplugin/context.vim	/^  let b:match_skip = 'r:\\\\\\@<!\\%(\\\\\\\\\\)*%'$/;"	v
b:match_skip	ftplugin/dtrace.vim	/^let b:match_skip = 's:comment\\|string\\|character'$/;"	v
b:match_skip	ftplugin/old.c.vim	/^let b:match_skip = 's:comment\\|string\\|character'$/;"	v
b:match_skip	ftplugin/ruby.vim	/^  let b:match_skip =$/;"	v
b:match_skip	ftplugin/vim.vim	/^  let b:match_skip = 'getline(".") =~ "^\\\\s*sy\\\\%[ntax]\\\\s\\\\+region" ||$/;"	v
b:match_words	ftplugin/ada.vim	/^   let b:match_words =$/;"	v
b:match_words	ftplugin/aspvbs.vim	/^  let b:match_words =$/;"	v
b:match_words	ftplugin/cobol.vim	/^    let b:match_words=$/;"	v
b:match_words	ftplugin/context.vim	/^  let b:match_words = '(:),\\[:],{:},\\\\(:\\\\),\\\\\\[:\\\\],' .$/;"	v
b:match_words	ftplugin/csc.vim	/^    let b:match_words=$/;"	v
b:match_words	ftplugin/csh.vim	/^    let b:match_words =$/;"	v
b:match_words	ftplugin/dtd.vim	/^    let b:match_words = '<!--:-->,<!:>'$/;"	v
b:match_words	ftplugin/dtrace.vim	/^let b:match_words = &matchpairs$/;"	v
b:match_words	ftplugin/eruby.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	ftplugin/fortran.vim	/^  let b:match_words =$/;"	v
b:match_words	ftplugin/framescript.vim	/^  let b:match_words =$/;"	v
b:match_words	ftplugin/haml.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	ftplugin/hamster.vim	/^  let b:match_words =$/;"	v
b:match_words	ftplugin/html.vim	/^    let b:match_words = '<:>,' .$/;"	v
b:match_words	ftplugin/ishd.vim	/^    let b:match_words=$/;"	v
b:match_words	ftplugin/jsp.vim	/^    let b:match_words = s:match_words$/;"	v
b:match_words	ftplugin/lua.vim	/^  let b:match_words =$/;"	v
b:match_words	ftplugin/matlab.vim	/^	let b:match_words = '\\<if\\>\\|\\<while\\>\\|\\<for\\>\\|\\<switch\\>:' .$/;"	v
b:match_words	ftplugin/ocaml.vim	/^let b:match_words = b:mw$/;"	v
b:match_words	ftplugin/old.c.vim	/^let b:match_words = &matchpairs$/;"	v
b:match_words	ftplugin/pascal.vim	/^    let b:match_words='\\<\\%(begin\\|case\\|try\\)\\>:\\<end\\>'$/;"	v
b:match_words	ftplugin/pdf.vim	/^    let b:match_words = '\\<\\%(\\d\\+\\s\\+\\d\\+\\s\\+\\)obj\\>:\\<endobj\\>,\\<stream$:\\<endstream\\>,\\<xref\\>:\\<trailer\\>,<<:>>'$/;"	v
b:match_words	ftplugin/php.vim	/^    let b:match_words = '<?php:?>,\\<switch\\>:\\<endswitch\\>,' .$/;"	v
b:match_words	ftplugin/postscr.vim	/^  let b:match_words = '<<:>>,\\<begin\\>:\\<end\\>,\\<save\\>:\\<restore\\>,\\<gsave\\>:\\<grestore\\>'$/;"	v
b:match_words	ftplugin/ruby.vim	/^  let b:match_words =$/;"	v
b:match_words	ftplugin/spec.vim	/^let b:match_words =$/;"	v
b:match_words	ftplugin/sql.vim	/^    let b:match_words =$/;"	v
b:match_words	ftplugin/tex.vim	/^  let b:match_words .= ',\\\\begin\\s*\\({\\a\\+\\*\\=}\\):\\\\end\\s*\\1'$/;"	v
b:match_words	ftplugin/vb.vim	/^    let b:match_words=$/;"	v
b:match_words	ftplugin/verilog.vim	/^  let b:match_words=$/;"	v
b:match_words	ftplugin/vhdl.vim	/^  let b:match_words =$/;"	v
b:match_words	ftplugin/vim.vim	/^  let b:match_words =$/;"	v
b:match_words	ftplugin/xhtml.vim	/^    let b:match_words = s:match_words$/;"	v
b:match_words	ftplugin/xml.vim	/^    let b:match_words =$/;"	v
b:match_words	syntax/cdl.vim	/^let b:match_words='\\<if\\>:\\<then\\>:\\<elseif\\>:\\<else\\>:\\<endif\\>'$/;"	v
b:mw	ftplugin/ocaml.vim	/^let b:mw = ''$/;"	v
b:mw	ftplugin/ocaml.vim	/^let b:mw = b:mw . ',\\<\\(for\\|while\\)\\>:\\<do\\>:\\<done\\>,'$/;"	v
b:mw	ftplugin/ocaml.vim	/^let b:mw = b:mw . ',\\<\\(match\\|try\\)\\>:\\<with\\>'$/;"	v
b:mw	ftplugin/ocaml.vim	/^let b:mw = b:mw . ',\\<\\(object\\|sig\\|struct\\|begin\\)\\>:\\<end\\>'$/;"	v
b:mw	ftplugin/ocaml.vim	/^let b:mw = b:mw . ',\\<if\\>:\\<then\\>:\\<else\\>'$/;"	v
b:mw	ftplugin/ocaml.vim	/^let b:mw = b:mw . ',\\<let\\>:\\<and\\>:\\(\\<in\\>\\|;;\\)'$/;"	v
b:nroff_is_groff	syntax/groff.vim	/^let b:nroff_is_groff = 1$/;"	v
b:optionsset	indent/php.vim	/^let b:optionsset = 0$/;"	v
b:pdf_tagstack	ftplugin/pdf.vim	/^    let b:pdf_tagstack = []$/;"	v
b:ruby_no_expensive	syntax/haml.vim	/^let b:ruby_no_expensive = 1$/;"	v
b:ruby_no_expensive	syntax/ruby.vim	/^  let b:ruby_no_expensive = 1$/;"	v
b:spell_options	syntax/groovy.vim	/^let b:spell_options="contained"$/;"	v
b:spell_options	syntax/java.vim	/^let b:spell_options="contained"$/;"	v
b:spell_options	syntax/wsml.vim	/^let b:spell_options="contained"$/;"	v
b:sql_compl_savefunc	ftplugin/sql.vim	/^    let b:sql_compl_savefunc = &omnifunc$/;"	v
b:sql_vis	ftplugin/sql.vim	/^    let b:sql_vis = 1$/;"	v
b:synhead	syntax/hitest.vim	/^	    let b:synhead = b:synhead."s"$/;"	v
b:synhead	syntax/hitest.vim	/^	 let b:synhead = b:synhead." - filetype"$/;"	v
b:synhead	syntax/hitest.vim	/^	 let b:synhead = b:synhead.":".@a$/;"	v
b:synhead	syntax/hitest.vim	/^   let b:synhead = "Syntax highlighting groups"$/;"	v
b:test	syntax/fortran.vim	/^      let b:test = strpart(getline(b:ln),0,5)$/;"	v
b:tex_stylish	syntax/tex.vim	/^  let b:tex_stylish= 0$/;"	v
b:tex_stylish	syntax/tex.vim	/^  let b:tex_stylish= 1$/;"	v
b:tex_stylish	syntax/tex.vim	/^ let b:tex_stylish= g:tex_stylish$/;"	v
b:tw	ftplugin/latex-suite/smartspace.vim	/^let b:tw = &l:tw$/;"	v
b:undo_ftplugin	ftplugin/a2ps.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	ftplugin/aap.vim	/^let b:undo_ftplugin = "setl fo< com< et<"$/;"	v
b:undo_ftplugin	ftplugin/alsaconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/ant.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	ftplugin/arch.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/aspvbs.vim	/^let b:undo_ftplugin = "unlet! b:match_words b:match_ignorecase b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	ftplugin/bdf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/bst.vim	/^let b:undo_ftplugin = "setlocal com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/calendar.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	ftplugin/cdrdaoconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/changelog.vim	/^    let b:undo_ftplugin .= " tw<"$/;"	v
b:undo_ftplugin	ftplugin/changelog.vim	/^  let b:undo_ftplugin = "setl com< fo< et< ai<"$/;"	v
b:undo_ftplugin	ftplugin/cobol.vim	/^    let b:undo_ftplugin = b:undo_ftplugin .$/;"	v
b:undo_ftplugin	ftplugin/cobol.vim	/^let b:undo_ftplugin = "setlocal com< cms< fo< et< tw<" .$/;"	v
b:undo_ftplugin	ftplugin/conf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/config.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . b:undo_ftplugin$/;"	v
b:undo_ftplugin	ftplugin/context.vim	/^let b:undo_ftplugin = "setl com< cms< def< inc< sua< fo<"$/;"	v
b:undo_ftplugin	ftplugin/crm.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/csc.vim	/^let b:undo_ftplugin = "unlet! b:match_words"$/;"	v
b:undo_ftplugin	ftplugin/csh.vim	/^let b:undo_ftplugin = "setlocal commentstring< formatoptions<" .$/;"	v
b:undo_ftplugin	ftplugin/css.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo< ofu<"$/;"	v
b:undo_ftplugin	ftplugin/cvsrc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/debchangelog.vim	/^let b:undo_ftplugin = "setlocal tw< comments< foldmethod< foldexpr< foldtext<"$/;"	v
b:undo_ftplugin	ftplugin/debcontrol.vim	/^let b:undo_ftplugin = "setlocal tw< foldmethod< foldexpr< foldtext<"$/;"	v
b:undo_ftplugin	ftplugin/denyhosts.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/dictconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/dictdconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/diff.vim	/^let b:undo_ftplugin = "setl modeline<"$/;"	v
b:undo_ftplugin	ftplugin/dircolors.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/dosini.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/dtd.vim	/^let b:undo_ftplugin = "setlocal commentstring< comments< formatoptions<" .$/;"	v
b:undo_ftplugin	ftplugin/dtrace.vim	/^let b:undo_ftplugin = "setl fo< com< cms< isk<"$/;"	v
b:undo_ftplugin	ftplugin/elinks.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/eruby.vim	/^let b:undo_ftplugin = "setl cms< "$/;"	v
b:undo_ftplugin	ftplugin/eterm.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	ftplugin/fetchmail.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/flexwiki.vim	/^let b:undo_ftplugin = "setl tw< wrap< lbr< et< ts< fenc< bomb< ff<"$/;"	v
b:undo_ftplugin	ftplugin/fortran.vim	/^let b:undo_ftplugin = "setl fo< com< tw< cms< et< inc<" | "{{{1$/;"	v
b:undo_ftplugin	ftplugin/framescript.vim	/^let b:undo_ftplugin = "setl com< cms< fo< inc< | unlet! b:matchwords"$/;"	v
b:undo_ftplugin	ftplugin/fvwm.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/git.vim	/^let b:undo_ftplugin = "setl keywordprg< path< includeexpr<"$/;"	v
b:undo_ftplugin	ftplugin/gitcommit.vim	/^      let b:undo_ftplugin = ""$/;"	v
b:undo_ftplugin	ftplugin/gitcommit.vim	/^  let b:undo_ftplugin = b:undo_ftplugin . "|setl tw<"$/;"	v
b:undo_ftplugin	ftplugin/gitconfig.vim	/^let b:undo_ftplugin = "setl fo< com< cms<"$/;"	v
b:undo_ftplugin	ftplugin/gitrebase.vim	/^    let b:undo_ftplugin = ""$/;"	v
b:undo_ftplugin	ftplugin/gitrebase.vim	/^let b:undo_ftplugin = b:undo_ftplugin . "|nunmap <buffer> K"$/;"	v
b:undo_ftplugin	ftplugin/gitrebase.vim	/^let b:undo_ftplugin = b:undo_ftplugin."|setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/gpg.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/group.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/grub.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/haml.vim	/^let b:undo_ftplugin = "setl cms< com< "$/;"	v
b:undo_ftplugin	ftplugin/hamster.vim	/^let b:undo_ftplugin = "setl fo< com< tw< commentstring<"$/;"	v
b:undo_ftplugin	ftplugin/haskell.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/help.vim	/^let b:undo_ftplugin = "setl fo< tw<"$/;"	v
b:undo_ftplugin	ftplugin/hostconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/hostsaccess.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/html.vim	/^let b:undo_ftplugin = "setlocal commentstring< matchpairs< omnifunc< comments< formatoptions<" .$/;"	v
b:undo_ftplugin	ftplugin/indent.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/initex.vim	/^let b:undo_ftplugin = "setl com< cms< define< include< sua<"$/;"	v
b:undo_ftplugin	ftplugin/java.vim	/^let b:undo_ftplugin = "setlocal suffixes< suffixesadd<" .$/;"	v
b:undo_ftplugin	ftplugin/javascript.vim	/^let b:undo_ftplugin = "setl fo< ofu< com< cms<" $/;"	v
b:undo_ftplugin	ftplugin/jsp.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter b:match_words | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	ftplugin/kconfig.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/ld.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	ftplugin/lftp.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/libao.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/limits.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/loginaccess.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/logindefs.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/logtalk.vim	/^let b:undo_ftplugin = "setl ts< sw< fdm< fdc< ai< dict<"$/;"	v
b:undo_ftplugin	ftplugin/m4.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/mail.vim	/^let b:undo_ftplugin = "setl modeline< tw< fo<"$/;"	v
b:undo_ftplugin	ftplugin/mailaliases.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/mailcap.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/make.vim	/^let b:undo_ftplugin = "setl et< sts< fo< com< cms< inc<"$/;"	v
b:undo_ftplugin	ftplugin/manconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/matlab.vim	/^let b:undo_ftplugin = "setlocal suffixesadd< suffixes< "$/;"	v
b:undo_ftplugin	ftplugin/mf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/modconf.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	ftplugin/mp.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/mplayerconf.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	ftplugin/mrxvtrc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/msmessages.vim	/^let b:undo_ftplugin = "setl fo< com< cms< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	ftplugin/muttrc.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	ftplugin/nanorc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/netrc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/nsis.vim	/^let b:undo_ftplugin = "setl com< cms< fo< def< inc<"$/;"	v
b:undo_ftplugin	ftplugin/old.c.vim	/^let b:undo_ftplugin = "setl fo< com< ofu< | if has('vms') | setl isk< | endif"$/;"	v
b:undo_ftplugin	ftplugin/pamconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/pascal.vim	/^let b:undo_ftplugin = "unlet! b:match_words"$/;"	v
b:undo_ftplugin	ftplugin/passwd.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/pdf.vim	/^let b:undo_ftplugin .= " | silent! nunmap <buffer> <C-]> | silent! nunmap <buffer> <C-T>"$/;"	v
b:undo_ftplugin	ftplugin/pdf.vim	/^let b:undo_ftplugin = "setlocal cms< com< | unlet! b:match_words"$/;"	v
b:undo_ftplugin	ftplugin/perl.vim	/^let b:undo_ftplugin = "setlocal fo< com< cms< inc< inex< def< isf< kp<" .$/;"	v
b:undo_ftplugin	ftplugin/php.vim	/^let b:undo_ftplugin = "setlocal commentstring< include< omnifunc<" .$/;"	v
b:undo_ftplugin	ftplugin/pinfo.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/plaintex.vim	/^let b:undo_ftplugin .= "| unlet! b:match_ignorecase b:match_skip b:match_words"$/;"	v
b:undo_ftplugin	ftplugin/procmail.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	ftplugin/prolog.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/protocols.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/quake.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/racc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/readline.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/rnc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/rst.vim	/^let b:undo_ftplugin = "setl com< cms< et< fo<"$/;"	v
b:undo_ftplugin	ftplugin/ruby.vim	/^  let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	ftplugin/ruby.vim	/^let b:undo_ftplugin = "setl fo< inc< inex< sua< def< com< cms< path< kp<"$/;"	v
b:undo_ftplugin	ftplugin/sass.vim	/^let b:undo_ftplugin = "setl cms< inc< ofu<"$/;"	v
b:undo_ftplugin	ftplugin/screen.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/sensors.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/services.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/setserial.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/sgml.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	ftplugin/sieve.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/slpconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/slpreg.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/slpspi.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/sql.vim	/^let b:undo_ftplugin = "setl comments<"$/;"	v
b:undo_ftplugin	ftplugin/sshconfig.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/sudoers.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/svg.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	ftplugin/sysctl.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/tcsh.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	ftplugin/terminfo.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/tex.vim	/^let b:undo_ftplugin .= "| setl inex<"$/;"	v
b:undo_ftplugin	ftplugin/udevconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/udevperm.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/udevrules.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/updatedb.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/verilog.vim	/^let b:undo_ftplugin = "setlocal fo< com< tw<"$/;"	v
b:undo_ftplugin	ftplugin/vim.vim	/^let b:undo_ftplugin = "setl fo< com< tw< commentstring<"$/;"	v
b:undo_ftplugin	ftplugin/xdefaults.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	ftplugin/xf86conf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/xhtml.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter b:match_words | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	ftplugin/xinetd.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	ftplugin/xml.vim	/^let b:undo_ftplugin = "setlocal commentstring< comments< formatoptions<" .$/;"	v
b:undo_ftplugin	ftplugin/xmodmap.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	ftplugin/xsd.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	ftplugin/yaml.vim	/^let b:undo_ftplugin = "setl com< cms< et< fo<"$/;"	v
b:undo_ftplugin	ftplugin/zsh.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_indent	indent/bib.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	indent/c.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	indent/changelog.vim	/^let b:undo_indent = "setl ai<"$/;"	v
b:undo_indent	indent/cs.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	indent/dtrace.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	indent/ishd.vim	/^let b:undo_indent = "setl ai< indentexpr< indentkeys<"$/;"	v
b:undo_indent	indent/java.vim	/^let b:undo_indent = "set cin< cino< indentkeys< indentexpr<"$/;"	v
b:undo_indent	indent/javascript.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	indent/lisp.vim	/^let b:undo_indent = "setl ai< si<"$/;"	v
b:undo_indent	indent/rpl.vim	/^let b:undo_indent = "set ai< indentkeys< indentexpr<"$/;"	v
b:undo_indent	indent/vb.vim	/^let b:undo_indent = "set ai< indentexpr< indentkeys<"$/;"	v
b:various	syntax/hitest.vim	/^let b:various = &highlight.',:Normal,:Cursor,:,'$/;"	v
b:vera_minlines	syntax/vera.vim	/^    let b:vera_minlines = 15	" mostly for () constructs$/;"	v
b:vera_minlines	syntax/vera.vim	/^    let b:vera_minlines = 50	" #if 0 constructs can be long$/;"	v
b:vera_minlines	syntax/vera.vim	/^  let b:vera_minlines = vera_minlines$/;"	v
b:vhdl_explore	ftplugin/vhdl.vim	/^let b:vhdl_explore = '\\%(architecture\\|block\\|configuration\\|component\\|entity\\|function\\|package\\|procedure\\|process\\|record\\|units\\)'$/;"	v
b:xf86conf_xfree86_version	syntax/xf86conf.vim	/^		let b:xf86conf_xfree86_version = 4$/;"	v
b:xf86conf_xfree86_version	syntax/xf86conf.vim	/^		let b:xf86conf_xfree86_version = xf86conf_xfree86_version$/;"	v
b:xml_indent_close	indent/xml.vim	/^    let b:xml_indent_close = '.\\{-}<\/'$/;"	v
b:xml_indent_open	indent/xml.vim	/^    let b:xml_indent_open = '.\\{-}<\\a'$/;"	v
bavn	tutor/tutor.cs	/^      2)  Bláto je zábavné,$/;"	v
bindMappings	plugin/NERD_tree.vim	/^function! s:bindMappings()$/;"	f
bmenu_priority	menu.vim	/^  let bmenu_priority = 60$/;"	v
bookmarkNode	plugin/NERD_tree.vim	/^function! s:bookmarkNode(name)$/;"	f
bufInWindows	plugin/NERD_tree.vim	/^function! s:bufInWindows(bnum)$/;"	f
bzrFunctions.Add	plugin/vcsbzr.vim	/^function! s:bzrFunctions.Add(argList)$/;"	f
bzrFunctions.Annotate	plugin/vcsbzr.vim	/^function! s:bzrFunctions.Annotate(argList)$/;"	f
bzrFunctions.Commit	plugin/vcsbzr.vim	/^function! s:bzrFunctions.Commit(argList)$/;"	f
bzrFunctions.Delete	plugin/vcsbzr.vim	/^function! s:bzrFunctions.Delete(argList)$/;"	f
bzrFunctions.Diff	plugin/vcsbzr.vim	/^function! s:bzrFunctions.Diff(argList)$/;"	f
bzrFunctions.GetBufferInfo	plugin/vcsbzr.vim	/^function! s:bzrFunctions.GetBufferInfo()$/;"	f
bzrFunctions.Identify	plugin/vcsbzr.vim	/^function! s:bzrFunctions.Identify(buffer)$/;"	f
bzrFunctions.Info	plugin/vcsbzr.vim	/^function! s:bzrFunctions.Info(argList)$/;"	f
bzrFunctions.Lock	plugin/vcsbzr.vim	/^function! s:bzrFunctions.Lock(argList)$/;"	f
bzrFunctions.Log	plugin/vcsbzr.vim	/^function! s:bzrFunctions.Log(argList)$/;"	f
bzrFunctions.Revert	plugin/vcsbzr.vim	/^function! s:bzrFunctions.Revert(argList)$/;"	f
bzrFunctions.Review	plugin/vcsbzr.vim	/^function! s:bzrFunctions.Review(argList)$/;"	f
bzrFunctions.Status	plugin/vcsbzr.vim	/^function! s:bzrFunctions.Status(argList)$/;"	f
bzrFunctions.Unlock	plugin/vcsbzr.vim	/^function! s:bzrFunctions.Unlock(argList)$/;"	f
bzrFunctions.Update	plugin/vcsbzr.vim	/^function! s:bzrFunctions.Update(argList)$/;"	f
c_comment_strings	gvimrc_example.vim	/^  let c_comment_strings=1$/;"	v
calloc_double_matrix	c-support/codesnippets/calloc_double_matrix.c	/^calloc_double_matrix ( int rows, int columns )$/;"	f
calloc_int_matrix	c-support/codesnippets/calloc_int_matrix.c	/^calloc_int_matrix ( int rows, int columns )$/;"	f
catFile	ftplugin/latex-suite/pytools.py	/^def catFile(filename):$/;"	f
ccomplete#Complete	autoload/ccomplete.vim	/^function! ccomplete#Complete(findstart, base)$/;"	f
centerView	plugin/NERD_tree.vim	/^function! s:centerView()$/;"	f
chCwd	plugin/NERD_tree.vim	/^function! s:chCwd()$/;"	f
chRoot	plugin/NERD_tree.vim	/^function! s:chRoot()$/;"	f
changelogMenu	ftplugin/debchangelog.vim	/^augroup changelogMenu$/;"	a
chars	syntax/xpm.vim	/^	 let chars = escape(chars, '\/\\*^$.~[]')$/;"	v
chars	syntax/xpm.vim	/^	 let chars = substitute(chars, '.$', '', '')$/;"	v
chars	syntax/xpm.vim	/^	 let chars = substitute(s, '"\\(.\\{'.cpp.'}\\s\\).*"', '\\1', '')$/;"	v
chars	syntax/xpm.vim	/^let chars  = ""$/;"	v
chars	syntax/xpm2.vim	/^	let chars = escape(chars, '\/\\*^$.~[]')$/;"	v
chars	syntax/xpm2.vim	/^	let chars = substitute(chars, "[ \\t][ \\t]*", "\\\\\\\\s\\\\\\\\+", "g")$/;"	v
chars	syntax/xpm2.vim	/^	let chars = substitute(chars, '\\\\s\\\\+$', '', '')$/;"	v
chars	syntax/xpm2.vim	/^	let chars = substitute(s, '\\(.\\{'.cpp.'}\\s\\+\\).*', '\\1', '')$/;"	v
chars	syntax/xpm2.vim	/^  let chars  = ""$/;"	v
check	autoload/gzip.vim	/^fun s:check(cmd)$/;"	f
checkForActivate	plugin/NERD_tree.vim	/^function! s:checkForActivate()$/;"	f
checkForBrowse	plugin/NERD_tree.vim	/^function! s:checkForBrowse(dir)$/;"	f
check_for_passwd	vimsh.py	/^    def check_for_passwd( self ):$/;"	m	class:vimsh
check_shell	tools/shtags.pl	/^sub check_shell$/;"	s
checkargs	colors/calmar256-dark.vim	/^function! s:checkargs(arg)$/;"	f
checkargs	colors/calmar256-light.vim	/^function! s:checkargs(arg)$/;"	f
chill_minlines	syntax/chill.vim	/^  let chill_minlines = 15$/;"	v
chk_stderr	vimsh.py	/^    def chk_stderr( self ):$/;"	m	class:vimsh
choose	colors/vividchalk.vim	/^function! s:choose(mediocre,good)$/;"	f
choose	ftplugin/gitrebase.vim	/^function! s:choose(word)$/;"	f
chyba	tutor/tutor.cs	/^---> "chhybba" není zpùsob, jak hláskovat chyba; chhybba je chyba.$/;"	v
cleanup	vimsh.py	/^    def cleanup( self ):$/;"	m	class:vimsh
clearBookmarks	plugin/NERD_tree.vim	/^function! s:clearBookmarks(bookmarks)$/;"	f
clear_screen	vimsh.py	/^    def clear_screen( self, _in_insert_mode ):$/;"	m	class:vimsh
closeChildren	plugin/NERD_tree.vim	/^function! s:closeChildren()$/;"	f
closeCurrentDir	plugin/NERD_tree.vim	/^function! s:closeCurrentDir()$/;"	f
closeTree	plugin/NERD_tree.vim	/^function! s:closeTree()$/;"	f
closeTreeIfOpen	plugin/NERD_tree.vim	/^function! s:closeTreeIfOpen()$/;"	f
closeTreeIfQuitOnOpen	plugin/NERD_tree.vim	/^function! s:closeTreeIfQuitOnOpen()$/;"	f
closeTreeWindow	plugin/NERD_tree.vim	/^function! s:closeTreeWindow()$/;"	f
cmpfun	ftplugin/latex-suite/bibtools.py	/^        def cmpfun(b1, b2):$/;"	f	function:BibFile.sort
col1	syntax/colortest.vim	/^  let col1 = substitute(expand("<cword>"), '\\(\\a\\+\\)_on_\\a\\+', '\\1', "")$/;"	v
col2	syntax/colortest.vim	/^  let col2 = substitute(expand("<cword>"), '\\a\\+_on_\\(\\a\\+\\)', '\\1', "")$/;"	v
color	colors/desert256.vim	/^    fun <SID>color(r, g, b)$/;"	f
color	colors/jellybeans.vim	/^fun! s:color(r, g, b)$/;"	f
color	colors/summerfruit256.vim	/^    fun <SID>color(r, g, b)$/;"	f
color	colors/wombat256.vim	/^fun <SID>color(r, g, b)$/;"	f
color	syntax/xpm.vim	/^		     let color = ""$/;"	v
color	syntax/xpm.vim	/^		  let color = substitute(s, '".*\\sm\\s\\+\\(.\\{-}\\)\\s*\\(s\\s.*\\)*\\s*"', '\\1', '')$/;"	v
color	syntax/xpm.vim	/^	       let color = substitute(s, '".*\\sg4\\s\\+\\(.\\{-}\\)\\s*\\([ms]\\s.*\\)*\\s*"', '\\1', '')$/;"	v
color	syntax/xpm.vim	/^	    let color = substitute(color, '\\(\\x\\)\\(\\x\\)\\(\\x\\)', '0\\10\\20\\3', '')$/;"	v
color	syntax/xpm.vim	/^	    let color = substitute(color, '\\(\\x\\x\\)\\x', '\\1', 'g')$/;"	v
color	syntax/xpm.vim	/^	    let color = substitute(color, '\\(\\x\\x\\)\\x\\x', '\\1', 'g')$/;"	v
color	syntax/xpm.vim	/^	    let color = substitute(s, '".*\\sg\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\|[ms]\\)\\s.*\\)*\\s*"', '\\1', '')$/;"	v
color	syntax/xpm.vim	/^	 let color = substitute(s, '".*\\sc\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\=\\|[ms]\\)\\s.*\\)*\\s*"', '\\1', '')$/;"	v
color	syntax/xpm.vim	/^let color  = ""$/;"	v
color	syntax/xpm2.vim	/^		let color = ""$/;"	v
color	syntax/xpm2.vim	/^	      let color = substitute(s, '.*\\sm\\s\\+\\(.\\{-}\\)\\s*\\(s\\s.*\\)*\\s*', '\\1', '')$/;"	v
color	syntax/xpm2.vim	/^	    let color = substitute(s, '.*\\sg4\\s\\+\\(.\\{-}\\)\\s*\\([ms]\\s.*\\)*\\s*', '\\1', '')$/;"	v
color	syntax/xpm2.vim	/^	  let color = substitute(color, '\\(\\x\\)\\(\\x\\)\\(\\x\\)', '0\\10\\20\\3', '')$/;"	v
color	syntax/xpm2.vim	/^	  let color = substitute(color, '\\(\\x\\x\\)\\x', '\\1', 'g')$/;"	v
color	syntax/xpm2.vim	/^	  let color = substitute(color, '\\(\\x\\x\\)\\x\\x', '\\1', 'g')$/;"	v
color	syntax/xpm2.vim	/^	  let color = substitute(s, '.*\\sg\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\|[ms]\\)\\s.*\\)*\\s*', '\\1', '')$/;"	v
color	syntax/xpm2.vim	/^	let color = substitute(s, '.*\\sc\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\=\\|[ms]\\)\\s.*\\)*\\s*', '\\1', '')$/;"	v
color	syntax/xpm2.vim	/^  let color  = ""$/;"	v
colors	syntax/xpm.vim	/^	 let colors = substitute(s, '"\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*"', '\\1', '')$/;"	v
colors	syntax/xpm.vim	/^let colors = 0$/;"	v
colors	syntax/xpm2.vim	/^	let colors = substitute(s, '\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*', '\\1', '')$/;"	v
colors	syntax/xpm2.vim	/^  let colors = 0$/;"	v
colors_name	colors/adaryn.vim	/^let colors_name = "adaryn"$/;"	v
colors_name	colors/autumn.vim	/^let colors_name = "autumn"$/;"	v
colors_name	colors/autumn2.vim	/^let colors_name = "autumn"$/;"	v
colors_name	colors/autumnleaf.vim	/^let colors_name="AutumnLeaf"$/;"	v
colors_name	colors/breeze.vim	/^let colors_name = "breeze"$/;"	v
colors_name	colors/buttercream.vim	/^let colors_name = "buttercream"$/;"	v
colors_name	colors/candy.vim	/^let colors_name = "candy"$/;"	v
colors_name	colors/cleanphp.vim	/^let colors_name = "cleanphp"$/;"	v
colors_name	colors/darkblue.vim	/^let colors_name = "darkblue"$/;"	v
colors_name	colors/dawn.vim	/^let colors_name = "dawn"$/;"	v
colors_name	colors/default.vim	/^let colors_name = "default"$/;"	v
colors_name	colors/delek.vim	/^let colors_name = "delek"$/;"	v
colors_name	colors/dusk.vim	/^let colors_name = "dusk"$/;"	v
colors_name	colors/earendel.vim	/^let colors_name = "earendel"$/;"	v
colors_name	colors/evening.vim	/^let colors_name = "evening"$/;"	v
colors_name	colors/fine_blue.vim	/^let colors_name = "fine_blue"$/;"	v
colors_name	colors/fine_blue2.vim	/^let colors_name = "fine_blue"$/;"	v
colors_name	colors/fnaqevan.vim	/^let colors_name = "fnaqevan"$/;"	v
colors_name	colors/fog.vim	/^let colors_name = "fog"$/;"	v
colors_name	colors/freya.vim	/^let colors_name = "freya"$/;"	v
colors_name	colors/fruit.vim	/^let colors_name = "fruit"$/;"	v
colors_name	colors/fruity.vim	/^let colors_name = "fruity"$/;"	v
colors_name	colors/guardian.vim	/^let colors_name   = "Guardian"$/;"	v
colors_name	colors/herald.vim	/^let colors_name = "herald"$/;"	v
colors_name	colors/inkpot.vim	/^let colors_name = "inkpot"$/;"	v
colors_name	colors/ironman.vim	/^let colors_name = "ironman"$/;"	v
colors_name	colors/jellybeans.vim	/^let colors_name = "jellybeans"$/;"	v
colors_name	colors/kellys.vim	/^let colors_name = "kellys"$/;"	v
colors_name	colors/lucius.vim	/^let colors_name="lucius"$/;"	v
colors_name	colors/martin_krischik.vim	/^let colors_name = "martin_krischik"$/;"	v
colors_name	colors/moria.vim	/^let colors_name = "moria"$/;"	v
colors_name	colors/morning.vim	/^let colors_name = "morning"$/;"	v
colors_name	colors/mustang.vim	/^let colors_name = "mustang"$/;"	v
colors_name	colors/neon.vim	/^let colors_name = "neon"$/;"	v
colors_name	colors/night.vim	/^let colors_name = "night"$/;"	v
colors_name	colors/no_quarter.vim	/^let colors_name = "no_quarter"$/;"	v
colors_name	colors/peachpuff.vim	/^let colors_name = "peachpuff"$/;"	v
colors_name	colors/pyte.vim	/^let colors_name = "pyte"$/;"	v
colors_name	colors/rdark.vim	/^let colors_name = "rdark"$/;"	v
colors_name	colors/satori.vim	/^let colors_name = "satori"$/;"	v
colors_name	colors/sea.vim	/^let colors_name = "sea"$/;"	v
colors_name	colors/shine.vim	/^let colors_name = "shine"$/;"	v
colors_name	colors/slate.vim	/^let colors_name = "slate"$/;"	v
colors_name	colors/spring.vim	/^let colors_name = "spring"$/;"	v
colors_name	colors/tango.vim	/^let colors_name = "tango"$/;"	v
colors_name	colors/tango2.vim	/^let colors_name = "tango2"$/;"	v
colors_name	colors/taqua.vim	/^let colors_name="taqua"$/;"	v
colors_name	colors/tcsoft.vim	/^let colors_name = "TCSoft"$/;"	v
colors_name	colors/tir_black.vim	/^let colors_name = "tir_black"$/;"	v
colors_name	colors/twilight.vim	/^let colors_name = "twilight"$/;"	v
colors_name	colors/vividchalk.vim	/^let colors_name = "vividchalk"$/;"	v
colors_name	colors/winter.vim	/^let colors_name = "winter"$/;"	v
colors_name	colors/wombat.vim	/^let colors_name = "wombat"$/;"	v
colors_name	colors/xoria256.vim	/^let colors_name = "xoria256"$/;"	v
comma	ftplugin/changelog.vim	/^            let comma = stridx(name, ',')$/;"	v
commentEnablers	plugin/NERD_commenter.vim	/^augroup commentEnablers$/;"	a
compareBookmarks	plugin/NERD_tree.vim	/^function! s:compareBookmarks(first, second)$/;"	f
compareNodes	plugin/NERD_tree.vim	/^function! s:compareNodes(n1, n2)$/;"	f
completeBookmarks	plugin/NERD_tree.vim	/^function! s:completeBookmarks(A,L,P)$/;"	f
count	indent/bst.vim	/^function! s:count(string,char)$/;"	f
count_braces	indent/css.vim	/^function s:count_braces(lnum, count_open)$/;"	f
count_braces	indent/ld.vim	/^function s:count_braces(lnum, count_open)$/;"	f
count_braces	indent/tcl.vim	/^function s:count_braces(lnum, count_open)$/;"	f
count_braces	indent/xinetd.vim	/^function s:count_braces(lnum, count_open)$/;"	f
cpo_save	ftplugin/hamster.vim	/^let cpo_save = &cpo$/;"	v
cpo_save	ftplugin/vim.vim	/^let cpo_save = &cpo$/;"	v
cpo_save	plugin/matchparen.vim	/^let cpo_save = &cpo$/;"	v
cpp	syntax/xpm.vim	/^	 let cpp = substitute(s, '"\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*"', '\\1', '')$/;"	v
cpp	syntax/xpm.vim	/^let cpp    = 0$/;"	v
cpp	syntax/xpm2.vim	/^	let cpp = substitute(s, '\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*', '\\1', '')$/;"	v
cpp	syntax/xpm2.vim	/^  let cpp    = 0$/;"	v
createTreeWin	plugin/NERD_tree.vim	/^function! s:createTreeWin()$/;"	f
csc_minlines	syntax/csc.vim	/^	let csc_minlines = 50	" mostly for () constructs$/;"	v
csscomplete#CompleteCSS	autoload/csscomplete.vim	/^function! csscomplete#CompleteCSS(findstart, base)$/;"	f
cssfiles	doc/Makefile	/^cssfiles = $(addsuffix .css, $(projects))$/;"	m
current_compiler	compiler/ant.vim	/^let current_compiler = "ant"$/;"	v
current_compiler	compiler/bcc.vim	/^let current_compiler = "bcc"$/;"	v
current_compiler	compiler/bdf.vim	/^let current_compiler = "bdf"$/;"	v
current_compiler	compiler/checkstyle.vim	/^let current_compiler = "checkstyle"$/;"	v
current_compiler	compiler/cs.vim	/^let current_compiler = "cs"$/;"	v
current_compiler	compiler/decada.vim	/^let current_compiler = "decada"$/;"	v
current_compiler	compiler/dot.vim	/^let current_compiler = "dot"$/;"	v
current_compiler	compiler/eruby.vim	/^let current_compiler = "eruby"$/;"	v
current_compiler	compiler/fortran_F.vim	/^let current_compiler = "fortran_F"$/;"	v
current_compiler	compiler/fortran_cv.vim	/^let current_compiler = "fortran_cv"$/;"	v
current_compiler	compiler/fortran_elf90.vim	/^let current_compiler = "fortran_elf90"$/;"	v
current_compiler	compiler/fortran_g77.vim	/^let current_compiler = "fortran_g77"$/;"	v
current_compiler	compiler/fortran_lf95.vim	/^let current_compiler = "fortran_lf95"$/;"	v
current_compiler	compiler/fpc.vim	/^let current_compiler = "fpc"$/;"	v
current_compiler	compiler/gcc.vim	/^let current_compiler = "gcc"$/;"	v
current_compiler	compiler/gf.vim	/^let current_compiler = "gf"$/;"	v
current_compiler	compiler/gnat.vim	/^let current_compiler = "gnat"$/;"	v
current_compiler	compiler/hp_acc.vim	/^let current_compiler = "hp_acc"$/;"	v
current_compiler	compiler/icc.vim	/^let current_compiler = "icc"$/;"	v
current_compiler	compiler/intel.vim	/^let current_compiler = "intel"$/;"	v
current_compiler	compiler/irix5_c.vim	/^let current_compiler = "irix5_c"$/;"	v
current_compiler	compiler/irix5_cpp.vim	/^let current_compiler = "irix5_cpp"$/;"	v
current_compiler	compiler/javac.vim	/^let current_compiler = "javac"$/;"	v
current_compiler	compiler/jikes.vim	/^let current_compiler = "jikes"$/;"	v
current_compiler	compiler/mcs.vim	/^let current_compiler = "mcs"$/;"	v
current_compiler	compiler/mips_c.vim	/^let current_compiler = "mips_c"$/;"	v
current_compiler	compiler/mipspro_c89.vim	/^let current_compiler = "mipspro_c89"$/;"	v
current_compiler	compiler/mipspro_cpp.vim	/^let current_compiler = "mipspro_cpp"$/;"	v
current_compiler	compiler/modelsim_vcom.vim	/^let current_compiler = "modelsim_vcom"$/;"	v
current_compiler	compiler/msvc.vim	/^let current_compiler = "msvc"$/;"	v
current_compiler	compiler/neato.vim	/^let current_compiler = "neato"$/;"	v
current_compiler	compiler/onsgmls.vim	/^let current_compiler = "onsgmls"$/;"	v
current_compiler	compiler/pbx.vim	/^let current_compiler = "pbx"$/;"	v
current_compiler	compiler/perl.vim	/^let current_compiler = "perl"$/;"	v
current_compiler	compiler/php.vim	/^let current_compiler = "php"$/;"	v
current_compiler	compiler/pyunit.vim	/^let current_compiler = "pyunit"$/;"	v
current_compiler	compiler/rspec.vim	/^let current_compiler = "rspec"$/;"	v
current_compiler	compiler/rst.vim	/^let current_compiler = "rst"$/;"	v
current_compiler	compiler/ruby.vim	/^let current_compiler = "ruby"$/;"	v
current_compiler	compiler/rubyunit.vim	/^let current_compiler = "rubyunit"$/;"	v
current_compiler	compiler/se.vim	/^let current_compiler = "se"$/;"	v
current_compiler	compiler/splint.vim	/^let current_compiler = "splint"$/;"	v
current_compiler	compiler/tcl.vim	/^let current_compiler = "tcl"$/;"	v
current_compiler	compiler/tex.vim	/^		let current_compiler = "latex"$/;"	v
current_compiler	compiler/tex.vim	/^		let current_compiler = b:tex_flavor$/;"	v
current_compiler	compiler/tex.vim	/^		let current_compiler = g:tex_flavor$/;"	v
current_compiler	compiler/tidy.vim	/^let current_compiler = "tidy"$/;"	v
current_compiler	compiler/xmllint.vim	/^let current_compiler = "xmllint"$/;"	v
current_compiler	compiler/xmlwf.vim	/^let current_compiler = "xmlwf"$/;"	v
cvsFunctions.Add	plugin/vcscvs.vim	/^function! s:cvsFunctions.Add(argList)$/;"	f
cvsFunctions.Annotate	plugin/vcscvs.vim	/^function! s:cvsFunctions.Annotate(argList)$/;"	f
cvsFunctions.Commit	plugin/vcscvs.vim	/^function! s:cvsFunctions.Commit(argList)$/;"	f
cvsFunctions.Delete	plugin/vcscvs.vim	/^function! s:cvsFunctions.Delete(argList)$/;"	f
cvsFunctions.Diff	plugin/vcscvs.vim	/^function! s:cvsFunctions.Diff(argList)$/;"	f
cvsFunctions.GetBufferInfo	plugin/vcscvs.vim	/^function! s:cvsFunctions.GetBufferInfo()$/;"	f
cvsFunctions.Identify	plugin/vcscvs.vim	/^function! s:cvsFunctions.Identify(buffer)$/;"	f
cvsFunctions.Log	plugin/vcscvs.vim	/^function! s:cvsFunctions.Log(argList)$/;"	f
cvsFunctions.Revert	plugin/vcscvs.vim	/^function! s:cvsFunctions.Revert(argList)$/;"	f
cvsFunctions.Review	plugin/vcscvs.vim	/^function! s:cvsFunctions.Review(argList)$/;"	f
cvsFunctions.Status	plugin/vcscvs.vim	/^function! s:cvsFunctions.Status(argList)$/;"	f
cvsFunctions.Update	plugin/vcscvs.vim	/^function! s:cvsFunctions.Update(argList)$/;"	f
cycle	ftplugin/gitrebase.vim	/^function! s:cycle()$/;"	f
d	macros/less.vim	/^noremap <script> d <C-D><SID>L$/;"	m
db2vim	doc/Makefile	/^db2vim=..\/..\/db2vim\/db2vim$/;"	m
dbg_print	vimsh.py	/^def dbg_print( _str ):$/;"	f
decada#Make	autoload/decada.vim	/^function decada#Make () dict					     " {{{1$/;"	f
decada#New	autoload/decada.vim	/^function decada#New ()						     " }}}1$/;"	f
decada#Set_Session	autoload/decada.vim	/^function decada#Set_Session (...) dict				     " {{{1$/;"	f
decada#Unit_Name	autoload/decada.vim	/^function decada#Unit_Name () dict				     " {{{1$/;"	f
decrease	ftplugin/cobol.vim	/^function! s:decrease(...)$/;"	f
def_comment	syntax/cdrtoc.vim	/^function s:def_comment(name, nextgroup)$/;"	f
def_keyword	syntax/cdrtoc.vim	/^function s:def_keyword(name, nextgroup, keyword)$/;"	f
def_keywords	syntax/cdrtoc.vim	/^function s:def_keywords(name, nextgroup, keywords)$/;"	f
def_match	syntax/cdrtoc.vim	/^function s:def_match(name, nextgroup, pattern)$/;"	f
def_region	syntax/cdrtoc.vim	/^function s:def_region(name, nextgroup, start, skip, end, matchgroup, contains)$/;"	f
deleteBookmark	plugin/NERD_tree.vim	/^function! s:deleteBookmark()$/;"	f
deleteFile	ftplugin/latex-suite/pytools.py	/^def deleteFile(filepattern):$/;"	f
did_OPL_syntax_inits	syntax/opl.vim	/^    let did_OPL_syntax_inits = 1$/;"	v
did_VRML_syntax_inits	syntax/vrml.vim	/^    let did_VRML_syntax_inits = 1$/;"	v
did_a65_syntax_inits	syntax/a65.vim	/^    let did_a65_syntax_inits = 1$/;"	v
did_abap_syntax_inits	syntax/abap.vim	/^    let did_abap_syntax_inits = 1$/;"	v
did_abaqus_syn_inits	syntax/abaqus.vim	/^		let did_abaqus_syn_inits = 1$/;"	v
did_abc_syn_inits	syntax/abc.vim	/^    let did_abc_syn_inits = 1$/;"	v
did_abel_syn_inits	syntax/abel.vim	/^    let did_abel_syn_inits = 1$/;"	v
did_acedb_syn_inits	syntax/acedb.vim	/^    let did_acedb_syn_inits = 1$/;"	v
did_aflex_syntax_inits	syntax/aflex.vim	/^      let did_aflex_syntax_inits = 1$/;"	v
did_ahdl_syn_inits	syntax/ahdl.vim	/^    let did_ahdl_syn_inits = 1$/;"	v
did_ahdl_syn_inits	syntax/ppd.vim	/^    let did_ahdl_syn_inits = 1$/;"	v
did_amiga_syn_inits	syntax/amiga.vim	/^    let did_amiga_syn_inits = 1$/;"	v
did_aml_syntax_inits	syntax/aml.vim	/^    let did_aml_syntax_inits = 1$/;"	v
did_ampl_syntax_inits	syntax/ampl.vim	/^    let did_ampl_syntax_inits = 1$/;"	v
did_antlr_syntax_inits	syntax/antlr.vim	/^      let did_antlr_syntax_inits = 1$/;"	v
did_apache_syntax_inits	syntax/apache.vim	/^		let did_apache_syntax_inits = 1$/;"	v
did_apachestyle_syn_inits	syntax/apachestyle.vim	/^    let did_apachestyle_syn_inits = 1$/;"	v
did_asm68k_syntax_inits	syntax/asm68k.vim	/^    let did_asm68k_syntax_inits = 1$/;"	v
did_asm_syntax_inits	syntax/asm.vim	/^    let did_asm_syntax_inits = 1$/;"	v
did_asn_syn_inits	syntax/asn.vim	/^    let did_asn_syn_inits = 1$/;"	v
did_aspvbs_syn_inits	syntax/aspvbs.vim	/^    let did_aspvbs_syn_inits = 1$/;"	v
did_atlas_syntax_inits	syntax/atlas.vim	/^    let did_atlas_syntax_inits = 1$/;"	v
did_automake_syntax_inits	syntax/automake.vim	/^    let did_automake_syntax_inits = 1$/;"	v
did_ave_syn_inits	syntax/ave.vim	/^	let did_ave_syn_inits = 1$/;"	v
did_awk_syn_inits	syntax/awk.vim	/^    let did_awk_syn_inits = 1$/;"	v
did_ayacc_syntax_inits	syntax/ayacc.vim	/^      let did_ayacc_syntax_inits = 1$/;"	v
did_b_syntax_inits	syntax/b.vim	/^      let did_b_syntax_inits = 1$/;"	v
did_baan_syn_inits	syntax/baan.vim	/^    let did_baan_syn_inits = 1$/;"	v
did_basic_syntax_inits	syntax/basic.vim	/^    let did_basic_syntax_inits = 1$/;"	v
did_bc_syntax_inits	syntax/bc.vim	/^    let did_bc_syntax_inits = 1$/;"	v
did_bib_syn_inits	syntax/bib.vim	/^    let did_bib_syn_inits = 1$/;"	v
did_bind_zone_syn_inits	syntax/bindzone.vim	/^    let did_bind_zone_syn_inits = 1$/;"	v
did_blank_syntax_inits	syntax/blank.vim	/^    let did_blank_syntax_inits = 1$/;"	v
did_bst_syn_inits	syntax/bst.vim	/^        let did_bst_syn_inits = 1$/;"	v
did_btm_syntax_inits	syntax/btm.vim	/^    let did_btm_syntax_inits = 1$/;"	v
did_bzr_syn_inits	syntax/bzr.vim	/^    let did_bzr_syn_inits = 1$/;"	v
did_c_syn_inits	syntax/pf.vim	/^    let did_c_syn_inits = 1$/;"	v
did_cf_syn_inits	syntax/cf.vim	/^    let did_cf_syn_inits = 1$/;"	v
did_cfg_syn_inits	syntax/cfg.vim	/^	let did_cfg_syn_inits = 1$/;"	v
did_ch_syntax_inits	syntax/ch.vim	/^    let did_ch_syntax_inits = 1$/;"	v
did_ch_syntax_inits	syntax/chill.vim	/^    let did_ch_syntax_inits = 1$/;"	v
did_change_syntax_inits	syntax/change.vim	/^    let did_change_syntax_inits = 1$/;"	v
did_changelog_syntax_inits	syntax/changelog.vim	/^    let did_changelog_syntax_inits = 1$/;"	v
did_cheetah_syn_inits	syntax/cheetah.vim	/^		let did_cheetah_syn_inits = 1$/;"	v
did_cl_syntax_inits	syntax/cl.vim	/^		let did_cl_syntax_inits = 1$/;"	v
did_clean_syntax_init	syntax/clean.vim	/^    let did_clean_syntax_init = 1$/;"	v
did_clipper_syntax_inits	syntax/clipper.vim	/^    let did_clipper_syntax_inits = 1$/;"	v
did_cmake_syntax_inits	syntax/cmake.vim	/^    let did_cmake_syntax_inits = 1$/;"	v
did_cobol_syntax_inits	syntax/cobol.vim	/^    let did_cobol_syntax_inits = 1$/;"	v
did_conf_syntax_inits	syntax/asterisk.vim	/^    let did_conf_syntax_inits = 1$/;"	v
did_conf_syntax_inits	syntax/asteriskvm.vim	/^    let did_conf_syntax_inits = 1$/;"	v
did_config_syntax_inits	syntax/config.vim	/^    let did_config_syntax_inits = 1$/;"	v
did_config_syntax_inits	syntax/fstab.vim	/^		let did_config_syntax_inits = 1$/;"	v
did_config_syntax_inits	syntax/resolv.vim	/^		let did_config_syntax_inits = 1$/;"	v
did_config_syntax_inits	syntax/sd.vim	/^                let did_config_syntax_inits = 1$/;"	v
did_cpp_syntax_inits	syntax/cpp.vim	/^    let did_cpp_syntax_inits = 1$/;"	v
did_crontab_syn_inits	syntax/crontab.vim	/^    let did_crontab_syn_inits = 1$/;"	v
did_csc_syntax_inits	syntax/cdl.vim	/^		let did_csc_syntax_inits = 1$/;"	v
did_csc_syntax_inits	syntax/csc.vim	/^		let did_csc_syntax_inits = 1$/;"	v
did_csh_syntax_inits	syntax/csh.vim	/^    let did_csh_syntax_inits = 1$/;"	v
did_csp_syn_inits	syntax/csp.vim	/^    let did_csp_syn_inits = 1$/;"	v
did_css_syn_inits	syntax/css.vim	/^    let did_css_syn_inits = 1$/;"	v
did_css_syn_inits	syntax/javacc.vim	/^    let did_css_syn_inits = 1$/;"	v
did_cterm_syntax_inits	syntax/cterm.vim	/^    let did_cterm_syntax_inits = 1$/;"	v
did_cupl_syn_inits	syntax/cupl.vim	/^    let did_cupl_syn_inits = 1$/;"	v
did_cuplsim_syn_inits	syntax/cuplsim.vim	/^    let did_cuplsim_syn_inits = 1$/;"	v
did_cvs_syn_inits	syntax/cvs.vim	/^		let did_cvs_syn_inits = 1$/;"	v
did_cvsannotate_syntax_inits	syntax/cvsannotate.vim	/^	let did_cvsannotate_syntax_inits = 1$/;"	v
did_cweb_syntax_inits	syntax/cweb.vim	/^    let did_cweb_syntax_inits = 1$/;"	v
did_cynlib_syntax_inits	syntax/cynlib.vim	/^    let did_cynlib_syntax_inits = 1$/;"	v
did_cynpp_syntax_inits	syntax/cynpp.vim	/^    let did_cynpp_syntax_inits = 1$/;"	v
did_dcd_syntax_inits	syntax/dcd.vim	/^    let did_dcd_syntax_inits = 1$/;"	v
did_dcl_syntax_inits	syntax/dcl.vim	/^    let did_dcl_syntax_inits = 1$/;"	v
did_debchangelog_syn_inits	syntax/debchangelog.vim	/^    let did_debchangelog_syn_inits = 1$/;"	v
did_debcontrol_syn_inits	syntax/debcontrol.vim	/^    let did_debcontrol_syn_inits = 1$/;"	v
did_def_syntax_inits	syntax/def.vim	/^    let did_def_syntax_inits = 1$/;"	v
did_desc_syntax_inits	syntax/desc.vim	/^    let did_desc_syntax_inits = 1$/;"	v
did_diva_syntax_inits	syntax/diva.vim	/^		let did_diva_syntax_inits = 1$/;"	v
did_django_syn_inits	syntax/django.vim	/^    let did_django_syn_inits = 1$/;"	v
did_docbk_syn_inits	syntax/docbk.vim	/^    let did_docbk_syn_inits = 1$/;"	v
did_dosbatch_syntax_inits	syntax/dosbatch.vim	/^    let did_dosbatch_syntax_inits = 1$/;"	v
did_dosini_syntax_inits	syntax/desktop.vim	/^		let did_dosini_syntax_inits = 1$/;"	v
did_dosini_syntax_inits	syntax/dosini.vim	/^    let did_dosini_syntax_inits = 1$/;"	v
did_dot_syntax_inits	syntax/dot.vim	/^    let did_dot_syntax_inits = 1$/;"	v
did_dracula_syn_inits	syntax/dracula.vim	/^    let did_dracula_syn_inits = 1$/;"	v
did_drchip_netrwlist_syntax	syntax/netrw.vim	/^ let did_drchip_netrwlist_syntax= 1$/;"	v
did_drchip_tags_inits	syntax/tags.vim	/^    let did_drchip_tags_inits = 1$/;"	v
did_dtd_syn_inits	syntax/dtd.vim	/^	let did_dtd_syn_inits = 1$/;"	v
did_dtml_syntax_inits	syntax/dtml.vim	/^    let did_dtml_syntax_inits = 1$/;"	v
did_dummy_syn_inits	syntax/ist.vim	/^    let did_dummy_syn_inits = 1$/;"	v
did_dylan_intr_syntax_inits	syntax/dylanintr.vim	/^    let did_dylan_intr_syntax_inits = 1$/;"	v
did_dylan_lid_syntax_inits	syntax/dylanlid.vim	/^    let did_dylan_lid_syntax_inits = 1$/;"	v
did_dylan_syntax_inits	syntax/dylan.vim	/^    let did_dylan_syntax_inits = 1$/;"	v
did_ecd_syn_inits	syntax/ecd.vim	/^    let did_ecd_syn_inits = 1$/;"	v
did_edif_syntax_inits	syntax/edif.vim	/^    let did_edif_syntax_inits = 1$/;"	v
did_eiffel_syntax_inits	syntax/eiffel.vim	/^    let did_eiffel_syntax_inits = 1$/;"	v
did_elf_syn_inits	syntax/elf.vim	/^		let did_elf_syn_inits = 1$/;"	v
did_elmfilt_syntax_inits	syntax/elmfilt.vim	/^    let did_elmfilt_syntax_inits = 1$/;"	v
did_erlang_inits	syntax/erlang.vim	/^        let did_erlang_inits = 1$/;"	v
did_esqlc_syntax_inits	syntax/esqlc.vim	/^    let did_esqlc_syntax_inits = 1$/;"	v
did_esterel_syntax_inits	syntax/esterel.vim	/^    let did_esterel_syntax_inits = 1$/;"	v
did_exim_syntax_inits	syntax/exim.vim	/^		let did_exim_syntax_inits = 1$/;"	v
did_expect_syntax_inits	syntax/expect.vim	/^    let did_expect_syntax_inits = 1$/;"	v
did_exports_syntax_inits	syntax/exports.vim	/^    let did_exports_syntax_inits = 1$/;"	v
did_fdcc_syn_inits	syntax/fdcc.vim	/^    let did_fdcc_syn_inits = 1$/;"	v
did_fgl_syntax_inits	syntax/fgl.vim	/^    let did_fgl_syntax_inits = 1$/;"	v
did_focexec_syntax_inits	syntax/focexec.vim	/^    let did_focexec_syntax_inits = 1$/;"	v
did_form_syn_inits	syntax/form.vim	/^    let did_form_syn_inits = 1$/;"	v
did_forth_syn_inits	syntax/forth.vim	/^	let did_forth_syn_inits = 1$/;"	v
did_fortran_syn_inits	syntax/fortran.vim	/^    let did_fortran_syn_inits = 1$/;"	v
did_foxpro_syn_inits	syntax/foxpro.vim	/^	let did_foxpro_syn_inits = 1$/;"	v
did_gdb_syn_inits	syntax/gdb.vim	/^    let did_gdb_syn_inits = 1$/;"	v
did_gdmo_syntax_inits	syntax/gdmo.vim	/^    let did_gdmo_syntax_inits = 1$/;"	v
did_gedcom_syntax_inits	syntax/gedcom.vim	/^    let did_gedcom_syntax_inits = 1$/;"	v
did_gitannotate_syntax_inits	syntax/gitannotate.vim	/^	let did_gitannotate_syntax_inits = 1$/;"	v
did_gnuplot_syntax_inits	syntax/gnuplot.vim	/^    let did_gnuplot_syntax_inits = 1$/;"	v
did_gp_syn_inits	syntax/gp.vim	/^    let did_gp_syn_inits = 1$/;"	v
did_groovy_syn_inits	syntax/groovy.vim	/^    let did_groovy_syn_inits = 1$/;"	v
did_gs_syn_inits	syntax/grads.vim	/^	let did_gs_syn_inits = 1$/;"	v
did_gtkrc_syntax_inits	syntax/gkrellmrc.vim	/^		let did_gtkrc_syntax_inits = 1$/;"	v
did_gtkrc_syntax_inits	syntax/gtkrc.vim	/^		let did_gtkrc_syntax_inits = 1$/;"	v
did_hamster_syn_inits	syntax/hamster.vim	/^        let did_hamster_syn_inits = 1$/;"	v
did_hb_syntax_inits	syntax/hb.vim	/^    let did_hb_syntax_inits = 1$/;"	v
did_hercules_syntax_inits	syntax/hercules.vim	/^    let did_hercules_syntax_inits = 1$/;"	v
did_hex_syntax_inits	syntax/hex.vim	/^    let did_hex_syntax_inits = 1$/;"	v
did_hgannotate_syntax_inits	syntax/hgannotate.vim	/^	let did_hgannotate_syntax_inits = 1$/;"	v
did_hitachi_syntax_inits	syntax/asmh8300.vim	/^    let did_hitachi_syntax_inits = 1$/;"	v
did_hog_syn_inits	syntax/hog.vim	/^    let did_hog_syn_inits = 1$/;"	v
did_hs_syntax_inits	syntax/haskell.vim	/^    let did_hs_syntax_inits = 1$/;"	v
did_html_syn_inits	syntax/html.vim	/^    let did_html_syn_inits = 1$/;"	v
did_html_toolbar	ftplugin/html/HTML.vim	/^  let did_html_toolbar = 1$/;"	v
did_htmlos_syn_inits	syntax/htmlos.vim	/^    let did_htmlos_syn_inits = 1$/;"	v
did_ia64_syn_inits	syntax/ia64.vim	/^		let did_ia64_syn_inits = 1$/;"	v
did_icon_syn_inits	syntax/icon.vim	/^    let did_icon_syn_inits = 1$/;"	v
did_idl_syntax_inits	syntax/idl.vim	/^  let did_idl_syntax_inits = 1$/;"	v
did_idlang_syn_inits	syntax/idlang.vim	/^    let did_idlang_syn_inits = 1$/;"	v
did_indent_on	indent.vim	/^let did_indent_on = 1$/;"	v
did_inform_syn_inits	syntax/inform.vim	/^    let did_inform_syn_inits = 1$/;"	v
did_inittab_syntax_inits	syntax/inittab.vim	/^    let did_inittab_syntax_inits = 1$/;"	v
did_install_default_menus	menu.vim	/^let did_install_default_menus = 1$/;"	v
did_install_syntax_menu	menu.vim	/^  let did_install_syntax_menu = 1$/;"	v
did_is_syntax_inits	syntax/ishd.vim	/^    let did_is_syntax_inits = 1$/;"	v
did_iss_syntax_inits	syntax/iss.vim	/^    let did_iss_syntax_inits = 1$/;"	v
did_jal_syn_inits	syntax/jal.vim	/^  let did_jal_syn_inits = 1$/;"	v
did_jam_syn_inits	syntax/jam.vim	/^    let did_jam_syn_inits = 1$/;"	v
did_jargon_syntax_inits	syntax/jargon.vim	/^		let did_jargon_syntax_inits = 1$/;"	v
did_java_syn_inits	syntax/java.vim	/^    let did_java_syn_inits = 1$/;"	v
did_javascript_syn_inits	syntax/javascript.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_jess_syntax_inits	syntax/jess.vim	/^    let did_jess_syntax_inits = 1$/;"	v
did_jgraph_syn_inits	syntax/jgraph.vim	/^    let did_jgraph_syn_inits = 1$/;"	v
did_jproperties_syntax_inits	syntax/jproperties.vim	/^    let did_jproperties_syntax_inits = 1$/;"	v
did_jsp_syn_inits	syntax/jsp.vim	/^    let did_jsp_syn_inits = 1$/;"	v
did_kix_syn_inits	syntax/kix.vim	/^		let did_kix_syn_inits=1$/;"	v
did_kscript_syntax_inits	syntax/kscript.vim	/^    let did_kscript_syntax_inits = 1$/;"	v
did_kwt_syn_inits	syntax/kwt.vim	/^	let did_kwt_syn_inits = 1$/;"	v
did_lace_syntax_inits	syntax/lace.vim	/^    let did_lace_syntax_inits = 1$/;"	v
did_latte_syntax_inits	syntax/latte.vim	/^    let did_latte_syntax_inits = 1$/;"	v
did_ldif_syn_inits	syntax/ldif.vim	/^    let did_ldif_syn_inits = 1$/;"	v
did_lifelines_syn_inits	syntax/lifelines.vim	/^    let did_lifelines_syn_inits = 1$/;"	v
did_lilo_syntax_inits	syntax/lilo.vim	/^    let did_lilo_syntax_inits = 1$/;"	v
did_lite_syn_inits	syntax/lite.vim	/^    let did_lite_syn_inits = 1$/;"	v
did_load_filetypes	filetype.vim	/^let did_load_filetypes = 1$/;"	v
did_load_ftplugin	ftplugin.vim	/^let did_load_ftplugin = 1$/;"	v
did_logtalk_syn_inits	syntax/logtalk.vim	/^		let did_logtalk_syn_inits = 1$/;"	v
did_lotos_syntax_inits	syntax/lotos.vim	/^    let did_lotos_syntax_inits = 1$/;"	v
did_lout_syn_inits	syntax/lout.vim	/^		let did_lout_syn_inits = 1$/;"	v
did_lpc_syn_inits	syntax/lpc.vim	/^    let did_lpc_syn_inits = 1$/;"	v
did_lprolog_syntax_inits	syntax/lprolog.vim	/^    let did_lprolog_syntax_inits = 1$/;"	v
did_lscript_syntax_inits	syntax/lscript.vim	/^    let did_lscript_syntax_inits = 1$/;"	v
did_lss_syntax_inits	syntax/lss.vim	/^    let did_lss_syntax_inits = 1$/;"	v
did_lua_syntax_inits	syntax/lua.vim	/^    let did_lua_syntax_inits = 1$/;"	v
did_m4_syn_inits	syntax/m4.vim	/^    let did_m4_syn_inits = 1$/;"	v
did_macro_syntax_inits	syntax/vmasm.vim	/^    let did_macro_syntax_inits = 1$/;"	v
did_mailcap_syntax_inits	syntax/mailcap.vim	/^    let did_mailcap_syntax_inits = 1$/;"	v
did_make_syn_inits	syntax/make.vim	/^    let did_make_syn_inits = 1$/;"	v
did_man_syn_inits	syntax/man.vim	/^    let did_man_syn_inits = 1$/;"	v
did_maplev_syntax_inits	syntax/maple.vim	/^    let did_maplev_syntax_inits = 1$/;"	v
did_masm_syntax_inits	syntax/masm.vim	/^    let did_masm_syntax_inits = 1$/;"	v
did_mason_syn_inits	syntax/mason.vim	/^		let did_mason_syn_inits = 1$/;"	v
did_master_syntax_inits	syntax/master.vim	/^    let did_master_syntax_inits = 1$/;"	v
did_matlab_syntax_inits	syntax/matlab.vim	/^    let did_matlab_syntax_inits = 1$/;"	v
did_maxima_syntax_inits	syntax/maxima.vim	/^    let did_maxima_syntax_inits = 1$/;"	v
did_mel_syntax_inits	syntax/mel.vim	/^    let did_mel_syntax_inits = 1$/;"	v
did_menu_trans	lang/menu_af_af.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_ca_es.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_chinese_gb.936.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_chinese_taiwan.950.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_cs_cz.iso_8859-2.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_czech_czech_republic.1250.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_czech_czech_republic.ascii.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_de_de.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_en_gb.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_eo.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_es_es.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_fi_fi.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_fr_fr.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_hu_hu.iso_8859-2.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_hu_hu.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_it_it.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_ja_jp.euc-jp.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_ja_jp.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_japanese_japan.932.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_ko_kr.euckr.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_ko_kr.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_nb_no.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_nl_nl.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_pl_pl.iso_8859-2.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_pl_pl.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_polish_poland.1250.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_pt_br.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_pt_pt.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_ru_ru.koi8-r.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_ru_ru.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_sk_sk.iso_8859-2.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_sl_si.cp1250.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_sl_si.latin2.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_sl_si.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_slovak_slovak_republic.1250.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_sr_yu.ascii.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_sr_yu.iso_8859-2.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_sr_yu.iso_8859-5.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_sr_yu.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_sv_se.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_uk_ua.cp1251.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_uk_ua.koi8-u.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_vi_vn.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_zh_cn.gb2312.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_zh_cn.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	lang/menu_zh_tw.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_mf_syntax_inits	syntax/mf.vim	/^    let did_mf_syntax_inits = 1$/;"	v
did_mgl_syn_inits	syntax/mgl.vim	/^    let did_mgl_syn_inits = 1$/;"	v
did_mgp_syn_inits	syntax/mgp.vim	/^    let did_mgp_syn_inits = 1$/;"	v
did_mgp_syn_inits	syntax/mgp.vim	/^  let did_mgp_syn_inits = 1$/;"	v
did_mib_syn_inits	syntax/mib.vim	/^    let did_mib_syn_inits = 1$/;"	v
did_mma_syn_inits	syntax/mma.vim	/^		let did_mma_syn_inits = 1$/;"	v
did_mmix_syntax_inits	syntax/mmix.vim	/^    let did_mmix_syntax_inits = 1$/;"	v
did_mmp_syntax_inits	syntax/mmp.vim	/^  let did_mmp_syntax_inits=1$/;"	v
did_modsim3_syntax_inits	syntax/modsim3.vim	/^    let did_modsim3_syntax_inits = 1$/;"	v
did_modula2_syntax_inits	syntax/modula2.vim	/^    let did_modula2_syntax_inits = 1$/;"	v
did_modula3_syntax_inits	syntax/modula3.vim	/^    let did_modula3_syntax_inits = 1$/;"	v
did_monk_syntax_inits	syntax/monk.vim	/^    let did_monk_syntax_inits = 1$/;"	v
did_mp_syntax_inits	syntax/mp.vim	/^    let did_mp_syntax_inits = 1$/;"	v
did_msidl_syntax_inits	syntax/msidl.vim	/^    let did_msidl_syntax_inits = 1$/;"	v
did_msql_syn_inits	syntax/msql.vim	/^    let did_msql_syn_inits = 1$/;"	v
did_mupad_syntax_inits	syntax/mupad.vim	/^    let did_mupad_syntax_inits = 1$/;"	v
did_mush_syntax_inits	syntax/mush.vim	/^    let did_mush_syntax_inits = 1$/;"	v
did_muttrc_syntax_inits	syntax/muttrc.vim	/^    let did_muttrc_syntax_inits = 1$/;"	v
did_mysql_syn_inits	syntax/mysql.vim	/^    let did_mysql_syn_inits = 1$/;"	v
did_named_syn_inits	syntax/named.vim	/^    let did_named_syn_inits = 1$/;"	v
did_nasm_syntax_inits	syntax/nasm.vim	/^    let did_nasm_syntax_inits = 1$/;"	v
did_nastran_syntax_inits	syntax/nastran.vim	/^     let did_nastran_syntax_inits = 1$/;"	v
did_natural_syntax_inits	syntax/natural.vim	/^    let did_natural_syntax_inits = 1$/;"	v
did_ncf_syntax_inits	syntax/ncf.vim	/^	let did_ncf_syntax_inits = 1$/;"	v
did_nqc_syn_inits	syntax/nqc.vim	/^    let did_nqc_syn_inits = 1$/;"	v
did_nroff_syn_inits	syntax/nroff.vim	/^		let did_nroff_syn_inits = 1$/;"	v
did_nsys_syn_inits	syntax/nsis.vim	/^    let did_nsys_syn_inits = 1$/;"	v
did_objc_syntax_inits	syntax/objc.vim	/^    let did_objc_syntax_inits = 1$/;"	v
did_ocaml_syntax_inits	syntax/ocaml.vim	/^    let did_ocaml_syntax_inits = 1$/;"	v
did_occam_syntax_inits	syntax/occam.vim	/^    let did_occam_syntax_inits = 1$/;"	v
did_omnimark_syntax_inits	syntax/omnimark.vim	/^    let did_omnimark_syntax_inits = 1$/;"	v
did_openroad_syntax_inits	syntax/openroad.vim	/^		let did_openroad_syntax_inits = 1$/;"	v
did_optwin_syntax_inits	optwin.vim	/^    let did_optwin_syntax_inits = 1$/;"	v
did_ora_syn_inits	syntax/ora.vim	/^    let did_ora_syn_inits = 1$/;"	v
did_pascal_syn_inits	syntax/pascal.vim	/^    let did_pascal_syn_inits = 1$/;"	v
did_pcap_syntax_inits	syntax/pcap.vim	/^    let did_pcap_syntax_inits = 1$/;"	v
did_pccts_syntax_inits	syntax/pccts.vim	/^    let did_pccts_syntax_inits = 1$/;"	v
did_perl_syn_inits	syntax/perl.vim	/^    let did_perl_syn_inits = 1$/;"	v
did_php_syn_inits	syntax/php.vim	/^    let did_php_syn_inits = 1$/;"	v
did_pic16f84_syntax_inits	syntax/pic.vim	/^    let did_pic16f84_syntax_inits = 1$/;"	v
did_pike_syntax_inits	syntax/pike.vim	/^    let did_pike_syntax_inits = 1$/;"	v
did_pilrc_syntax_inits	syntax/pilrc.vim	/^	let did_pilrc_syntax_inits = 1$/;"	v
did_pine_syn_inits	syntax/pine.vim	/^    let did_pine_syn_inits = 1$/;"	v
did_plm_syntax_inits	syntax/plm.vim	/^    let did_plm_syntax_inits = 1$/;"	v
did_plsql_syn_inits	syntax/plsql.vim	/^    let did_plsql_syn_inits = 1$/;"	v
did_po_syn_inits	syntax/po.vim	/^    let did_po_syn_inits = 1$/;"	v
did_pod_syntax_inits	syntax/pod.vim	/^    let did_pod_syntax_inits = 1$/;"	v
did_postscr_syntax_inits	syntax/postscr.vim	/^    let did_postscr_syntax_inits = 1$/;"	v
did_ppwiz_syn_inits	syntax/ppwiz.vim	/^		let did_ppwiz_syn_inits = 1$/;"	v
did_prescribe_syn_inits	syntax/prescribe.vim	/^    let did_prescribe_syn_inits = 1$/;"	v
did_procmail_syntax_inits	syntax/procmail.vim	/^    let did_procmail_syntax_inits = 1$/;"	v
did_progress_syntax_inits	syntax/progress.vim	/^	let did_progress_syntax_inits = 1$/;"	v
did_prolog_syn_inits	syntax/prolog.vim	/^    let did_prolog_syn_inits = 1$/;"	v
did_psf_syntax_inits	syntax/psf.vim	/^    let did_psf_syntax_inits = 1$/;"	v
did_ptcap_syntax_inits	syntax/ptcap.vim	/^	let did_ptcap_syntax_inits = 1$/;"	v
did_purifyLog_syntax_inits	syntax/purifylog.vim	/^    let did_purifyLog_syntax_inits = 1$/;"	v
did_pyrex_syntax_inits	syntax/pyrex.vim	/^    let did_pyrex_syntax_inits = 1$/;"	v
did_python_syn_inits	syntax/python.vim	/^    let did_python_syn_inits = 1$/;"	v
did_r_syn_inits	syntax/eviews.vim	/^    let did_r_syn_inits = 1$/;"	v
did_r_syn_inits	syntax/gretl.vim	/^    let did_r_syn_inits = 1$/;"	v
did_r_syn_inits	syntax/r.vim	/^    let did_r_syn_inits = 1$/;"	v
did_radiance_syn_inits	syntax/radiance.vim	/^    let did_radiance_syn_inits = 1$/;"	v
did_ratpoison_syn_inits	syntax/ratpoison.vim	/^    let did_ratpoison_syn_inits = 1$/;"	v
did_rc_syntax_inits	syntax/rc.vim	/^    let did_rc_syntax_inits = 1$/;"	v
did_rcs_syn_inits	syntax/rcs.vim	/^    let did_rcs_syn_inits = 1$/;"	v
did_rcslog_syntax_inits	syntax/rcslog.vim	/^    let did_rcslog_syntax_inits = 1$/;"	v
did_rebol_syntax_inits	syntax/rebol.vim	/^    let did_rebol_syntax_inits = 1$/;"	v
did_registry_syntax_inits	syntax/registry.vim	/^    let did_registry_syntax_inits = 1$/;"	v
did_remind_syn_inits	syntax/remind.vim	/^    let did_remind_syn_inits = 1$/;"	v
did_reva_syntax_inits	syntax/reva.vim	/^    let did_reva_syntax_inits=1$/;"	v
did_rexx_syn_inits	syntax/rexx.vim	/^    let did_rexx_syn_inits = 1$/;"	v
did_rhelp_syntax_inits	syntax/rhelp.vim	/^    let did_rhelp_syntax_inits = 1$/;"	v
did_rib_syntax_inits	syntax/rib.vim	/^    let did_rib_syntax_inits = 1$/;"	v
did_robots_syntax_inits	syntax/robots.vim	/^    let did_robots_syntax_inits = 1$/;"	v
did_rpcgen_syntax_inits	syntax/rpcgen.vim	/^    let did_rpcgen_syntax_inits = 1$/;"	v
did_rpl_syntax_inits	syntax/rpl.vim	/^    let did_rpl_syntax_inits = 1$/;"	v
did_rtf_syntax_inits	syntax/rtf.vim	/^    let did_rtf_syntax_inits = 1$/;"	v
did_samba_syn_inits	syntax/samba.vim	/^    let did_samba_syn_inits = 1$/;"	v
did_sas_syntax_inits	syntax/sas.vim	/^      let did_sas_syntax_inits = 1$/;"	v
did_sather_syn_inits	syntax/sather.vim	/^    let did_sather_syn_inits = 1$/;"	v
did_scheme_syntax_inits	syntax/scheme.vim	/^    let did_scheme_syntax_inits = 1$/;"	v
did_scilab_syntax_inits	syntax/scilab.vim	/^		let did_scilab_syntax_inits = 1$/;"	v
did_sdl_syn_inits	syntax/sdl.vim	/^	let did_sdl_syn_inits = 1$/;"	v
did_sed_syntax_inits	syntax/sed.vim	/^	let did_sed_syntax_inits = 1$/;"	v
did_sgmldecl_syntax_init	syntax/sgmldecl.vim	/^    let did_sgmldecl_syntax_init = 1$/;"	v
did_sgmllnx_syn_inits	syntax/sgmllnx.vim	/^    let did_sgmllnx_syn_inits = 1$/;"	v
did_sicad_syntax_inits	syntax/sicad.vim	/^    let did_sicad_syntax_inits = 1$/;"	v
did_simula_syntax_inits	syntax/simula.vim	/^	let did_simula_syntax_inits = 1$/;"	v
did_sinda_syntax_inits	syntax/sinda.vim	/^    let did_sinda_syntax_inits = 1$/;"	v
did_sindacmp_syntax_inits	syntax/sindacmp.vim	/^    let did_sindacmp_syntax_inits = 1$/;"	v
did_sindaout_syntax_inits	syntax/sindaout.vim	/^    let did_sindaout_syntax_inits = 1$/;"	v
did_skill_syntax_inits	syntax/skill.vim	/^    let did_skill_syntax_inits = 1$/;"	v
did_sl_syntax_inits	syntax/sl.vim	/^    let did_sl_syntax_inits = 1$/;"	v
did_slang_syntax_inits	syntax/slang.vim	/^    let did_slang_syntax_inits = 1$/;"	v
did_slice_syn_inits	syntax/slice.vim	/^    let did_slice_syn_inits = 1$/;"	v
did_slrnrc_syntax_inits	syntax/slrnrc.vim	/^    let did_slrnrc_syntax_inits = 1$/;"	v
did_slrnsc_syntax_inits	syntax/slrnsc.vim	/^    let did_slrnsc_syntax_inits = 1$/;"	v
did_smarty_syn_inits	syntax/smarty.vim	/^    let did_smarty_syn_inits = 1$/;"	v
did_smil_syntax_inits	syntax/sm.vim	/^    let did_smil_syntax_inits = 1$/;"	v
did_smil_syntax_inits	syntax/smil.vim	/^    let did_smil_syntax_inits = 1$/;"	v
did_smith_syntax_inits	syntax/smith.vim	/^    let did_smith_syntax_inits = 1$/;"	v
did_sml_syntax_inits	syntax/sml.vim	/^    let did_sml_syntax_inits = 1$/;"	v
did_snnsnet_syn_inits	syntax/snnsnet.vim	/^    let did_snnsnet_syn_inits = 1$/;"	v
did_snnspat_syn_inits	syntax/snnspat.vim	/^    let did_snnspat_syn_inits = 1$/;"	v
did_snnsres_syn_inits	syntax/snnsres.vim	/^    let did_snnsres_syn_inits = 1$/;"	v
did_snobol4_syntax_inits	syntax/snobol4.vim	/^    let did_snobol4_syntax_inits = 1$/;"	v
did_spec_syntax_inits	syntax/spec.vim	/^    let did_spec_syntax_inits = 1$/;"	v
did_specman_syn_inits	syntax/specman.vim	/^    let did_specman_syn_inits = 1$/;"	v
did_spice_syntax_inits	syntax/spice.vim	/^    let did_spice_syntax_inits = 1$/;"	v
did_splint_syntax_inits	syntax/splint.vim	/^    let did_splint_syntax_inits = 1$/;"	v
did_spup_syn_inits	syntax/spup.vim	/^		let did_spup_syn_inits = 1$/;"	v
did_sql_syn_inits	syntax/sqlanywhere.vim	/^        let did_sql_syn_inits = 1$/;"	v
did_sql_syn_inits	syntax/sqlinformix.vim	/^    let did_sql_syn_inits = 1$/;"	v
did_sql_syn_inits	syntax/sqloracle.vim	/^    let did_sql_syn_inits = 1$/;"	v
did_sqlforms_syn_inits	syntax/sqlforms.vim	/^	let did_sqlforms_syn_inits = 1$/;"	v
did_sqlj_syn_inits	syntax/sqlj.vim	/^    let did_sqlj_syn_inits = 1$/;"	v
did_sqr_syn_inits	syntax/sqr.vim	/^    let did_sqr_syn_inits = 1$/;"	v
did_squid_syntax_inits	syntax/squid.vim	/^    let did_squid_syntax_inits = 1$/;"	v
did_sshconfig_syntax_inits	syntax/sshconfig.vim	/^		let did_sshconfig_syntax_inits = 1$/;"	v
did_sshdconfig_syntax_inits	syntax/sshdconfig.vim	/^		let did_sshdconfig_syntax_inits = 1$/;"	v
did_st_syntax_inits	syntax/st.vim	/^    let did_st_syntax_inits = 1$/;"	v
did_stp_syn_inits	syntax/stp.vim	/^    let did_stp_syn_inits = 1$/;"	v
did_strace_syntax_inits	syntax/strace.vim	/^		let did_strace_syntax_inits = 1$/;"	v
did_svkannotate_syntax_inits	syntax/svkannotate.vim	/^	let did_svkannotate_syntax_inits = 1$/;"	v
did_svn_syn_inits	syntax/svn.vim	/^    let did_svn_syn_inits = 1$/;"	v
did_svnannotate_syntax_inits	syntax/svnannotate.vim	/^	let did_svnannotate_syntax_inits = 1$/;"	v
did_tads_syn_inits	syntax/tads.vim	/^    let did_tads_syn_inits = 1$/;"	v
did_tak_syntax_inits	syntax/tak.vim	/^    let did_tak_syntax_inits = 1$/;"	v
did_takcmp_syntax_inits	syntax/takcmp.vim	/^    let did_takcmp_syntax_inits = 1$/;"	v
did_takout_syntax_inits	syntax/takout.vim	/^    let did_takout_syntax_inits = 1$/;"	v
did_tasm_syntax_inits	syntax/tasm.vim	/^    let did_tasm_syntax_inits = 1$/;"	v
did_tcl_syntax_inits	syntax/tcl.vim	/^    let did_tcl_syntax_inits = 1$/;"	v
did_tex_syntax_inits	syntax/lhaskell.vim	/^    let did_tex_syntax_inits = 1$/;"	v
did_tex_syntax_inits	syntax/tex.vim	/^ let did_tex_syntax_inits = 1$/;"	v
did_tex_syntax_inits	syntax/tex.vim	/^ let did_tex_syntax_inits= 2$/;"	v
did_texinfo_syn_inits	syntax/texinfo.vim	/^    let did_texinfo_syn_inits = 1$/;"	v
did_texmf_syntax_inits	syntax/texmf.vim	/^    let did_texmf_syntax_inits = 1$/;"	v
did_tf_syn_inits	syntax/tf.vim	/^    let did_tf_syn_inits = 1$/;"	v
did_tidy_syn_inits	syntax/tidy.vim	/^    let did_tidy_syn_inits = 1$/;"	v
did_tli_syntax_inits	syntax/tli.vim	/^    let did_tli_syntax_inits = 1$/;"	v
did_toolbar_tmenu	menu.vim	/^  let did_toolbar_tmenu = 1$/;"	v
did_tpp_syn_inits	syntax/tpp.vim	/^    let did_tpp_syn_inits = 1$/;"	v
did_trasys_syntax_inits	syntax/trasys.vim	/^    let did_trasys_syntax_inits = 1$/;"	v
did_tsalt_syntax_inits	syntax/tsalt.vim	/^    let did_tsalt_syntax_inits = 1$/;"	v
did_tsscl_syntax_inits	syntax/tsscl.vim	/^    let did_tsscl_syntax_inits = 1$/;"	v
did_tssgm_syntax_inits	syntax/tssgm.vim	/^    let did_tssgm_syntax_inits = 1$/;"	v
did_tssop_syntax_inits	syntax/tssop.vim	/^    let did_tssop_syntax_inits = 1$/;"	v
did_uc_syntax_inits	syntax/uc.vim	/^    let did_uc_syntax_inits = 1$/;"	v
did_uil_syn_inits	syntax/uil.vim	/^    let did_uil_syn_inits = 1$/;"	v
did_vb_syntax_inits	syntax/vb.vim	/^		let did_vb_syntax_inits = 1$/;"	v
did_vera_syn_inits	syntax/vera.vim	/^    let did_vera_syn_inits = 1$/;"	v
did_verilog_syn_inits	syntax/verilog.vim	/^      let did_verilog_syn_inits = 1$/;"	v
did_verilogams_syn_inits	syntax/verilogams.vim	/^      let did_verilogams_syn_inits = 1$/;"	v
did_vhdl_syntax_inits	syntax/vhdl.vim	/^    let did_vhdl_syntax_inits = 1$/;"	v
did_virata_syntax_inits	syntax/virata.vim	/^    let did_virata_syntax_inits = 1$/;"	v
did_vsejcl_syntax	syntax/vsejcl.vim	/^    let did_vsejcl_syntax = 1$/;"	v
did_wdiff_syn_inits	syntax/wdiff.vim	/^    let did_wdiff_syn_inits = 1$/;"	v
did_wdiff_syn_inits	syntax/wdiff.vim	/^  let did_wdiff_syn_inits = 1$/;"	v
did_webmacro_syn_inits	syntax/webmacro.vim	/^    let did_webmacro_syn_inits = 1$/;"	v
did_wget_syn_inits	syntax/wget.vim	/^    let did_wget_syn_inits = 1$/;"	v
did_winbatch_syntax_inits	syntax/winbatch.vim	/^    let did_winbatch_syntax_inits = 1$/;"	v
did_wml_syn_inits	syntax/wml.vim	/^    let did_wml_syn_inits = 1$/;"	v
did_wml_syn_inits	syntax/wml.vim	/^  let did_wml_syn_inits = 1$/;"	v
did_wsml_syn_inits	syntax/wsml.vim	/^       let did_wsml_syn_inits = 1$/;"	v
did_xdefaults_syntax_inits	syntax/xdefaults.vim	/^    let did_xdefaults_syntax_inits = 1$/;"	v
did_xkb_syntax_inits	syntax/xkb.vim	/^		let did_xkb_syntax_inits = 1$/;"	v
did_xmath_syntax_inits	syntax/xmath.vim	/^    let did_xmath_syntax_inits = 1$/;"	v
did_xpm2_syntax_inits	syntax/xpm2.vim	/^    let did_xpm2_syntax_inits = 1$/;"	v
did_xpm_syntax_inits	syntax/xpm.vim	/^    let did_xpm_syntax_inits = 1$/;"	v
did_xs_syntax_inits	syntax/xs.vim	/^    let did_xs_syntax_inits = 1$/;"	v
did_xxd_syntax_inits	syntax/xxd.vim	/^    let did_xxd_syntax_inits = 1$/;"	v
did_yacchdl_syn_inits	syntax/yacc.vim	/^    let did_yacchdl_syn_inits = 1$/;"	v
did_z8a_syntax_inits	syntax/z8a.vim	/^    let did_z8a_syntax_inits = 1$/;"	v
diffcomplete	ftplugin/gitcommit.vim	/^function! s:diffcomplete(A,L,P)$/;"	f
displayHelp	plugin/NERD_tree.vim	/^function! s:displayHelp()$/;"	f
dodigits	ftplugin/pdf.vim	/^function! s:dodigits(digits)$/;"	f
dolu	tutor/tutor.cs	/^  2. Dr¾ klávesu pro pohyb dolu (j), dokud se její funkce nezopakuje.$/;"	m
doobject	ftplugin/pdf.vim	/^function! s:doobject(string)$/;"	f
dosbatch_cmdextversion	syntax/dosbatch.vim	/^  let dosbatch_cmdextversion = 2$/;"	v
doxygengroup	syntax/doxygen.vim	/^    aug doxygengroup$/;"	a
dprint	autoload/rubycomplete.vim	/^function! s:dprint(msg)$/;"	f
dtd_cpo_save__	syntax/dtd.vim	/^    let __dtd_cpo_save__ = &cpo$/;"	v
dumpHelp	plugin/NERD_tree.vim	/^function! s:dumpHelp()$/;"	f
dump_str_as_hex	vimsh.py	/^def dump_str_as_hex( _str ):$/;"	f
e	macros/hanoi/hanoi.vim	/^map e "fy2l$/;"	m
e	macros/less.vim	/^map e <CR>$/;"	m
echo	nerdtree_plugin/fs_menu.vim	/^function! s:echo(msg)$/;"	f
echo	plugin/NERD_tree.vim	/^function! s:echo(msg)$/;"	f
echoError	plugin/NERD_tree.vim	/^function! s:echoError(msg)$/;"	f
echoWarning	nerdtree_plugin/fs_menu.vim	/^function! s:echoWarning(msg)$/;"	f
echoWarning	plugin/NERD_tree.vim	/^function! s:echoWarning(msg)$/;"	f
encoding	keymap/hebrew.vim	/^	let encoding = 'cp1255'$/;"	v
encoding	keymap/hebrew.vim	/^	let encoding = 'iso-8859-8'$/;"	v
encoding	keymap/hebrew.vim	/^let encoding = &enc$/;"	v
encoding	keymap/hebrewp.vim	/^	let encoding = 'cp1255'$/;"	v
encoding	keymap/hebrewp.vim	/^	let encoding = 'iso-8859-8'$/;"	v
encoding	keymap/hebrewp.vim	/^let encoding = &enc$/;"	v
encoding	keymap/persian.vim	/^	let encoding = 'utf-8'$/;"	v
encoding	keymap/persian.vim	/^let encoding = &enc$/;"	v
encoding	keymap/polish-slash.vim	/^	let encoding = 'cp1250'$/;"	v
encoding	keymap/polish-slash.vim	/^	let encoding = 'iso-8859-2'$/;"	v
encoding	keymap/polish-slash.vim	/^let encoding = &enc$/;"	v
encoding	keymap/serbian.vim	/^	let encoding = 'cp1250'$/;"	v
encoding	keymap/serbian.vim	/^	let encoding = 'iso-8859-2'$/;"	v
encoding	keymap/serbian.vim	/^let encoding = &enc$/;"	v
encoding	keymap/slovak.vim	/^	let encoding = 'cp1250'$/;"	v
encoding	keymap/slovak.vim	/^	let encoding = 'iso-8859-2'$/;"	v
encoding	keymap/slovak.vim	/^let encoding = &enc$/;"	v
end_exe_line	vimsh.py	/^    def end_exe_line( self ):$/;"	m	class:vimsh
end_read	vimsh.py	/^    def end_read( self, _any_lines_read ):$/;"	m	class:vimsh
errormarker	plugin/errormarker.vim	/^augroup errormarker$/;"	a
erven	tutor/tutor.cs	/^     a) Rù¾e jsou èervené,$/;"	v
escChars	compiler/tex.vim	/^		let escChars = ''$/;"	v
escChars	compiler/tex.vim	/^		let escChars = '{}\\'$/;"	v
escape	autoload/gzip.vim	/^fun s:escape(name)$/;"	f
esctext	doc/vim2html.pl	/^sub esctext$/;"	s
escurl	doc/vim2html.pl	/^sub escurl$/;"	s
exec	plugin/NERD_tree.vim	/^function! s:exec(cmd)$/;"	f
execute_cmd	vimsh.py	/^    def execute_cmd( self, _cmd = None, _null_terminate = 1 ):$/;"	m	class:vimsh
f	macros/less.vim	/^map f <Space>$/;"	m
filename	indent/sql.vim	/^        let filename = b:sql_type_override$/;"	v
filename	indent/sql.vim	/^        let filename = g:sql_type_default$/;"	v
filename	indent/sql.vim	/^let filename = 'sqlanywhere'$/;"	v
filename	syntax/sql.vim	/^        let filename = b:sql_type_override$/;"	v
filename	syntax/sql.vim	/^        let filename = g:sql_type_default$/;"	v
filename	syntax/sql.vim	/^let filename = 'sqloracle'$/;"	v
filetypedetect	filetype.vim	/^augroup filetypedetect$/;"	a
filetypeindent	indent.vim	/^augroup filetypeindent$/;"	a
filetypeplugin	ftplugin.vim	/^augroup filetypeplugin$/;"	a
findAndRevealPath	plugin/NERD_tree.vim	/^function! s:findAndRevealPath()$/;"	f
firstUsableWindow	plugin/NERD_tree.vim	/^function! s:firstUsableWindow()$/;"	f
fix_beginfigs	ftplugin/mp.vim	/^  function! s:fix_beginfigs()$/;"	f
fortran_free_source	syntax/sinda.vim	/^let fortran_free_source=1$/;"	v
fortran_free_source	syntax/tak.vim	/^let fortran_free_source=1$/;"	v
fortran_free_source	syntax/trasys.vim	/^let fortran_free_source=1$/;"	v
free_double_matrix	c-support/codesnippets/calloc_double_matrix.c	/^free_double_matrix ( double **m )$/;"	f
free_int_matrix	c-support/codesnippets/calloc_int_matrix.c	/^free_int_matrix ( int **m )$/;"	f
g	macros/hanoi/hanoi.vim	/^map g IL$/;"	m
g	macros/less.vim	/^noremap <script> g gg<SID>L$/;"	m
g	macros/life/life.vim	/^map g IR$/;"	m
g	macros/urm/urm.vim	/^map g 1G\/^[(as;.]$/;"	m
g%	macros/matchit.vim	/^nnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'n') <CR>$/;"	m
g%	macros/matchit.vim	/^onoremap <silent> g% v:<C-U>call <SID>Match_wrapper('',0,'o') <CR>$/;"	m
g%	macros/matchit.vim	/^vnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'v') <CR>m'gv``$/;"	m
g%	plugin/matchit.vim	/^nnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'n') <CR>$/;"	m
g%	plugin/matchit.vim	/^onoremap <silent> g% v:<C-U>call <SID>Match_wrapper('',0,'o') <CR>$/;"	m
g%	plugin/matchit.vim	/^vnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'v') <CR>m'gv``$/;"	m
g%	plugin/plugin/matchit.vim	/^nnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'n') <CR>$/;"	m
g%	plugin/plugin/matchit.vim	/^onoremap <silent> g% v:<C-U>call <SID>Match_wrapper('',0,'o') <CR>$/;"	m
g%	plugin/plugin/matchit.vim	/^vnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'v') <CR>m'gv``$/;"	m
g:BASH_Dictionary_File	plugin/bash-support.vim	/^	let g:BASH_Dictionary_File     = s:plugin_dir.'bash-support\/wordlists\/bash.list'$/;"	v
g:BASH_Version	plugin/bash-support.vim	/^let g:BASH_Version= "3.1.1"  						" version number of this script; do not change$/;"	v
g:BufExplorer_title	plugin/bufexplorer.vim	/^let g:BufExplorer_title = "\\[Buf\\ List\\]"$/;"	v
g:C_Dictionary_File	plugin/c.vim	/^  let g:C_Dictionary_File = s:plugin_dir.'c-support\/wordlists\/c-c++-keywords.list,'.$/;"	v
g:C_Version	plugin/c.vim	/^let g:C_Version= "5.10"  							" version number of this script; do not change$/;"	v
g:GetLatestVimScripts_allowautoinstall	autoload/getscript.vim	/^ let g:GetLatestVimScripts_allowautoinstall= 1$/;"	v
g:GetLatestVimScripts_mv	autoload/getscript.vim	/^   let g:GetLatestVimScripts_mv= "mv"$/;"	v
g:GetLatestVimScripts_mv	autoload/getscript.vim	/^   let g:GetLatestVimScripts_mv= "ren"$/;"	v
g:GetLatestVimScripts_options	autoload/getscript.vim	/^  let g:GetLatestVimScripts_options = ""$/;"	v
g:GetLatestVimScripts_options	autoload/getscript.vim	/^  let g:GetLatestVimScripts_options= ""$/;"	v
g:GetLatestVimScripts_options	autoload/getscript.vim	/^  let g:GetLatestVimScripts_options= "-q -O"$/;"	v
g:GetLatestVimScripts_options	autoload/getscript.vim	/^  let g:GetLatestVimScripts_options= "-s -O"$/;"	v
g:GetLatestVimScripts_wget	autoload/getscript.vim	/^  let g:GetLatestVimScripts_wget    = 'echo "GetLatestVimScripts needs wget or curl"'$/;"	v
g:GetLatestVimScripts_wget	autoload/getscript.vim	/^  let g:GetLatestVimScripts_wget= "curl"$/;"	v
g:GetLatestVimScripts_wget	autoload/getscript.vim	/^  let g:GetLatestVimScripts_wget= "wget"$/;"	v
g:Imap_Debug	plugin/imaps.vim	/^	let g:Imap_Debug = 0$/;"	v
g:Imap_DeleteEmptyPlaceHolders	plugin/imaps.vim	/^	let g:Imap_DeleteEmptyPlaceHolders = 1$/;"	v
g:Imap_StickyPlaceHolders	plugin/imaps.vim	/^	let g:Imap_StickyPlaceHolders = 1$/;"	v
g:NERDTreeBookmark	plugin/NERD_tree.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeDirNode	plugin/NERD_tree.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeFileNode	plugin/NERD_tree.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeIgnore	plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreePath	plugin/NERD_tree.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreeSortOrder	plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeStatusline	plugin/NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path.str():''}"$/;"	v
g:NETRW_BOOKMARKMAX	autoload/netrw.vim	/^ let g:NETRW_BOOKMARKMAX= 0$/;"	v
g:NETRW_DIRHIST_CNT	autoload/netrw.vim	/^ let g:NETRW_DIRHIST_CNT= 0$/;"	v
g:NetrwTopLvlMenu	autoload/netrw.vim	/^ let g:NetrwTopLvlMenu= "Netrw."$/;"	v
g:Tex_Debug	ftplugin/latex-suite/main.vim	/^	let g:Tex_Debug = 0$/;"	v
g:Tex_ElementsMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^	let g:Tex_ElementsMenuLocation = (g:Tex_NextMenuLocation).'.20 '.g:Tex_MenuPrefix$/;"	v
g:Tex_ElementsMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^	let g:Tex_ElementsMenuLocation = (g:Tex_NextMenuLocation).'.20 '.g:Tex_MenuPrefix.'E&lements.'$/;"	v
g:Tex_EnvMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^let g:Tex_EnvMenuLocation = (g:Tex_NextMenuLocation).'.20 '.g:Tex_MenuPrefix.'E&nvironments.'$/;"	v
g:Tex_IgnoreLevel	compiler/tex.vim	/^	let g:Tex_IgnoreLevel = 7$/;"	v
g:Tex_IgnoreUnmatched	compiler/tex.vim	/^	let g:Tex_IgnoreUnmatched = 1$/;"	v
g:Tex_IgnoredWarnings	compiler/tex.vim	/^	let g:Tex_IgnoredWarnings =$/;"	v
g:Tex_MacrosMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^let g:Tex_MacrosMenuLocation = g:Tex_MainMenuLocation.'.20 '.s:mainmenuname.'&Macros.'$/;"	v
g:Tex_NextMenuLocation	ftplugin/latex-suite/mathmacros.vim	/^let g:Tex_NextMenuLocation = g:Tex_NextMenuLocation + 1$/;"	v
g:Tex_NextMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^	let g:Tex_NextMenuLocation = g:Tex_NextMenuLocation + 1$/;"	v
g:Tex_NextMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^let g:Tex_NextMenuLocation = g:Tex_MainMenuLocation$/;"	v
g:Tex_NextMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^let g:Tex_NextMenuLocation = g:Tex_NextMenuLocation + 1$/;"	v
g:Tex_PackagesMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^	let g:Tex_PackagesMenuLocation = (g:Tex_MainMenuLocation).'.10 '.s:mainmenuname.'&Packages.'$/;"	v
g:Tex_PackagesMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^	let g:Tex_PackagesMenuLocation = (g:Tex_NextMenuLocation).'.10 '.g:Tex_MenuPrefix.'Packages.'$/;"	v
g:Tex_PromptedCommandsDefault	ftplugin/latex-suite/packages.vim	/^let g:Tex_PromptedCommandsDefault = g:Tex_PromptedCommands$/;"	v
g:Tex_PromptedEnvironmentsDefault	ftplugin/latex-suite/packages.vim	/^let g:Tex_PromptedEnvironmentsDefault = g:Tex_PromptedEnvironments$/;"	v
g:Tex_ShowallLines	compiler/tex.vim	/^	let g:Tex_ShowallLines = 0$/;"	v
g:Tex_TemplatesMenuLocation	ftplugin/latex-suite/texmenuconf.vim	/^let g:Tex_TemplatesMenuLocation = g:Tex_MainMenuLocation.'.20 '.s:mainmenuname.'&Templates.'$/;"	v
g:Tex_ViewRule_dvi	vimrc.vim	/^let g:Tex_ViewRule_dvi = 'xdvi'$/;"	v
g:Tex_completion_addcontentsline	ftplugin/latex-suite/texviewer.vim	/^let g:Tex_completion_addcontentsline = 'lof}{figure}{,lot}{table}{,toc}{chapter}{,toc}{part}{,'.$/;"	v
g:Tex_completion_addtocontents	ftplugin/latex-suite/texviewer.vim	/^let g:Tex_completion_addtocontents = 'lof}{,lot}{,toc}{'$/;"	v
g:Tex_completion_bibliographystyle	ftplugin/latex-suite/texviewer.vim	/^let g:Tex_completion_bibliographystyle = 'abbr,alpha,plain,unsrt'$/;"	v
g:Tex_completion_explorer	ftplugin/latex-suite/main.vim	/^let g:Tex_completion_explorer = ','$/;"	v
g:Tex_package_detected	ftplugin/latex-suite/packages.vim	/^let g:Tex_package_detected = ''$/;"	v
g:Tex_package_supported	ftplugin/latex-suite/packages.vim	/^let g:Tex_package_supported = ''$/;"	v
g:VCSCOMMAND_IDENTIFY_EXACT	plugin/vcscommand.vim	/^let g:VCSCOMMAND_IDENTIFY_EXACT = 1$/;"	v
g:VCSCOMMAND_IDENTIFY_INEXACT	plugin/vcscommand.vim	/^let g:VCSCOMMAND_IDENTIFY_INEXACT = -1$/;"	v
g:VEConf_usingGnome	plugin/vimExplorer.vim	/^    let g:VEConf_usingGnome = 0$/;"	v
g:VEConf_usingKDE	plugin/vimExplorer.vim	/^    let g:VEConf_usingKDE = 0$/;"	v
g:ada#Comment	autoload/ada.vim	/^let g:ada#Comment	   = "\\\\v^(\\"[^\\"]*\\"|'.'|[^\\"']){-}\\\\zs\\\\s*--.*"$/;"	v
g:ada#Ctags_Kinds	autoload/ada.vim	/^let g:ada#Ctags_Kinds = {$/;"	v
g:ada#DotWordRegex	autoload/ada.vim	/^let g:ada#DotWordRegex	   = '\\a\\w*\\(\\_s*\\.\\_s*\\a\\w*\\)*'$/;"	v
g:ada#Keywords	autoload/ada.vim	/^	let g:ada#Keywords += [{$/;"	v
g:ada#Keywords	autoload/ada.vim	/^       let g:ada#Keywords += [{$/;"	v
g:ada#Keywords	autoload/ada.vim	/^    let g:ada#Keywords += [{$/;"	v
g:ada#Keywords	autoload/ada.vim	/^let g:ada#Keywords	   = []$/;"	v
g:ada#WordRegex	autoload/ada.vim	/^let g:ada#WordRegex	   = '\\a\\w*'$/;"	v
g:ada_default_compiler	ftplugin/ada.vim	/^      let g:ada_default_compiler = 'decada'$/;"	v
g:ada_default_compiler	ftplugin/ada.vim	/^      let g:ada_default_compiler = 'gnat'$/;"	v
g:astronaut_bold	colors/astronaut.vim	/^ let g:astronaut_bold= 0$/;"	v
g:astronaut_dark	colors/astronaut.vim	/^ let g:astronaut_dark= 0$/;"	v
g:astronaut_italic	colors/astronaut.vim	/^ let g:astronaut_italic= 0$/;"	v
g:astronaut_underline	colors/astronaut.vim	/^ let g:astronaut_underline= 1$/;"	v
g:bmenu_max_pathlen	menu.vim	/^  let g:bmenu_max_pathlen = 35$/;"	v
g:bufexplorer_version	plugin/bufexplorer.vim	/^let g:bufexplorer_version = "7.2.7"$/;"	v
g:changelog_date_end_entry_search	ftplugin/changelog.vim	/^    let g:changelog_date_end_entry_search = '^\\s*$'$/;"	v
g:changelog_date_entry_search	ftplugin/changelog.vim	/^    let g:changelog_date_entry_search = '^\\s*%d\\_s*%u'$/;"	v
g:changelog_dateformat	ftplugin/changelog.vim	/^      let g:changelog_dateformat = "%Y-%m-%d"$/;"	v
g:changelog_dateformat	ftplugin/changelog.vim	/^      let g:changelog_dateformat = g:changelog_timeformat$/;"	v
g:changelog_new_date_format	ftplugin/changelog.vim	/^    let g:changelog_new_date_format = "%d  %u\\n\\n\\t* %c\\n\\n"$/;"	v
g:changelog_new_entry_format	ftplugin/changelog.vim	/^    let g:changelog_new_entry_format = "\\t* %c"$/;"	v
g:changelog_username	ftplugin/changelog.vim	/^      let g:changelog_username = $EMAIL$/;"	v
g:changelog_username	ftplugin/changelog.vim	/^      let g:changelog_username = $EMAIL_ADDRESS$/;"	v
g:changelog_username	ftplugin/changelog.vim	/^      let g:changelog_username = name . '  <' . login . '@' . hostname . '>'$/;"	v
g:cm	vimrc.vim	/^let g:cm=get(g:cms,&ft)$/;"	v
g:cms	vimrc.vim	/^let g:cms={$/;"	v
g:colors_name	colors/adrian.vim	/^let g:colors_name = "adrian"$/;"	v
g:colors_name	colors/aiseered.vim	/^let g:colors_name="aiseered"$/;"	v
g:colors_name	colors/anotherdark.vim	/^let g:colors_name="anotherdark"$/;"	v
g:colors_name	colors/aqua.vim	/^let g:colors_name="aqua"$/;"	v
g:colors_name	colors/astronaut.vim	/^let g:colors_name      = "astronaut"$/;"	v
g:colors_name	colors/asu1dark.vim	/^let g:colors_name="asu1dark"$/;"	v
g:colors_name	colors/baycomb.vim	/^let g:colors_name="baycomb"$/;"	v
g:colors_name	colors/bclear.vim	/^let g:colors_name = "bclear"$/;"	v
g:colors_name	colors/biogoo.vim	/^let g:colors_name = "biogoo"$/;"	v
g:colors_name	colors/blacksea.vim	/^let g:colors_name = "BlackSea"$/;"	v
g:colors_name	colors/blue.vim	/^let g:colors_name = "blue"$/;"	v
g:colors_name	colors/bluegreen.vim	/^let g:colors_name="mine"$/;"	v
g:colors_name	colors/borland.vim	/^let g:colors_name="borland"$/;"	v
g:colors_name	colors/brookstream.vim	/^let g:colors_name="brookstream"$/;"	v
g:colors_name	colors/calmar256-dark.vim	/^let g:colors_name = "calmar256-dark"$/;"	v
g:colors_name	colors/calmar256-light.vim	/^let g:colors_name = "calmar256-light"$/;"	v
g:colors_name	colors/camo.vim	/^let g:colors_name="camo"$/;"	v
g:colors_name	colors/candycode.vim	/^let g:colors_name="candycode"$/;"	v
g:colors_name	colors/chela_light.vim	/^let g:colors_name="chela_light"$/;"	v
g:colors_name	colors/chocolateliquor.vim	/^let g:colors_name = "ChocolateLiquor"$/;"	v
g:colors_name	colors/clarity.vim	/^let g:colors_name="clarity"$/;"	v
g:colors_name	colors/colorer.vim	/^let g:colors_name = "colorer"$/;"	v
g:colors_name	colors/dante.vim	/^let g:colors_name = "dante"$/;"	v
g:colors_name	colors/darkZ.vim	/^let g:colors_name="darkZ"$/;"	v
g:colors_name	colors/darkblue2.vim	/^let g:colors_name = "darkblue2"$/;"	v
g:colors_name	colors/darkbone.vim	/^let g:colors_name = 'darkbone'$/;"	v
g:colors_name	colors/darkslategray.vim	/^let g:colors_name = "darkslategray"$/;"	v
g:colors_name	colors/darkspectrum.vim	/^let g:colors_name="darkspectrum"$/;"	v
g:colors_name	colors/denim.vim	/^let g:colors_name="denim"$/;"	v
g:colors_name	colors/desert.vim	/^let g:colors_name="desert"$/;"	v
g:colors_name	colors/desert256.vim	/^let g:colors_name="desert256"$/;"	v
g:colors_name	colors/desertEx.vim	/^let g:colors_name="desertEx"$/;"	v
g:colors_name	colors/dw_blue.vim	/^let g:colors_name="dw_blue"$/;"	v
g:colors_name	colors/dw_cyan.vim	/^let g:colors_name="dw_cyan"$/;"	v
g:colors_name	colors/dw_green.vim	/^let g:colors_name="dw_green"$/;"	v
g:colors_name	colors/dw_orange.vim	/^let g:colors_name="dw_orange"$/;"	v
g:colors_name	colors/dw_purple.vim	/^let g:colors_name="dw_purple"$/;"	v
g:colors_name	colors/dw_red.vim	/^let g:colors_name="dw_red"$/;"	v
g:colors_name	colors/dw_yellow.vim	/^let g:colors_name="dw_yellow"$/;"	v
g:colors_name	colors/eclipse.vim	/^let g:colors_name = "eclipse"$/;"	v
g:colors_name	colors/ekvoli.vim	/^let g:colors_name = "ekvoli"$/;"	v
g:colors_name	colors/elflord.vim	/^let g:colors_name = "elflord"$/;"	v
g:colors_name	colors/golden.vim	/^let g:colors_name = "golden"$/;"	v
g:colors_name	colors/guardian.vim	/^let g:colors_name = "Guardian"$/;"	v
g:colors_name	colors/habilight.vim	/^let g:colors_name = "habiLight"$/;"	v
g:colors_name	colors/impact.vim	/^let g:colors_name="impact"$/;"	v
g:colors_name	colors/jammy.vim	/^let g:colors_name="jammy"$/;"	v
g:colors_name	colors/koehler.vim	/^let g:colors_name = "koehler"$/;"	v
g:colors_name	colors/leo.vim	/^let g:colors_name = "leo256"$/;"	v
g:colors_name	colors/lettuce.vim	/^let g:colors_name="lettuce"$/;"	v
g:colors_name	colors/manxome.vim	/^let g:colors_name = "manxome"$/;"	v
g:colors_name	colors/marklar.vim	/^let g:colors_name = "marklar"$/;"	v
g:colors_name	colors/maroloccio.vim	/^let g:colors_name="maroloccio"$/;"	v
g:colors_name	colors/matrix.vim	/^let g:colors_name = 'matrix'$/;"	v
g:colors_name	colors/molokai.vim	/^let g:colors_name="molokai"$/;"	v
g:colors_name	colors/moss.vim	/^let g:colors_name = "moss"$/;"	v
g:colors_name	colors/motus.vim	/^let g:colors_name = "motus"$/;"	v
g:colors_name	colors/murphy.vim	/^let g:colors_name = "murphy"$/;"	v
g:colors_name	colors/navajo-night.vim	/^let g:colors_name = "navajo-night"$/;"	v
g:colors_name	colors/navajo.vim	/^let g:colors_name = "navajo"$/;"	v
g:colors_name	colors/neverness.vim	/^let g:colors_name = 'neverness'$/;"	v
g:colors_name	colors/nightshimmer.vim	/^let g:colors_name = "nightshimmer"$/;"	v
g:colors_name	colors/northland.vim	/^let g:colors_name="northland"$/;"	v
g:colors_name	colors/nuvola.vim	/^let g:colors_name = "nuvola"$/;"	v
g:colors_name	colors/oceanblack.vim	/^let g:colors_name = "oceanblack"$/;"	v
g:colors_name	colors/oceandeep.vim	/^let g:colors_name = "oceandeep"$/;"	v
g:colors_name	colors/oceanlight.vim	/^let g:colors_name = "oceanlight"$/;"	v
g:colors_name	colors/olive.vim	/^let g:colors_name="olive"$/;"	v
g:colors_name	colors/pablo.vim	/^let g:colors_name = "pablo"$/;"	v
g:colors_name	colors/papayawhip.vim	/^let g:colors_name = "PapayaWhip"$/;"	v
g:colors_name	colors/peaksea.vim	/^let g:colors_name = expand("<sfile>:t:r")$/;"	v
g:colors_name	colors/print_bw.vim	/^let g:colors_name = "print_bw"$/;"	v
g:colors_name	colors/railscasts.vim	/^let g:colors_name = "railscasts"$/;"	v
g:colors_name	colors/railscasts2.vim	/^let g:colors_name = "railscasts"$/;"	v
g:colors_name	colors/relaxedgreen.vim	/^let g:colors_name = "relaxedgreen"$/;"	v
g:colors_name	colors/robinhood.vim	/^let g:colors_name = "robinhood"$/;"	v
g:colors_name	colors/ron.vim	/^let g:colors_name = "ron"$/;"	v
g:colors_name	colors/rootwater.vim	/^let g:colors_name = 'rootwater'$/;"	v
g:colors_name	colors/settlemyer.vim	/^let g:colors_name="settlemyer"$/;"	v
g:colors_name	colors/sienna.vim	/^let g:colors_name = 'sienna'$/;"	v
g:colors_name	colors/silent.vim	/^let g:colors_name = "silent"$/;"	v
g:colors_name	colors/simpleandfriendly.vim	/^let g:colors_name = "simpleandfriendly"$/;"	v
g:colors_name	colors/softblue.vim	/^let g:colors_name="softblue"$/;"	v
g:colors_name	colors/soso.vim	/^let g:colors_name="soso"$/;"	v
g:colors_name	colors/summerfruit256.vim	/^let g:colors_name="summerfruit256"$/;"	v
g:colors_name	colors/synic.vim	/^let g:colors_name = "synic"$/;"	v
g:colors_name	colors/tabula.vim	/^let g:colors_name = "tabula"$/;"	v
g:colors_name	colors/tolerable.vim	/^let g:colors_name="tolerable"$/;"	v
g:colors_name	colors/torte.vim	/^let g:colors_name = "torte"$/;"	v
g:colors_name	colors/two2tango.vim	/^let g:colors_name="two2tango"$/;"	v
g:colors_name	colors/vc.vim	/^let g:colors_name="vc"$/;"	v
g:colors_name	colors/vibrantink.vim	/^let g:colors_name = "vibrantink"$/;"	v
g:colors_name	colors/vylight.vim	/^let g:colors_name="vylight"$/;"	v
g:colors_name	colors/wombat256.vim	/^let g:colors_name = "wombat256"$/;"	v
g:colors_name	colors/wood.vim	/^let g:colors_name="wood"$/;"	v
g:colors_name	colors/wuye.vim	/^let g:colors_name = "wuye"$/;"	v
g:colors_name	colors/xemacs.vim	/^let g:colors_name="xemacs"$/;"	v
g:colors_name	colors/zellner.vim	/^let g:colors_name = "zellner"$/;"	v
g:colors_name	colors/zenburn.vim	/^let g:colors_name="zenburn"$/;"	v
g:colors_name	colors/zmrok.vim	/^let g:colors_name="zmrok"$/;"	v
g:context_include	syntax/context.vim	/^  let g:context_include = ['mp', 'javascript', 'xml']$/;"	v
g:ctags_command	menu.vim	/^    let g:ctags_command = "ctags -R ."$/;"	v
g:ctags_command	menu.vim	/^    let g:ctags_command = "mc vim:ctags *.*"$/;"	v
g:debchangelog_listbugs_severities	ftplugin/debchangelog.vim	/^  let g:debchangelog_listbugs_severities = 'critical,grave,serious,important,normal,minor,wishlist'$/;"	v
g:decada	compiler/decada.vim	/^   let g:decada = decada#New ()$/;"	v
g:did_changelog_ftplugin	ftplugin/debchangelog.vim	/^let g:did_changelog_ftplugin = 1$/;"	v
g:did_cobol_ftplugin_functions	ftplugin/cobol.vim	/^let g:did_cobol_ftplugin_functions = 1$/;"	v
g:did_html_functions	ftplugin/html/HTML.vim	/^let g:did_html_functions = 1$/;"	v
g:did_html_menus	ftplugin/html/HTML.vim	/^let g:did_html_menus = 1$/;"	v
g:did_ocaml_switch	ftplugin/ocaml.vim	/^  let g:did_ocaml_switch = 1$/;"	v
g:did_ruby_ftplugin_functions	ftplugin/ruby.vim	/^let g:did_ruby_ftplugin_functions = 1$/;"	v
g:doxygen_end_punctuation	syntax/doxygen.vim	/^      let g:doxygen_end_punctuation='[.]'$/;"	v
g:environmentshortcuts	ftplugin/latex-suite/wizardfuncs.vim	/^let g:environmentshortcuts = ''$/;"	v
g:eruby_default_subtype	ftplugin/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
g:eruby_default_subtype	syntax/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
g:fontshortcuts	ftplugin/latex-suite/wizardfuncs.vim	/^let g:fontshortcuts = ''$/;"	v
g:ft_ignore_pat	filetype.vim	/^  let g:ft_ignore_pat = '\\.\\(Z\\|gz\\|bz2\\|zip\\|tgz\\)$'$/;"	v
g:ftplugin_sql_objects	ftplugin/sql.vim	/^    let g:ftplugin_sql_objects = 'function,procedure,event,' .$/;"	v
g:ftplugin_sql_statements	ftplugin/sql.vim	/^    let g:ftplugin_sql_statements = 'create'$/;"	v
g:generalshortcuts	ftplugin/latex-suite/wizardfuncs.vim	/^let g:generalshortcuts = ''$/;"	v
g:getscript_cygwin	autoload/getscript.vim	/^   let g:getscript_cygwin= 0$/;"	v
g:getscript_cygwin	autoload/getscript.vim	/^   let g:getscript_cygwin= 1$/;"	v
g:getscript_cygwin	autoload/getscript.vim	/^  let g:getscript_cygwin= 0$/;"	v
g:getscript_shq	autoload/getscript.vim	/^   let g:getscript_shq= "'"$/;"	v
g:getscript_shq	autoload/getscript.vim	/^   let g:getscript_shq= '"'$/;"	v
g:getscript_shq	autoload/getscript.vim	/^  let g:getscript_shq= "'"$/;"	v
g:getscript_shq	autoload/getscript.vim	/^  let g:getscript_shq= &shq$/;"	v
g:getscript_shq	autoload/getscript.vim	/^  let g:getscript_shq= &sxq$/;"	v
g:getscript_shq	autoload/getscript.vim	/^ let g:getscript_shq= g:netrw_shq$/;"	v
g:gnat	compiler/gnat.vim	/^   let g:gnat = gnat#New ()$/;"	v
g:haml_self_closing_tags	indent/haml.vim	/^  let g:haml_self_closing_tags = 'meta|link|img|hr|br'$/;"	v
g:html_map_entity_leader	ftplugin/html/HTML.vim	/^  let g:html_map_entity_leader = '&'$/;"	v
g:inkpot_black_background	colors/inkpot.vim	/^    let g:inkpot_black_background = 0$/;"	v
g:is_kornshell	syntax/sh.vim	/^   let g:is_kornshell= g:is_posix$/;"	v
g:listSep	plugin/libList.vim	/^let g:listSep = ","$/;"	v
g:loaded_astronaut	colors/astronaut.vim	/^let g:loaded_astronaut = "v7"$/;"	v
g:loaded_errormarker	plugin/errormarker.vim	/^let g:loaded_errormarker = "0.1.12"$/;"	v
g:loaded_getscript	autoload/getscript.vim	/^let g:loaded_getscript= "v31"$/;"	v
g:loaded_getscriptPlugin	plugin/getscriptPlugin.vim	/^let g:loaded_getscriptPlugin = "v31"$/;"	v
g:loaded_matchparen	plugin/matchparen.vim	/^let g:loaded_matchparen = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_netrw	autoload/netrw.vim	/^let g:loaded_netrw = "v132"$/;"	v
g:loaded_netrwFileHandlers	autoload/netrwFileHandlers.vim	/^let g:loaded_netrwFileHandlers= "v9"$/;"	v
g:loaded_netrwPlugin	plugin/netrwPlugin.vim	/^let g:loaded_netrwPlugin = "v132"$/;"	v
g:loaded_netrwSettings	autoload/netrwSettings.vim	/^let g:loaded_netrwSettings  = "v12"$/;"	v
g:loaded_sql_completion	autoload/sqlcomplete.vim	/^let g:loaded_sql_completion = 50$/;"	v
g:loaded_syntax_completion	autoload/syntaxcomplete.vim	/^let g:loaded_syntax_completion = 40$/;"	v
g:loaded_tar	autoload/tar.vim	/^let g:loaded_tar= "v23b"$/;"	v
g:loaded_tarPlugin	plugin/tarPlugin.vim	/^let g:loaded_tarPlugin = "v23"$/;"	v
g:loaded_vimball	autoload/vimball.vim	/^let g:loaded_vimball = "v29"$/;"	v
g:loaded_vimballPlugin	plugin/vimballPlugin.vim	/^let g:loaded_vimballPlugin = "v29"$/;"	v
g:loaded_zip	autoload/zip.vim	/^let g:loaded_zip     = "v22"$/;"	v
g:loaded_zipPlugin	plugin/zipPlugin.vim	/^let g:loaded_zipPlugin = "v22"$/;"	v
g:mathshortcuts	ftplugin/latex-suite/wizardfuncs.vim	/^let g:mathshortcuts = ''$/;"	v
g:menutrans_fileformat_choices	lang/menu_eo.utf-8.vim	/^let g:menutrans_fileformat_choices = " &Unikso \\n &Dos \\n &Mak \\n &Rezigni "$/;"	v
g:menutrans_fileformat_choices	lang/menu_fi_fi.latin1.vim	/^let g:menutrans_fileformat_choices = " &Unix \\n &Dos \\n &Mac \\n &Peru "$/;"	v
g:menutrans_fileformat_choices	lang/menu_fr_fr.latin1.vim	/^let g:menutrans_fileformat_choices = " &Unix \\n &Dos \\n &Mac \\n &Annuler "$/;"	v
g:menutrans_fileformat_choices	lang/menu_ja_jp.euc-jp.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n¥­¥ã¥ó¥»¥ë(&C)"$/;"	v
g:menutrans_fileformat_choices	lang/menu_ja_jp.utf-8.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\nã­ã£ã³ã»ã«(&C)"$/;"	v
g:menutrans_fileformat_choices	lang/menu_japanese_japan.932.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\nLZ(&C)"$/;"	v
g:menutrans_fileformat_choices	lang/menu_pl_pl.iso_8859-2.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Anuluj"$/;"	v
g:menutrans_fileformat_choices	lang/menu_pl_pl.utf-8.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Anuluj"$/;"	v
g:menutrans_fileformat_choices	lang/menu_polish_poland.1250.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Anuluj"$/;"	v
g:menutrans_fileformat_choices	lang/menu_ru_ru.koi8-r.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\nï&ÔÍÅÎÁ"$/;"	v
g:menutrans_fileformat_choices	lang/menu_ru_ru.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\nÐ&ÑÐ¼ÐµÐ½Ð°"$/;"	v
g:menutrans_fileformat_choices	lang/menu_sl_si.cp1250.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Preklièi"$/;"	v
g:menutrans_fileformat_choices	lang/menu_sl_si.latin2.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Preklièi"$/;"	v
g:menutrans_fileformat_choices	lang/menu_sl_si.utf-8.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&PrekliÄi"$/;"	v
g:menutrans_fileformat_choices	lang/menu_vi_vn.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Há»§y bá»"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_ca_es.latin1.vim	/^let g:menutrans_fileformat_dialog = "Seleccioneu el format per escriure el fitxer."$/;"	v
g:menutrans_fileformat_dialog	lang/menu_de_de.latin1.vim	/^let g:menutrans_fileformat_dialog = "Wählen Sie ein Datei-Format aus"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_eo.utf-8.vim	/^let g:menutrans_fileformat_dialog = "Elektu la formaton de la skribonta dosiero."$/;"	v
g:menutrans_fileformat_dialog	lang/menu_es_es.latin1.vim	/^let g:menutrans_fileformat_dialog = "Seleccione el formato para escribir el fichero"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_fi_fi.latin1.vim	/^let g:menutrans_fileformat_dialog = "Anaa tiedoston kirjoitusmuoto."$/;"	v
g:menutrans_fileformat_dialog	lang/menu_fr_fr.latin1.vim	/^let g:menutrans_fileformat_dialog = "Choisissez le format dans lequel écrire le fichier."$/;"	v
g:menutrans_fileformat_dialog	lang/menu_hu_hu.iso_8859-2.vim	/^let g:menutrans_fileformat_dialog = "Válaszd ki a fájl formátumát"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_hu_hu.utf-8.vim	/^let g:menutrans_fileformat_dialog = "VÃ¡laszd ki a fÃ¡jl formÃ¡tumÃ¡t"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_it_it.latin1.vim	/^let g:menutrans_fileformat_dialog = "Scegli formato con cui scrivere il file"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_ja_jp.euc-jp.vim	/^let g:menutrans_fileformat_dialog = "¥Õ¥¡¥¤¥ë½ÐÎÏ¤ÎºÝ¤Î²þ¹Ôµ­¹æ¤Î·Á¼°¤òÁª¤ó¤Ç¤¯¤À¤µ¤¤."$/;"	v
g:menutrans_fileformat_dialog	lang/menu_ja_jp.utf-8.vim	/^let g:menutrans_fileformat_dialog = "ãã¡ã¤ã«åºåã®éã®æ¹è¡è¨å·ã®å½¢å¼ãé¸ãã§ãã ãã."$/;"	v
g:menutrans_fileformat_dialog	lang/menu_japanese_japan.932.vim	/^let g:menutrans_fileformat_dialog = "t@CoÍÌÛÌüsLÌ`®ðIñÅ­¾³¢."$/;"	v
g:menutrans_fileformat_dialog	lang/menu_nb_no.latin1.vim	/^	let g:menutrans_fileformat_dialog = "Velg filformat som filen skal lagres med"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_nl_nl.latin1.vim	/^let g:menutrans_fileformat_dialog = "Selecteer formaat voor het schrijven van het bestand"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_pl_pl.iso_8859-2.vim	/^let g:menutrans_fileformat_dialog = "Wybierz format w którym ten plik ma byæ zapisany"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_pl_pl.utf-8.vim	/^let g:menutrans_fileformat_dialog = "Wybierz format w ktÃ³rym ten plik ma byÄ zapisany"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_polish_poland.1250.vim	/^let g:menutrans_fileformat_dialog = "Wybierz format w którym ten plik ma byæ zapisany"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_pt_br.vim	/^let g:menutrans_fileformat_dialog = "Selecione o formato para gravar o arquivo"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_pt_pt.vim	/^let g:menutrans_fileformat_dialog = "Selecione o formato para gravar o arquivo"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_ru_ru.koi8-r.vim	/^let g:menutrans_fileformat_dialog = "÷ÙÂÅÒÉÔÅ ÆÏÒÍÁÔ ÆÁÊÌÁ."$/;"	v
g:menutrans_fileformat_dialog	lang/menu_ru_ru.vim	/^let g:menutrans_fileformat_dialog = "ÐÑÐ±ÐµÑÐ¸ÑÐµ ÑÐ¾ÑÐ¼Ð°Ñ ÑÐ°Ð¹Ð»Ð°."$/;"	v
g:menutrans_fileformat_dialog	lang/menu_sl_si.cp1250.vim	/^let g:menutrans_fileformat_dialog = "Izberite format datoteke"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_sl_si.latin2.vim	/^let g:menutrans_fileformat_dialog = "Izberite format datoteke"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_sl_si.utf-8.vim	/^let g:menutrans_fileformat_dialog = "Izberite format datoteke"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_sr_yu.ascii.vim	/^let g:menutrans_fileformat_dialog = "Izaberite vrstu datoteke"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_sr_yu.iso_8859-2.vim	/^let g:menutrans_fileformat_dialog = "Izaberite vrstu datoteke"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_sr_yu.iso_8859-5.vim	/^let g:menutrans_fileformat_dialog = "¸×ÐÑÕàØâÕ Òàáâã ÔÐâÞâÕÚÕ"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_sr_yu.utf-8.vim	/^let g:menutrans_fileformat_dialog = "ÐÐ·Ð°Ð±ÐµÑÐ¸ÑÐµ Ð²ÑÑÑÑ Ð´Ð°ÑÐ¾ÑÐµÐºÐµ"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_sv_se.latin1.vim	/^let g:menutrans_fileformat_dialog = "Välj filformat som filen ska sparas med"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_uk_ua.cp1251.vim	/^let g:menutrans_fileformat_dialog = "Âèáåð³òü ôîðìàò ôàéëó"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_uk_ua.koi8-u.vim	/^let g:menutrans_fileformat_dialog = "÷ÉÂÅÒ¦ÔØ ÆÏÒÍÁÔ ÆÁÊÌÕ"$/;"	v
g:menutrans_fileformat_dialog	lang/menu_vi_vn.vim	/^let g:menutrans_fileformat_dialog = "HÃ£y chá»n Äá»nh dáº¡ng táº­p tin."$/;"	v
g:menutrans_help_dialog	lang/menu_ca_es.latin1.vim	/^let g:menutrans_help_dialog = "Introduïu el terme sobre el qual necessiteu ajuda.\\n\\nUseu el prefix i_ per ordres d'entrada (p.ex.: i_CTRL-X)\\nUseu el prefix c_ per ordres de la línia d'ordres (p.ex.: c_<Del>)\\nUseu el prefix ' per noms d'opcions (p.ex.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	lang/menu_de_de.latin1.vim	/^let g:menutrans_help_dialog = "Geben Sie einen Befehl oder ein Wort ein, für das Sie Hilfe benötigen:\\n\\nVerwenden Sie i_ für Eingabe ('input') Befehle (z.B.: i_CTRL-X)\\nVerwenden Sie c_ für Befehls-Zeilen ('command-line') Befehle (z.B.: c_<Del>)\\nVerwenden Sie ' für Options-Namen (z.B.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	lang/menu_eo.utf-8.vim	/^let g:menutrans_help_dialog = "Tajpu komandon aÅ­ serÄendan vorton en la helparo.\\n\\nAldonu i_ por la komandoj de la enmeta reÄimo (ekz: i_CTRL-X)\\nAldonu c_ por redakto de la komanda linio (ekz: c_<Del>)\\nÄirkaÅ­i la opciojn per apostrofoj (ekz: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	lang/menu_es_es.latin1.vim	/^let g:menutrans_help_dialog = "Introduzca un nombre de comando o palabra para obtener ayuda;\\n\\nAnteponga i_ para comandos de entrada (e.g.: i_CTRL-X)\\nAnteponga c_ para comandos de la línea de comandos (e.g.: c_<Del>)\\nAnteponga ` para un nombre de opción (e.g.: `shiftwidth`)"$/;"	v
g:menutrans_help_dialog	lang/menu_fi_fi.latin1.vim	/^let g:menutrans_help_dialog = "Anna komento tai sana, jota haetaan ohjeesta.\\n\\nAloita i_:llä syöttötilan komentoja varten (esim. i_CTRL-X)\\nAloita c_:llä komentoriviä varten (esim. c_<Del>)\\nKirjoita asetukset puolilainausmerkkeijin (esim. 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	lang/menu_fr_fr.latin1.vim	/^let g:menutrans_help_dialog = "Entrez une commande ou un mot à rechercher dans l'aide.\\n\\nAjoutez i_ pour les commandes du mode Insertion (ex: i_CTRL-X)\\nAjoutez c_ pour l'édition de la ligne de commande (ex: c_<Del>)\\nEntourez les options avec des apostrophes (ex: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	lang/menu_it_it.latin1.vim	/^let g:menutrans_help_dialog = "Batti un comando o una parola per cercare aiuto:\\n\\nPremetti i_ per comandi in modalità Input (ad.es.: i_CTRL-X)\\nPremetti c_ per comandi che editano la linea-comandi (ad.es.: c_<Del>)\\nPremetti ' per un nome di opzione (ad.es.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	lang/menu_ja_jp.euc-jp.vim	/^let g:menutrans_help_dialog = "¥Ø¥ë¥×¤ò¸¡º÷¤·¤¿¤¤¥³¥Þ¥ó¥É¤â¤·¤¯¤ÏÃ±¸ì¤òÆþÎÏ¤·¤Æ¤¯¤À¤µ¤¤:\\n\\nÁÞÆþ¥â¡¼¥É¤Î¥³¥Þ¥ó¥É¤Ë¤Ï i_ ¤òÀèÆ¬¤ËÉÕ²Ã¤·¤Þ¤¹. (Îã: i_CTRL-X)\\n¥³¥Þ¥ó¥É¥é¥¤¥óÊÔ½¸¥³¥Þ¥ó¥É¤Ë¤Ï c_ ¤òÀèÆ¬¤ËÉÕ²Ã¤·¤Þ¤¹. (Îã: c_<Del>)\\n¥ª¥×¥·¥ç¥ó¤ÎÌ¾Á°¤Ë¤Ï ' ¤òÉÕ²Ã¤·¤Þ¤¹. (Îã: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	lang/menu_ja_jp.utf-8.vim	/^let g:menutrans_help_dialog = "ãã«ããæ¤ç´¢ãããã³ãã³ããããã¯åèªãå¥åãã¦ãã ãã:\\n\\næ¿å¥ã¢ã¼ãã®ã³ãã³ãã«ã¯ i_ ãåé ­ã«ä»å ãã¾ã. (ä¾: i_CTRL-X)\\nã³ãã³ãã©ã¤ã³ç·¨éã³ãã³ãã«ã¯ c_ ãåé ­ã«ä»å ãã¾ã. (ä¾: c_<Del>)\\nãªãã·ã§ã³ã®ååã«ã¯ ' ãä»å ãã¾ã. (ä¾: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	lang/menu_japanese_japan.932.vim	/^let g:menutrans_help_dialog = "wvðõµ½¢R}hàµ­ÍPêðüÍµÄ­¾³¢:\\n\\n}ü[hÌR}hÉÍ i_ ðæªÉtÁµÜ·. (á: i_CTRL-X)\\nR}hCÒWR}hÉÍ c_ ðæªÉtÁµÜ·. (á: c_<Del>)\\nIvVÌ¼OÉÍ ' ðtÁµÜ·. (á: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	lang/menu_nb_no.latin1.vim	/^	let g:menutrans_help_dialog = "Skriv en kommando eller ord du vil ha hjelp om:\\n\\nLegg til i_ i begynnelsen for inndatametoder (f.eks.: i_CTRL-X)\\nLegg til c_ i begynnelsen for kommandoer som redigerer kommandolinjen (f.eks.: c_<Del>)\\nLegg til ' i begynnelsen for et valgnavn (f.eks.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	lang/menu_pt_br.vim	/^let g:menutrans_help_dialog = "Digite um comando ou palavra para obter ajuda;\\n\\nAnteponha i_ para comandos de entrada (ex.: i_CTRL-X)\\nAnteponha c_ para comandos da linha de comandos (ex.: c_<Del>)\\nAnteponha ` para um nome de opção (ex.: `shiftwidth`)"$/;"	v
g:menutrans_help_dialog	lang/menu_pt_pt.vim	/^let g:menutrans_help_dialog = "Digite um comando ou palavra para obter ajuda;\\n\\nAnteponha i_ para comandos de entrada (ex.: i_CTRL-X)\\nAnteponha c_ para comandos da linha de comandos (ex.: c_<Del>)\\nAnteponha ` para um nome de opção (ex.: `shiftwidth`)"$/;"	v
g:menutrans_help_dialog	lang/menu_ru_ru.koi8-r.vim	/^let g:menutrans_help_dialog = "÷×ÅÄÉÔÅ ËÏÍÁÎÄÕ ÉÌÉ ÓÌÏ×Ï ÄÌÑ ÐÏÉÓËÁ:\\n\\näÏÂÁ×ØÔÅ i_ ÄÌÑ ÐÏÉÓËÁ ËÏÍÁÎÄ ÒÅÖÉÍÁ ÷ÓÔÁ×ËÉ (ÎÁÐÒÉÍÅÒ, i_CTRL-X)\\näÏÂÁ×ØÔÅ c_ ÄÌÑ ÐÏÉÓËÁ ËÏÍÁÎÄ ïÂÙÞÎÏÇÏ ÒÅÖÉÍÁ (ÎÁÐÒÉÍÅÒ, Ó_<Del>)\\näÏÂÁ×ØÔÅ ' ÄÌÑ ÐÏÉÓËÁ ÓÐÒÁ×ËÉ ÐÏ ÏÐÃÉÉ (ÎÁÐÒÉÍÅÒ, 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	lang/menu_ru_ru.vim	/^let g:menutrans_help_dialog = "ÐÐ²ÐµÐ´Ð¸ÑÐµ ÐºÐ¾Ð¼Ð°Ð½Ð´Ñ Ð¸Ð»Ð¸ ÑÐ»Ð¾Ð²Ð¾ Ð´Ð»Ñ Ð¿Ð¾Ð¸ÑÐºÐ°:\\n\\nÐÐ¾Ð±Ð°Ð²ÑÑÐµ i_ Ð´Ð»Ñ Ð¿Ð¾Ð¸ÑÐºÐ° ÐºÐ¾Ð¼Ð°Ð½Ð´ ÑÐµÐ¶Ð¸Ð¼Ð° ÐÑÑÐ°Ð²ÐºÐ¸ (Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ, i_CTRL-X)\\nÐÐ¾Ð±Ð°Ð²ÑÑÐµ c_ Ð´Ð»Ñ Ð¿Ð¾Ð¸ÑÐºÐ° ÐºÐ¾Ð¼Ð°Ð½Ð´ ÐÐ±ÑÑÐ½Ð¾Ð³Ð¾ ÑÐµÐ¶Ð¸Ð¼Ð° (Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ, Ñ_<Del>)\\nÐÐ¾Ð±Ð°Ð²ÑÑÐµ ' Ð´Ð»Ñ Ð¿Ð¾Ð¸ÑÐºÐ° ÑÐ¿ÑÐ°Ð²ÐºÐ¸ Ð¿Ð¾ Ð¾Ð¿ÑÐ¸Ð¸ (Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ, 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	lang/menu_sl_si.cp1250.vim	/^let g:menutrans_help_dialog = "Vnesite ukaz ali besedo, za katero elite pomoè:\\n\\nUporabite predpono i_ za ukaze v naèinu za pisanje (npr.: i_CTRL-X)\\nUporabite predpono c_ za ukaze v ukazni vrstici (command-line) (npr.: c_<Del>)\\nUporabite predpono ' za imena opcij (npr.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	lang/menu_sl_si.latin2.vim	/^let g:menutrans_help_dialog = "Vnesite ukaz ali besedo, za katero ¾elite pomoè:\\n\\nUporabite predpono i_ za ukaze v naèinu za pisanje (npr.: i_CTRL-X)\\nUporabite predpono c_ za ukaze v ukazni vrstici (command-line) (npr.: c_<Del>)\\nUporabite predpono ' za imena opcij (npr.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	lang/menu_sl_si.utf-8.vim	/^let g:menutrans_help_dialog = "Vnesite ukaz ali besedo, za katero Å¾elite pomoÄ:\\n\\nUporabite predpono i_ za ukaze v naÄinu za pisanje (npr.: i_CTRL-X)\\nUporabite predpono c_ za ukaze v ukazni vrstici (command-line) (npr.: c_<Del>)\\nUporabite predpono ' za imena opcij (npr.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	lang/menu_vi_vn.vim	/^let g:menutrans_help_dialog = "HÃ£y nháº­p cÃ¢u lá»nh hoáº·c tá»« khÃ³a tÃ¬m kiáº¿m:\\n\\nThÃªm i_ Äá» tÃ¬m kiáº¿m cÃ¢u lá»nh cá»§a cháº¿ Äá» Nháº­p Input (VÃ­ dá»¥, i_CTRL-X)\\nThÃªm c_ Äá» tÃ¬m kiáº¿m cÃ¢u lá»nh cá»§a cháº¿ Äá» soáº¡n tháº£o dÃ²ng lá»nh (VÃ­ dá»¥, Ñ_<Del>)\\nThÃªm ' Äá» tÃ¬m kiáº¿m trá»£ giÃºp cho má»t tÃ¹y chá»n (vÃ­ dá»¥, 'shiftwidth')"$/;"	v
g:menutrans_no_file	lang/menu_ca_es.latin1.vim	/^let g:menutrans_no_file = "[Cap fitxer]"$/;"	v
g:menutrans_no_file	lang/menu_de_de.latin1.vim	/^let g:menutrans_no_file = "[Keine Datei]"$/;"	v
g:menutrans_no_file	lang/menu_eo.utf-8.vim	/^let g:menutrans_no_file = "[Neniu dosiero]"$/;"	v
g:menutrans_no_file	lang/menu_es_es.latin1.vim	/^let g:menutrans_no_file = "[Sin fichero]"$/;"	v
g:menutrans_no_file	lang/menu_fi_fi.latin1.vim	/^let g:menutrans_no_file = "[Ei tiedostoja]"$/;"	v
g:menutrans_no_file	lang/menu_fr_fr.latin1.vim	/^let g:menutrans_no_file = "[Aucun fichier]"$/;"	v
g:menutrans_no_file	lang/menu_it_it.latin1.vim	/^let g:menutrans_no_file = "[Senza nome]"$/;"	v
g:menutrans_no_file	lang/menu_ja_jp.euc-jp.vim	/^let g:menutrans_no_file = "[ÌµÂê]"$/;"	v
g:menutrans_no_file	lang/menu_ja_jp.utf-8.vim	/^let g:menutrans_no_file = "[ç¡é¡]"$/;"	v
g:menutrans_no_file	lang/menu_japanese_japan.932.vim	/^let g:menutrans_no_file = "[³è]"$/;"	v
g:menutrans_no_file	lang/menu_nb_no.latin1.vim	/^	let g:menutrans_no_file = "[Uten navn]"$/;"	v
g:menutrans_no_file	lang/menu_pt_br.vim	/^let g:menutrans_no_file = "[Sem arquivos]"$/;"	v
g:menutrans_no_file	lang/menu_pt_pt.vim	/^let g:menutrans_no_file = "[Sem arquivos]"$/;"	v
g:menutrans_no_file	lang/menu_sl_si.cp1250.vim	/^let g:menutrans_no_file = "[Brez datoteke]"$/;"	v
g:menutrans_no_file	lang/menu_sl_si.latin2.vim	/^let g:menutrans_no_file = "[Brez datoteke]"$/;"	v
g:menutrans_no_file	lang/menu_sl_si.utf-8.vim	/^let g:menutrans_no_file = "[Brez datoteke]"$/;"	v
g:menutrans_path_dialog	lang/menu_ca_es.latin1.vim	/^let g:menutrans_path_dialog = "Introduïu les ubicacions on cercar fitxers.\\nSepareu els noms dels directoris amb una coma."$/;"	v
g:menutrans_path_dialog	lang/menu_de_de.latin1.vim	/^let g:menutrans_path_dialog = "Geben Sie Such-Pfade für Dateien ein.\\nTrennen Sie die Verzeichnis-Namen durch Kommata."$/;"	v
g:menutrans_path_dialog	lang/menu_eo.utf-8.vim	/^let g:menutrans_path_dialog = "Tajpu la vojon de serÄo de dosieroj.\\nDisigu la dosierujojn per komoj."$/;"	v
g:menutrans_path_dialog	lang/menu_es_es.latin1.vim	/^let g:menutrans_path_dialog = "Introduzca la ruta de búsqueda para los ficheros.\\nSepare los nombres de los directorios con una coma."$/;"	v
g:menutrans_path_dialog	lang/menu_fi_fi.latin1.vim	/^let g:menutrans_path_dialog = "Anna tiedostojen hakupolku.\\nErota hakemistot pilkuin."$/;"	v
g:menutrans_path_dialog	lang/menu_fr_fr.latin1.vim	/^let g:menutrans_path_dialog = "Entrez le chemin de recherche des fichiers.\\nSéparez les répertoires par des virgules."$/;"	v
g:menutrans_path_dialog	lang/menu_hu_hu.iso_8859-2.vim	/^let g:menutrans_path_dialog = "Írd be a keresett fájl lehetséges elérési útjait, vesszõvel elválasztva"$/;"	v
g:menutrans_path_dialog	lang/menu_hu_hu.utf-8.vim	/^let g:menutrans_path_dialog = "Ãrd be a keresett fÃ¡jl lehetsÃ©ges elÃ©rÃ©si Ãºtjait, vesszÅvel elvÃ¡lasztva"$/;"	v
g:menutrans_path_dialog	lang/menu_it_it.latin1.vim	/^let g:menutrans_path_dialog = "Batti percorso di ricerca per i file.\\nSepara fra loro i nomi di directory con una virgola."$/;"	v
g:menutrans_path_dialog	lang/menu_ja_jp.euc-jp.vim	/^let g:menutrans_path_dialog = "¥Õ¥¡¥¤¥ë¤Î¸¡º÷¥Ñ¥¹¤òÆþÎÏ¤·¤Æ¤¯¤À¤µ¤¤:\\n¥Ç¥£¥ì¥¯¥È¥êÌ¾¤Ï¥«¥ó¥Þ ( , ) ¤Ç¶èÀÚ¤Ã¤Æ¤¯¤À¤µ¤¤."$/;"	v
g:menutrans_path_dialog	lang/menu_ja_jp.utf-8.vim	/^let g:menutrans_path_dialog = "ãã¡ã¤ã«ã®æ¤ç´¢ãã¹ãå¥åãã¦ãã ãã:\\nãã£ã¬ã¯ããªåã¯ã«ã³ã ( , ) ã§åºåã£ã¦ãã ãã."$/;"	v
g:menutrans_path_dialog	lang/menu_japanese_japan.932.vim	/^let g:menutrans_path_dialog = "t@CÌõpXðüÍµÄ­¾³¢:\\nfBNg¼ÍJ} ( , ) ÅæØÁÄ­¾³¢."$/;"	v
g:menutrans_path_dialog	lang/menu_nb_no.latin1.vim	/^	let g:menutrans_path_dialog = "Skriv søkesti for filer.\\nSkill katalognavn med komma."$/;"	v
g:menutrans_path_dialog	lang/menu_nl_nl.latin1.vim	/^let g:menutrans_path_dialog = "Typ het zoekpad voor bestanden.\\nGebruik commas tussen de padnamen."$/;"	v
g:menutrans_path_dialog	lang/menu_pl_pl.iso_8859-2.vim	/^let g:menutrans_path_dialog = "Wprowad¼ ¶cie¿kê poszukiwania plików.\\nProszê rozdzielaæ nazwy katalogów przecinkiem."$/;"	v
g:menutrans_path_dialog	lang/menu_pl_pl.utf-8.vim	/^let g:menutrans_path_dialog = "WprowadÅº ÅcieÅ¼kÄ poszukiwania plikÃ³w.\\nProszÄ rozdzielaÄ nazwy katalogÃ³w przecinkiem."$/;"	v
g:menutrans_path_dialog	lang/menu_polish_poland.1250.vim	/^let g:menutrans_path_dialog = "Wprowad cie¿kê poszukiwania plików.\\nProszê rozdzielaæ nazwy katalogów przecinkiem."$/;"	v
g:menutrans_path_dialog	lang/menu_pt_br.vim	/^let g:menutrans_path_dialog = "Indique um caminho de procura para os arquivos.\\nSepare os nomes dos diretórios com uma vírgula."$/;"	v
g:menutrans_path_dialog	lang/menu_pt_pt.vim	/^let g:menutrans_path_dialog = "Indique um caminho de procura para os arquivos.\\nSepare os nomes dos diretórios com uma vírgula."$/;"	v
g:menutrans_path_dialog	lang/menu_ru_ru.koi8-r.vim	/^let g:menutrans_path_dialog = "õËÁÖÉÔÅ ÐÕÔØ ÄÌÑ ÐÏÉÓËÁ ÆÁÊÌÏ×.\\néÍÅÎÁ ËÁÔÁÌÏÇÏ× ÒÁÚÄÅÌÑÀÔÓÑ ÚÁÐÑÔÙÍÉ."$/;"	v
g:menutrans_path_dialog	lang/menu_ru_ru.vim	/^let g:menutrans_path_dialog = "Ð£ÐºÐ°Ð¶Ð¸ÑÐµ Ð¿ÑÑÑ Ð´Ð»Ñ Ð¿Ð¾Ð¸ÑÐºÐ° ÑÐ°Ð¹Ð»Ð¾Ð².\\nÐÐ¼ÐµÐ½Ð° ÐºÐ°ÑÐ°Ð»Ð¾Ð³Ð¾Ð² ÑÐ°Ð·Ð´ÐµÐ»ÑÑÑÑÑ Ð·Ð°Ð¿ÑÑÑÐ¼Ð¸."$/;"	v
g:menutrans_path_dialog	lang/menu_sl_si.cp1250.vim	/^let g:menutrans_path_dialog = "Vnesite poti za iskanje datotek.\\nImena direktorijev loèite z vejico."$/;"	v
g:menutrans_path_dialog	lang/menu_sl_si.latin2.vim	/^let g:menutrans_path_dialog = "Vnesite poti za iskanje datotek.\\nImena direktorijev loèite z vejico."$/;"	v
g:menutrans_path_dialog	lang/menu_sl_si.utf-8.vim	/^let g:menutrans_path_dialog = "Vnesite poti za iskanje datotek.\\nImena direktorijev loÄite z vejico."$/;"	v
g:menutrans_path_dialog	lang/menu_sr_yu.ascii.vim	/^let g:menutrans_path_dialog = "Unesite put pretrage za datoteke\\nRazdvojite zarezima imena direktorijuma."$/;"	v
g:menutrans_path_dialog	lang/menu_sr_yu.iso_8859-2.vim	/^let g:menutrans_path_dialog = "Unesite put pretrage za datoteke\\nRazdvojite zarezima imena direktorijuma."$/;"	v
g:menutrans_path_dialog	lang/menu_sr_yu.iso_8859-5.vim	/^let g:menutrans_path_dialog = "ÃÝÕáØâÕ ßãâ ßàÕâàÐÓÕ ×Ð ÔÐâÞâÕÚÕ\\nÀÐ×ÔÒÞøØâÕ ×ÐàÕ×ØÜÐ ØÜÕÝÐ ÔØàÕÚâÞàØøãÜÐ."$/;"	v
g:menutrans_path_dialog	lang/menu_sr_yu.utf-8.vim	/^let g:menutrans_path_dialog = "Ð£Ð½ÐµÑÐ¸ÑÐµ Ð¿ÑÑ Ð¿ÑÐµÑÑÐ°Ð³Ðµ Ð·Ð° Ð´Ð°ÑÐ¾ÑÐµÐºÐµ\\nÐ Ð°Ð·Ð´Ð²Ð¾ÑÐ¸ÑÐµ Ð·Ð°ÑÐµÐ·Ð¸Ð¼Ð° Ð¸Ð¼ÐµÐ½Ð° Ð´Ð¸ÑÐµÐºÑÐ¾ÑÐ¸ÑÑÐ¼Ð°."$/;"	v
g:menutrans_path_dialog	lang/menu_sv_se.latin1.vim	/^let g:menutrans_path_dialog = "Skriv in sökväg för filer.\\nSeparera katalognamn med komma"$/;"	v
g:menutrans_path_dialog	lang/menu_uk_ua.cp1251.vim	/^let g:menutrans_path_dialog = "Âêàæ³òü øëÿõ ïîøóêó ôàéë³â\\nÐîçä³ëÿéòå íàçâè äèðåêòîð³é êîìàìè."$/;"	v
g:menutrans_path_dialog	lang/menu_uk_ua.koi8-u.vim	/^let g:menutrans_path_dialog = "÷ËÁÖ¦ÔØ ÛÌÑÈ ÐÏÛÕËÕ ÆÁÊÌ¦×\\nòÏÚÄ¦ÌÑÊÔÅ ÎÁÚ×É ÄÉÒÅËÔÏÒ¦Ê ËÏÍÁÍÉ."$/;"	v
g:menutrans_path_dialog	lang/menu_vi_vn.vim	/^let g:menutrans_path_dialog = "HÃ£y chá» ra ÄÆ°á»ng dáº«n Äá» tÃ¬m kiáº¿m táº­p tin.\\nTÃªn cá»§a thÆ° má»¥c phÃ¢n cÃ¡ch nhau bá»i dáº¥u pháº©y."$/;"	v
g:menutrans_tags_dialog	lang/menu_ca_es.latin1.vim	/^let g:menutrans_tags_dialog = "Introduïu els noms dels fitxers d'etiquetes.\\nSepareu els noms amb una coma."$/;"	v
g:menutrans_tags_dialog	lang/menu_de_de.latin1.vim	/^let g:menutrans_tags_dialog = "Geben Sie die Namen der 'tag'-Dateien ein.\\nTrennen Sie die Namen durch Kommata."$/;"	v
g:menutrans_tags_dialog	lang/menu_eo.utf-8.vim	/^let g:menutrans_tags_dialog = "Tajpu la nomojn de dosieroj de etikedoj.\\nDisigu la nomojn per komoj."$/;"	v
g:menutrans_tags_dialog	lang/menu_es_es.latin1.vim	/^let g:menutrans_tags_dialog = "Introduzca los nombres de los fichero de tags.\\nSepare los nombres con una coma."$/;"	v
g:menutrans_tags_dialog	lang/menu_fi_fi.latin1.vim	/^let g:menutrans_tags_dialog = "Anna tägitiedostojen nimet.\\nErota tidostot pilkuin."$/;"	v
g:menutrans_tags_dialog	lang/menu_fr_fr.latin1.vim	/^let g:menutrans_tags_dialog = "Entrez les noms des fichiers d'étiquettes.\\nSéparez les noms par des virgules."$/;"	v
g:menutrans_tags_dialog	lang/menu_hu_hu.iso_8859-2.vim	/^let g:menutrans_tags_dialog = "Írd be a tag fájl lehetséges elérési útjait, vesszõvel elválasztva"$/;"	v
g:menutrans_tags_dialog	lang/menu_hu_hu.utf-8.vim	/^let g:menutrans_tags_dialog = "Ãrd be a tag fÃ¡jl lehetsÃ©ges elÃ©rÃ©si Ãºtjait, vesszÅvel elvÃ¡lasztva"$/;"	v
g:menutrans_tags_dialog	lang/menu_it_it.latin1.vim	/^let g:menutrans_tags_dialog = "Batti nome dei file di tag.\\nSepara fra loro i nomi di directory con una virgola."$/;"	v
g:menutrans_tags_dialog	lang/menu_ja_jp.euc-jp.vim	/^let g:menutrans_tags_dialog = "¥¿¥°¥Õ¥¡¥¤¥ë¤ÎÌ¾Á°¤òÆþÎÏ¤·¤Æ¤¯¤À¤µ¤¤:\\nÌ¾Á°¤Ï¥«¥ó¥Þ ( , ) ¤Ç¶èÀÚ¤Ã¤Æ¤¯¤À¤µ¤¤."$/;"	v
g:menutrans_tags_dialog	lang/menu_ja_jp.utf-8.vim	/^let g:menutrans_tags_dialog = "ã¿ã°ãã¡ã¤ã«ã®ååãå¥åãã¦ãã ãã:\\nååã¯ã«ã³ã ( , ) ã§åºåã£ã¦ãã ãã."$/;"	v
g:menutrans_tags_dialog	lang/menu_japanese_japan.932.vim	/^let g:menutrans_tags_dialog = "^Ot@CÌ¼OðüÍµÄ­¾³¢:\\n¼OÍJ} ( , ) ÅæØÁÄ­¾³¢."$/;"	v
g:menutrans_tags_dialog	lang/menu_nb_no.latin1.vim	/^	let g:menutrans_tags_dialog = "Skriv navn på tagfiler.\\nSkill navnene med komma."$/;"	v
g:menutrans_tags_dialog	lang/menu_nl_nl.latin1.vim	/^let g:menutrans_tags_dialog = "Typ namen van tag bestanden.\\nGebruik commas tussen de namen."$/;"	v
g:menutrans_tags_dialog	lang/menu_pl_pl.iso_8859-2.vim	/^let g:menutrans_tags_dialog = "Podaj nazwy plików tagów.\\nProszê rozdzielaæ nazwy przecinkiem."$/;"	v
g:menutrans_tags_dialog	lang/menu_pl_pl.utf-8.vim	/^let g:menutrans_tags_dialog = "Podaj nazwy plikÃ³w tagÃ³w.\\nProszÄ rozdzielaÄ nazwy przecinkiem."$/;"	v
g:menutrans_tags_dialog	lang/menu_polish_poland.1250.vim	/^let g:menutrans_tags_dialog = "Podaj nazwy plików tagów.\\nProszê rozdzielaæ nazwy przecinkiem."$/;"	v
g:menutrans_tags_dialog	lang/menu_pt_br.vim	/^let g:menutrans_tags_dialog = "Indique os nomes dos arquivos de tags.\\nSepare os nomes com uma vírgula."$/;"	v
g:menutrans_tags_dialog	lang/menu_pt_pt.vim	/^let g:menutrans_tags_dialog = "Indique os nomes dos arquivos de tags.\\nSepare os nomes com uma vírgula."$/;"	v
g:menutrans_tags_dialog	lang/menu_ru_ru.koi8-r.vim	/^let g:menutrans_tags_dialog = "÷×ÅÄÉÔÅ ÉÍÅÎÁ ÆÁÊÌÏ× ÍÅÔÏË (ÞÅÒÅÚ ÚÁÐÑÔÕÀ).\\n"$/;"	v
g:menutrans_tags_dialog	lang/menu_ru_ru.vim	/^let g:menutrans_tags_dialog = "ÐÐ²ÐµÐ´Ð¸ÑÐµ Ð¸Ð¼ÐµÐ½Ð° ÑÐ°Ð¹Ð»Ð¾Ð² Ð¼ÐµÑÐ¾Ðº (ÑÐµÑÐµÐ· Ð·Ð°Ð¿ÑÑÑÑ).\\n"$/;"	v
g:menutrans_tags_dialog	lang/menu_sl_si.cp1250.vim	/^let g:menutrans_tags_dialog = "Vnesite imena datotek z znaèkami ('tag').\\nImana loèite z vejicami."$/;"	v
g:menutrans_tags_dialog	lang/menu_sl_si.latin2.vim	/^let g:menutrans_tags_dialog = "Vnesite imena datotek z znaèkami ('tag').\\nImana loèite z vejicami."$/;"	v
g:menutrans_tags_dialog	lang/menu_sl_si.utf-8.vim	/^let g:menutrans_tags_dialog = "Vnesite imena datotek z znaÄkami ('tag').\\nImana loÄite z vejicami."$/;"	v
g:menutrans_tags_dialog	lang/menu_sr_yu.ascii.vim	/^let g:menutrans_tags_dialog = "Unesite imena datoteka sa oznakama\\nRazdvojite zarezima imena."$/;"	v
g:menutrans_tags_dialog	lang/menu_sr_yu.iso_8859-2.vim	/^let g:menutrans_tags_dialog = "Unesite imena datoteka sa oznakama\\nRazdvojite zarezima imena."$/;"	v
g:menutrans_tags_dialog	lang/menu_sr_yu.iso_8859-5.vim	/^let g:menutrans_tags_dialog = "ÃÝÕáØâÕ ØÜÕÝÐ ÔÐâÞâÕÚÐ áÐ Þ×ÝÐÚÐÜÐ\\nÀÐ×ÔÒÞøØâÕ ×ÐàÕ×ØÜÐ ØÜÕÝÐ."$/;"	v
g:menutrans_tags_dialog	lang/menu_sr_yu.utf-8.vim	/^let g:menutrans_tags_dialog = "Ð£Ð½ÐµÑÐ¸ÑÐµ Ð¸Ð¼ÐµÐ½Ð° Ð´Ð°ÑÐ¾ÑÐµÐºÐ° ÑÐ° Ð¾Ð·Ð½Ð°ÐºÐ°Ð¼Ð°\\nÐ Ð°Ð·Ð´Ð²Ð¾ÑÐ¸ÑÐµ Ð·Ð°ÑÐµÐ·Ð¸Ð¼Ð° Ð¸Ð¼ÐµÐ½Ð°."$/;"	v
g:menutrans_tags_dialog	lang/menu_sv_se.latin1.vim	/^let g:menutrans_tags_dialog = "Skriv in namn på taggfiler.\\nSeparera namn med komma."$/;"	v
g:menutrans_tags_dialog	lang/menu_uk_ua.cp1251.vim	/^let g:menutrans_tags_dialog = "Âêàæ³òü íàçâè ôàéë³â ïîì³òîê\\nÐîçä³ëÿéòå íàçâè êîìàìè."$/;"	v
g:menutrans_tags_dialog	lang/menu_uk_ua.koi8-u.vim	/^let g:menutrans_tags_dialog = "÷ËÁÖ¦ÔØ ÎÁÚ×É ÆÁÊÌ¦× ÐÏÍ¦ÔÏË\\nòÏÚÄ¦ÌÑÊÔÅ ÎÁÚ×É ËÏÍÁÍÉ."$/;"	v
g:menutrans_tags_dialog	lang/menu_vi_vn.vim	/^let g:menutrans_tags_dialog = "Nháº­p tÃªn táº­p tin tháº» ghi (phÃ¢n cÃ¡ch bá»i dáº¥u pháº©y).\\n"$/;"	v
g:menutrans_textwidth_dialog	lang/menu_ca_es.latin1.vim	/^let g:menutrans_textwidth_dialog = "Introduïu la nova amplada del text (0 per infinit): "$/;"	v
g:menutrans_textwidth_dialog	lang/menu_de_de.latin1.vim	/^let g:menutrans_textwidth_dialog = "Geben Sie eine neue Text-Breite ein (oder 0, um die Formatierung abzuschalten)"$/;"	v
g:menutrans_textwidth_dialog	lang/menu_eo.utf-8.vim	/^let g:menutrans_textwidth_dialog = "Tajpu la novan larÄon de teksto\\n(0 por malÅalti formatigon)."$/;"	v
g:menutrans_textwidth_dialog	lang/menu_es_es.latin1.vim	/^let g:menutrans_textwidth_dialog = "Introduzca el nuevo ancho del texto (0 para desactivar el quiebre de línea): "$/;"	v
g:menutrans_textwidth_dialog	lang/menu_fi_fi.latin1.vim	/^let g:menutrans_textwidth_dialog = "Anna uusi tekstin leveys\\n(0 poistaa käytöstä)"$/;"	v
g:menutrans_textwidth_dialog	lang/menu_fr_fr.latin1.vim	/^let g:menutrans_textwidth_dialog = "Entrez la nouvelle largeur du texte\\n(0 pour désactiver le formattage)."$/;"	v
g:menutrans_textwidth_dialog	lang/menu_hu_hu.iso_8859-2.vim	/^let g:menutrans_textwidth_dialog = "Írd be a szöveg szélességét (0 = formázás kikapcsolva)"$/;"	v
g:menutrans_textwidth_dialog	lang/menu_hu_hu.utf-8.vim	/^let g:menutrans_textwidth_dialog = "Ãrd be a szÃ¶veg szÃ©lessÃ©gÃ©t (0 = formÃ¡zÃ¡s kikapcsolva)"$/;"	v
g:menutrans_textwidth_dialog	lang/menu_it_it.latin1.vim	/^let g:menutrans_textwidth_dialog = "Batti nuova lunghezza linea (0 per inibire la formattazione): "$/;"	v
g:menutrans_textwidth_dialog	lang/menu_ja_jp.euc-jp.vim	/^let g:menutrans_textwidth_dialog = "¥Æ¥­¥¹¥È¤ÎÉý('textwidth')¤òÀßÄê¤·¤Æ¤¯¤À¤µ¤¤ (0¤ÇÀ°·Á¤òÌµ¸ú²½):"$/;"	v
g:menutrans_textwidth_dialog	lang/menu_ja_jp.utf-8.vim	/^let g:menutrans_textwidth_dialog = "ãã­ã¹ãã®å¹('textwidth')ãè¨­å®ãã¦ãã ãã (0ã§æ´å½¢ãç¡å¹å):"$/;"	v
g:menutrans_textwidth_dialog	lang/menu_japanese_japan.932.vim	/^let g:menutrans_textwidth_dialog = "eLXgÌ('textwidth')ðÝèµÄ­¾³¢ (0Å®`ð³ø»):"$/;"	v
g:menutrans_textwidth_dialog	lang/menu_nb_no.latin1.vim	/^	let g:menutrans_textwidth_dialog = "Velg ny tekstbredde (0 for å forhindre formatering): "$/;"	v
g:menutrans_textwidth_dialog	lang/menu_nl_nl.latin1.vim	/^let g:menutrans_textwidth_dialog = "Typ de nieuwe tekst breedte (0 om formatteren uit the schakelen): "$/;"	v
g:menutrans_textwidth_dialog	lang/menu_pl_pl.iso_8859-2.vim	/^let g:menutrans_textwidth_dialog = "Wprowad¼ now± szeroko¶æ tekstu (0 wy³±cza przewijanie): "$/;"	v
g:menutrans_textwidth_dialog	lang/menu_pl_pl.utf-8.vim	/^let g:menutrans_textwidth_dialog = "WprowadÅº nowÄ szerokoÅÄ tekstu (0 wyÅÄcza przewijanie): "$/;"	v
g:menutrans_textwidth_dialog	lang/menu_polish_poland.1250.vim	/^let g:menutrans_textwidth_dialog = "Wprowad now¹ szerokoæ tekstu (0 wy³¹cza przewijanie): "$/;"	v
g:menutrans_textwidth_dialog	lang/menu_pt_br.vim	/^let g:menutrans_textwidth_dialog = "Digite a nova largura do texto (0 para desativar a formatação): "$/;"	v
g:menutrans_textwidth_dialog	lang/menu_pt_pt.vim	/^let g:menutrans_textwidth_dialog = "Digite a nova largura do texto (0 para desativar a formatação): "$/;"	v
g:menutrans_textwidth_dialog	lang/menu_ru_ru.koi8-r.vim	/^let g:menutrans_textwidth_dialog = "÷×ÅÄÉÔÅ ÛÉÒÉÎÕ ÔÅËÓÔÁ ÄÌÑ ÆÏÒÍÁÔÉÒÏ×ÁÎÉÑ.\\näÌÑ ÏÔÍÅÎÙ ÆÏÒÍÁÔÉÒÏ×ÁÎÉÑ ××ÅÄÉÔÅ 0."$/;"	v
g:menutrans_textwidth_dialog	lang/menu_ru_ru.vim	/^let g:menutrans_textwidth_dialog = "ÐÐ²ÐµÐ´Ð¸ÑÐµ ÑÐ¸ÑÐ¸Ð½Ñ ÑÐµÐºÑÑÐ° Ð´Ð»Ñ ÑÐ¾ÑÐ¼Ð°ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ.\\nÐÐ»Ñ Ð¾ÑÐ¼ÐµÐ½Ñ ÑÐ¾ÑÐ¼Ð°ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ Ð²Ð²ÐµÐ´Ð¸ÑÐµ 0."$/;"	v
g:menutrans_textwidth_dialog	lang/menu_sl_si.cp1250.vim	/^let g:menutrans_textwidth_dialog = "Vnesite novo irino besedila (ali 0 za izklop formatiranja): "$/;"	v
g:menutrans_textwidth_dialog	lang/menu_sl_si.latin2.vim	/^let g:menutrans_textwidth_dialog = "Vnesite novo ¹irino besedila (ali 0 za izklop formatiranja): "$/;"	v
g:menutrans_textwidth_dialog	lang/menu_sl_si.utf-8.vim	/^let g:menutrans_textwidth_dialog = "Vnesite novo Å¡irino besedila (ali 0 za izklop formatiranja): "$/;"	v
g:menutrans_textwidth_dialog	lang/menu_sr_yu.ascii.vim	/^let g:menutrans_textwidth_dialog = "Unesite novu sirinu teksta (0 sprecava prelom)"$/;"	v
g:menutrans_textwidth_dialog	lang/menu_sr_yu.iso_8859-2.vim	/^let g:menutrans_textwidth_dialog = "Unesite novu ¹irinu teksta (0 spreèava prelom)"$/;"	v
g:menutrans_textwidth_dialog	lang/menu_sr_yu.iso_8859-5.vim	/^let g:menutrans_textwidth_dialog = "ÃÝÕáØâÕ ÝÞÒã èØàØÝã âÕÚáâÐ (0 áßàÕçÐÒÐ ßàÕÛÞÜ)"$/;"	v
g:menutrans_textwidth_dialog	lang/menu_sr_yu.utf-8.vim	/^let g:menutrans_textwidth_dialog = "Ð£Ð½ÐµÑÐ¸ÑÐµ Ð½Ð¾Ð²Ñ ÑÐ¸ÑÐ¸Ð½Ñ ÑÐµÐºÑÑÐ° (0 ÑÐ¿ÑÐµÑÐ°Ð²Ð° Ð¿ÑÐµÐ»Ð¾Ð¼)"$/;"	v
g:menutrans_textwidth_dialog	lang/menu_sv_se.latin1.vim	/^let g:menutrans_textwidth_dialog = "Välj ny textbredd (0 för att förhindra formatering): "$/;"	v
g:menutrans_textwidth_dialog	lang/menu_uk_ua.cp1251.vim	/^let g:menutrans_textwidth_dialog = "Âêàæ³òü íîâó øèðèíó òåêñòó (0 äëÿ â³äì³íè ôîìàòóâàííÿ)"$/;"	v
g:menutrans_textwidth_dialog	lang/menu_uk_ua.koi8-u.vim	/^let g:menutrans_textwidth_dialog = "÷ËÁÖ¦ÔØ ÎÏ×Õ ÛÉÒÉÎÕ ÔÅËÓÔÕ (0 ÄÌÑ ×¦ÄÍ¦ÎÉ ÆÏÍÁÔÕ×ÁÎÎÑ)"$/;"	v
g:menutrans_textwidth_dialog	lang/menu_vi_vn.vim	/^let g:menutrans_textwidth_dialog = "HÃ£y nháº­p chiá»u rá»ng vÄn báº£n má»i.\\nNháº­p 0 Äá» há»§y bá»."$/;"	v
g:netrw_alto	autoload/netrw.vim	/^ let g:netrw_alto= &sb$/;"	v
g:netrw_altv	autoload/netrw.vim	/^ let g:netrw_altv= &spr$/;"	v
g:netrw_browse_split	autoload/netrw.vim	/^ let g:netrw_browse_split= 0$/;"	v
g:netrw_chgwin	autoload/netrw.vim	/^ let g:netrw_chgwin    = -1$/;"	v
g:netrw_compress	autoload/netrw.vim	/^ let g:netrw_compress= "gzip"$/;"	v
g:netrw_ctags	autoload/netrw.vim	/^ let g:netrw_ctags= "ctags"$/;"	v
g:netrw_cygwin	autoload/netrw.vim	/^   let g:netrw_cygwin= 0$/;"	v
g:netrw_cygwin	autoload/netrw.vim	/^   let g:netrw_cygwin= 1$/;"	v
g:netrw_cygwin	autoload/netrw.vim	/^  let g:netrw_cygwin= 0$/;"	v
g:netrw_cygwin	autoload/tar.vim	/^   let g:netrw_cygwin= 0$/;"	v
g:netrw_cygwin	autoload/tar.vim	/^   let g:netrw_cygwin= 1$/;"	v
g:netrw_cygwin	autoload/tar.vim	/^  let g:netrw_cygwin= 0$/;"	v
g:netrw_cygwin	autoload/vimball.vim	/^    let g:netrw_cygwin= 0$/;"	v
g:netrw_cygwin	autoload/vimball.vim	/^    let g:netrw_cygwin= 1$/;"	v
g:netrw_cygwin	autoload/vimball.vim	/^   let g:netrw_cygwin= 0$/;"	v
g:netrw_dav_cmd	autoload/netrw.vim	/^  let g:netrw_dav_cmd	= "cadaver"$/;"	v
g:netrw_decompress	autoload/netrw.vim	/^ let g:netrw_decompress= { ".gz" : "gunzip" , ".bz2" : "bunzip2" , ".zip" : "unzip" , ".tar" : "tar -xf"}$/;"	v
g:netrw_dirhistmax	autoload/netrw.vim	/^ let g:netrw_dirhistmax= 10$/;"	v
g:netrw_fastbrowse	autoload/netrw.vim	/^ let g:netrw_fastbrowse= 1$/;"	v
g:netrw_fetch_cmd	autoload/netrw.vim	/^  let g:netrw_fetch_cmd	= ""$/;"	v
g:netrw_fetch_cmd	autoload/netrw.vim	/^  let g:netrw_fetch_cmd	= "fetch -o"$/;"	v
g:netrw_fname_escape	autoload/netrw.vim	/^ let g:netrw_fname_escape= ' ?&;%'$/;"	v
g:netrw_ftp_browse_reject	autoload/netrw.vim	/^ let g:netrw_ftp_browse_reject='^total\\s\\+\\d\\+$\\|^Trying\\s\\+\\d\\+.*$\\|^KERBEROS_V\\d rejected\\|^Security extensions not\\|No such file\\|: connect to address [0-9a-fA-F:]*: No route to host$'$/;"	v
g:netrw_ftp_cmd	autoload/netrw.vim	/^  let g:netrw_ftp_cmd	= "ftp"$/;"	v
g:netrw_ftp_list_cmd	autoload/netrw.vim	/^  let g:netrw_ftp_list_cmd     = "dir"$/;"	v
g:netrw_ftp_list_cmd	autoload/netrw.vim	/^  let g:netrw_ftp_list_cmd     = "ls -lF"$/;"	v
g:netrw_ftp_sizelist_cmd	autoload/netrw.vim	/^  let g:netrw_ftp_sizelist_cmd = "dir"$/;"	v
g:netrw_ftp_sizelist_cmd	autoload/netrw.vim	/^  let g:netrw_ftp_sizelist_cmd = "ls -slF"$/;"	v
g:netrw_ftp_timelist_cmd	autoload/netrw.vim	/^  let g:netrw_ftp_timelist_cmd = "dir"$/;"	v
g:netrw_ftp_timelist_cmd	autoload/netrw.vim	/^  let g:netrw_ftp_timelist_cmd = "ls -tlF"$/;"	v
g:netrw_ftpmode	autoload/netrw.vim	/^ let g:netrw_ftpmode= "binary"$/;"	v
g:netrw_glob_escape	autoload/netrw.vim	/^  let g:netrw_glob_escape= '[]*?`{~$'$/;"	v
g:netrw_hide	autoload/netrw.vim	/^ let g:netrw_hide= 1$/;"	v
g:netrw_http_cmd	autoload/netrw.vim	/^  let g:netrw_http_cmd	= ""$/;"	v
g:netrw_http_cmd	autoload/netrw.vim	/^  let g:netrw_http_cmd	= "curl -o"$/;"	v
g:netrw_http_cmd	autoload/netrw.vim	/^  let g:netrw_http_cmd	= "fetch -o"$/;"	v
g:netrw_http_cmd	autoload/netrw.vim	/^  let g:netrw_http_cmd	= "wget -q -O"$/;"	v
g:netrw_http_cmd	autoload/netrw.vim	/^  let g:netrw_http_cmd = "elinks"$/;"	v
g:netrw_http_cmd	autoload/netrw.vim	/^  let g:netrw_http_cmd = "links"$/;"	v
g:netrw_http_xcmd	autoload/netrw.vim	/^  let g:netrw_http_xcmd= "-dump >"$/;"	v
g:netrw_ignorenetrc	autoload/netrw.vim	/^  let g:netrw_ignorenetrc= 0$/;"	v
g:netrw_ignorenetrc	autoload/netrw.vim	/^  let g:netrw_ignorenetrc= 1$/;"	v
g:netrw_keepdir	autoload/netrw.vim	/^ let g:netrw_keepdir= 1$/;"	v
g:netrw_list_cmd	autoload/netrw.vim	/^  let g:netrw_list_cmd= ""$/;"	v
g:netrw_list_cmd	autoload/netrw.vim	/^  let g:netrw_list_cmd= g:netrw_scp_cmd." -ls USEPORT HOSTNAME:"$/;"	v
g:netrw_list_cmd	autoload/netrw.vim	/^  let g:netrw_list_cmd= g:netrw_ssh_cmd." USEPORT HOSTNAME ls -FLa"$/;"	v
g:netrw_list_cmd	autoload/netrw.vim	/^ let g:netrw_list_cmd= g:netrw_list_cmd." -l"$/;"	v
g:netrw_list_hide	autoload/netrw.vim	/^ let g:netrw_list_hide= ""$/;"	v
g:netrw_liststyle	autoload/netrw.vim	/^ let g:netrw_liststyle= s:THINLIST$/;"	v
g:netrw_local_mkdir	autoload/netrw.vim	/^ let g:netrw_local_mkdir= "mkdir"$/;"	v
g:netrw_local_rmdir	autoload/netrw.vim	/^ let g:netrw_local_rmdir= "rmdir"$/;"	v
g:netrw_localcopycmd	autoload/netrw.vim	/^   let g:netrw_localcopycmd= "copy"$/;"	v
g:netrw_localcopycmd	autoload/netrw.vim	/^   let g:netrw_localcopycmd= "cp"$/;"	v
g:netrw_localcopycmd	autoload/netrw.vim	/^  let g:netrw_localcopycmd= ""$/;"	v
g:netrw_localcopycmd	autoload/netrw.vim	/^  let g:netrw_localcopycmd= "cp"$/;"	v
g:netrw_localmovecmd	autoload/netrw.vim	/^   let g:netrw_localmovecmd= "move"$/;"	v
g:netrw_localmovecmd	autoload/netrw.vim	/^   let g:netrw_localmovecmd= "mv"$/;"	v
g:netrw_localmovecmd	autoload/netrw.vim	/^  let g:netrw_localmovecmd= ""$/;"	v
g:netrw_localmovecmd	autoload/netrw.vim	/^  let g:netrw_localmovecmd= "mv"$/;"	v
g:netrw_markfileesc	autoload/netrw.vim	/^ let g:netrw_markfileesc= '*.\/[\\~'$/;"	v
g:netrw_maxfilenamelen	autoload/netrw.vim	/^ let g:netrw_maxfilenamelen= 32$/;"	v
g:netrw_menu	autoload/netrw.vim	/^ let g:netrw_menu= 1$/;"	v
g:netrw_mkdir_cmd	autoload/netrw.vim	/^ let g:netrw_mkdir_cmd= g:netrw_ssh_cmd." USEPORT HOSTNAME mkdir"$/;"	v
g:netrw_mousemaps	autoload/netrw.vim	/^  let g:netrw_mousemaps= 0$/;"	v
g:netrw_mousemaps	autoload/netrw.vim	/^  let g:netrw_mousemaps= 1$/;"	v
g:netrw_preview	autoload/netrw.vim	/^ let g:netrw_preview= 0$/;"	v
g:netrw_rcp_cmd	autoload/netrw.vim	/^  let g:netrw_rcp_cmd	= "rcp"$/;"	v
g:netrw_rename_cmd	autoload/netrw.vim	/^ let g:netrw_rename_cmd= g:netrw_ssh_cmd." USEPORT HOSTNAME mv"$/;"	v
g:netrw_retmap	autoload/netrw.vim	/^ let g:netrw_retmap= 0$/;"	v
g:netrw_rm_cmd	autoload/netrw.vim	/^ let g:netrw_rm_cmd    = g:netrw_ssh_cmd." USEPORT HOSTNAME rm"$/;"	v
g:netrw_rmdir_cmd	autoload/netrw.vim	/^ let g:netrw_rmdir_cmd = g:netrw_ssh_cmd." USEPORT HOSTNAME rmdir"$/;"	v
g:netrw_rmf_cmd	autoload/netrw.vim	/^ let g:netrw_rmf_cmd    = g:netrw_ssh_cmd." USEPORT HOSTNAME rm -f"$/;"	v
g:netrw_rsync_cmd	autoload/netrw.vim	/^  let g:netrw_rsync_cmd	= "rsync"$/;"	v
g:netrw_scp_cmd	autoload/netrw.vim	/^   let g:netrw_scp_cmd ="pscp -i C:\\\\private.ppk"$/;"	v
g:netrw_scp_cmd	autoload/netrw.vim	/^  let g:netrw_scp_cmd	= "scp -q"$/;"	v
g:netrw_scpport	autoload/netrw.vim	/^ let g:netrw_scpport= "-P"$/;"	v
g:netrw_sftp_cmd	autoload/netrw.vim	/^  let g:netrw_sftp_cmd	= "sftp"$/;"	v
g:netrw_shq	autoload/vimball.vim	/^    let g:netrw_shq= "'"$/;"	v
g:netrw_shq	autoload/vimball.vim	/^    let g:netrw_shq= '"'$/;"	v
g:netrw_shq	autoload/vimball.vim	/^   let g:netrw_shq= "'"$/;"	v
g:netrw_shq	autoload/vimball.vim	/^   let g:netrw_shq= &shq$/;"	v
g:netrw_shq	autoload/vimball.vim	/^  let g:netrw_shq= g:vimball_shq$/;"	v
g:netrw_sort_by	autoload/netrw.vim	/^ let g:netrw_sort_by= "name"$/;"	v
g:netrw_sort_direction	autoload/netrw.vim	/^ let g:netrw_sort_direction= "normal"$/;"	v
g:netrw_sort_options	autoload/netrw.vim	/^ let g:netrw_sort_options= ""$/;"	v
g:netrw_sort_sequence	autoload/netrw.vim	/^ let g:netrw_sort_sequence= '[\\\/]$,\\.h$,\\.c$,\\.cpp$,*,\\.o$,\\.obj$,\\.info$,\\.swp$,\\.bak$,\\~$'$/;"	v
g:netrw_special_syntax	autoload/netrw.vim	/^ let g:netrw_special_syntax= 0$/;"	v
g:netrw_ssh_browse_reject	autoload/netrw.vim	/^  let g:netrw_ssh_browse_reject='^total\\s\\+\\d\\+$'$/;"	v
g:netrw_ssh_cmd	autoload/netrw.vim	/^ let g:netrw_ssh_cmd= "ssh"$/;"	v
g:netrw_sshport	autoload/netrw.vim	/^ let g:netrw_sshport= "-p"$/;"	v
g:netrw_timefmt	autoload/netrw.vim	/^ let g:netrw_timefmt= "%c"$/;"	v
g:netrw_tmpfile_escape	autoload/netrw.vim	/^ let g:netrw_tmpfile_escape= ' &;'$/;"	v
g:netrw_use_errorwindow	autoload/netrw.vim	/^ let g:netrw_use_errorwindow= 1$/;"	v
g:netrw_use_noswf	autoload/netrw.vim	/^  let g:netrw_use_noswf= 0$/;"	v
g:netrw_use_noswf	autoload/netrw.vim	/^  let g:netrw_use_noswf= 1$/;"	v
g:netrw_win95ftp	autoload/netrw.vim	/^ let g:netrw_win95ftp= 1$/;"	v
g:netrw_winsize	autoload/netrw.vim	/^ let g:netrw_winsize= ""$/;"	v
g:netrw_xstrlen	autoload/netrw.vim	/^ let g:netrw_xstrlen= 1$/;"	v
g:omni_sql_ignorecase	autoload/sqlcomplete.vim	/^    let g:omni_sql_ignorecase = &ignorecase$/;"	v
g:omni_sql_include_owner	autoload/sqlcomplete.vim	/^            let g:omni_sql_include_owner = 1$/;"	v
g:omni_sql_include_owner	autoload/sqlcomplete.vim	/^    let g:omni_sql_include_owner = 0$/;"	v
g:omni_sql_precache_syntax_groups	autoload/sqlcomplete.vim	/^    let g:omni_sql_precache_syntax_groups = [$/;"	v
g:omni_sql_use_tbl_alias	autoload/sqlcomplete.vim	/^    let g:omni_sql_use_tbl_alias = 'a'$/;"	v
g:omni_syntax_ignorecase	autoload/syntaxcomplete.vim	/^    let g:omni_syntax_ignorecase = &ignorecase$/;"	v
g:omni_syntax_minimum_length	autoload/syntaxcomplete.vim	/^    let g:omni_syntax_minimum_length = 0$/;"	v
g:omni_syntax_use_iskeyword	autoload/syntaxcomplete.vim	/^    let g:omni_syntax_use_iskeyword = 1$/;"	v
g:rubycomplete_buffer_loading	autoload/rubycomplete.vim	/^    let g:rubycomplete_buffer_loading = 0$/;"	v
g:rubycomplete_classes_in_global	autoload/rubycomplete.vim	/^    let g:rubycomplete_classes_in_global = 0$/;"	v
g:rubycomplete_include_object	autoload/rubycomplete.vim	/^    let g:rubycomplete_include_object = 0$/;"	v
g:rubycomplete_include_objectspace	autoload/rubycomplete.vim	/^    let g:rubycomplete_include_objectspace = 0$/;"	v
g:rubycomplete_rails	autoload/rubycomplete.vim	/^    let g:rubycomplete_rails = 0$/;"	v
g:scroll_colors	plugin/ScrollColor.vim	/^let g:scroll_colors = 1$/;"	v
g:sectionshortcuts	ftplugin/latex-suite/wizardfuncs.vim	/^let g:sectionshortcuts = ''$/;"	v
g:sh_fold_enabled	syntax/sh.vim	/^ let g:sh_fold_enabled= 0$/;"	v
g:spell_clean_limit	spell/cleanadd.vim	/^  let g:spell_clean_limit = 1$/;"	v
g:spellfile_URL	autoload/spellfile.vim	/^    let g:spellfile_URL = 'ftp:\/\/ftp.vim.org\/pub\/vim\/runtime\/spell'$/;"	v
g:spellfile_URL	autoload/spellfile.vim	/^    let g:spellfile_URL = 'http:\/\/ftp.vim.org\/pub\/vim\/runtime\/spell'$/;"	v
g:tar_browseoptions	autoload/tar.vim	/^ let g:tar_browseoptions= "Ptf"$/;"	v
g:tar_cmd	autoload/tar.vim	/^ let g:tar_cmd= "tar"$/;"	v
g:tar_readoptions	autoload/tar.vim	/^ let g:tar_readoptions= "OPxf"$/;"	v
g:tar_shq	autoload/tar.vim	/^   let g:tar_shq= "'"$/;"	v
g:tar_shq	autoload/tar.vim	/^   let g:tar_shq= '"'$/;"	v
g:tar_shq	autoload/tar.vim	/^  let g:tar_shq= "'"$/;"	v
g:tar_shq	autoload/tar.vim	/^  let g:tar_shq= &shq$/;"	v
g:tar_writeoptions	autoload/tar.vim	/^ let g:tar_writeoptions= "uf"$/;"	v
g:tex_flavor	vimrc.vim	/^let g:tex_flavor='latex'	" }}}2$/;"	v
g:tex_flavor	vimrc.vim	/^let g:tex_flavor='latex'$/;"	v
g:tex_fold_enabled	syntax/tex.vim	/^ let g:tex_fold_enabled= 0$/;"	v
g:tex_indent_items	indent/tex.vim	/^  let g:tex_indent_items = 1$/;"	v
g:tex_no_error	syntax/tex.vim	/^ let g:tex_no_error= 1$/;"	v
g:tlist_tex_settings	ftplugin/latex-suite/main.vim	/^		let g:tlist_tex_settings = 'tex;s:section;c:chapter;l:label;r:ref'$/;"	v
g:txtbrowser_version	plugin/txtbrowser.vim	/^let g:txtbrowser_version = "1.2.8"$/;"	v
g:vhdl_indent_genportmap	indent/vhdl.vim	/^  let g:vhdl_indent_genportmap = 1$/;"	v
g:vhdl_indent_rhsassign	indent/vhdl.vim	/^  let g:vhdl_indent_rhsassign = 1$/;"	v
g:vimball_mkdir	autoload/vimball.vim	/^   let g:vimball_mkdir= "makedir"$/;"	v
g:vimball_mkdir	autoload/vimball.vim	/^   let g:vimball_mkdir= "mkdir"$/;"	v
g:vimball_mkdir	autoload/vimball.vim	/^   let g:vimball_mkdir= g:netrw_local_mkdir$/;"	v
g:vimball_path_escape	autoload/vimball.vim	/^  let g:vimball_path_escape= ' ;#%'$/;"	v
g:vimsh_loaded_python_file	vimsh.vim	/^        let g:vimsh_loaded_python_file=1$/;"	v
g:vimsyn_embed	syntax/vim.vim	/^ let g:vimsyn_embed= "mpPr"$/;"	v
g:vimsyn_maxlines	syntax/vim.vim	/^ let g:vimsyn_maxlines= g:vim_maxlines$/;"	v
g:vimsyn_minlines	syntax/vim.vim	/^ let g:vimsyn_minlines= g:vim_minlines$/;"	v
g:vimsyn_noerror	syntax/vim.vim	/^ let g:vimsyn_noerror= g:vimsyntax_noerror$/;"	v
g:xmldata_html32	autoload/xml/html32.vim	/^let g:xmldata_html32 = {$/;"	v
g:xmldata_html401s	autoload/xml/html401s.vim	/^let g:xmldata_html401s = {$/;"	v
g:xmldata_html401t	autoload/xml/html401f.vim	/^let g:xmldata_html401t = {$/;"	v
g:xmldata_html401t	autoload/xml/html401t.vim	/^let g:xmldata_html401t = {$/;"	v
g:xmldata_html40s	autoload/xml/html40s.vim	/^let g:xmldata_html40s = {$/;"	v
g:xmldata_html40t	autoload/xml/html40f.vim	/^let g:xmldata_html40t = {$/;"	v
g:xmldata_html40t	autoload/xml/html40t.vim	/^let g:xmldata_html40t = {$/;"	v
g:xmldata_xhtml10f	autoload/xml/xhtml10f.vim	/^let g:xmldata_xhtml10f = {$/;"	v
g:xmldata_xhtml10s	autoload/xml/xhtml10s.vim	/^let g:xmldata_xhtml10s = {$/;"	v
g:xmldata_xhtml10t	autoload/xml/xhtml10t.vim	/^let g:xmldata_xhtml10t = {$/;"	v
g:xmldata_xhtml11	autoload/xml/xhtml11.vim	/^let g:xmldata_xhtml11 = {$/;"	v
g:xmldata_xsd	autoload/xml/xsd.vim	/^let g:xmldata_xsd = {$/;"	v
g:xmldata_xsl	autoload/xml/xsl.vim	/^let g:xmldata_xsl = {$/;"	v
g:zip_shq	autoload/zip.vim	/^  let g:zip_shq= "'"$/;"	v
g:zip_shq	autoload/zip.vim	/^  let g:zip_shq= &shq$/;"	v
g:zip_shq	autoload/zip.vim	/^  let g:zip_shq= '"'$/;"	v
g:zip_unzipcmd	autoload/zip.vim	/^ let g:zip_unzipcmd= "unzip"$/;"	v
g:zip_zipcmd	autoload/zip.vim	/^ let g:zip_zipcmd= "zip"$/;"	v
g<C-]>	ftplugin/ada.vim	/^	 nnoremap <unique> <buffer> g<C-]>   :call ada#Jump_Tag ('','stjump')<cr>$/;"	m
g<C-]>	ftplugin/ada.vim	/^	 nnoremap <unique> <buffer> g<C-]>   :call ada#List_Tag ()<cr>$/;"	m
g<LeftMouse>	<C-RightMouse>	macros/swapmous.vim	/^noremap	 g<LeftMouse>	<C-RightMouse>$/;"	m
g<RightMouse>	<C-LeftMouse>	macros/swapmous.vim	/^noremap	 g<RightMouse>	<C-LeftMouse>$/;"	m
gdb_minlines	syntax/gdb.vim	/^  let gdb_minlines = 10$/;"	v
gdzie	tutor/tutor.pl	/^  gdzie:$/;"	l
generate_suffix_groups	syntax/hostconf.vim	/^function s:generate_suffix_groups(list_of_order_of_orders, context, trailing_context)$/;"	f
getAuthor	ftplugin/debchangelog.vim	/^function! s:getAuthor(zonestart, zoneend)$/;"	f
getField	ftplugin/debcontrol.vim	/^function! s:getField(f, lnum)$/;"	f
getFileContents	ftplugin/latex-suite/outline.py	/^def getFileContents(fname):$/;"	f
getPath	plugin/NERD_tree.vim	/^function! s:getPath(ln)$/;"	f
getSectionLabels	ftplugin/latex-suite/outline.py	/^def getSectionLabels(lineinfo, $/;"	f
getSectionLabels_Root	ftplugin/latex-suite/outline.py	/^def getSectionLabels_Root(lineinfo, section_prefix, label_prefix):$/;"	f
getTreeWinNum	plugin/NERD_tree.vim	/^function! s:getTreeWinNum()$/;"	f
get_vim_cursor_pos	vimsh.py	/^    def get_vim_cursor_pos( self ):$/;"	m	class:vimsh
getscript#GetLatestVimScripts	autoload/getscript.vim	/^fun! getscript#GetLatestVimScripts()$/;"	f
gitFunctions.Add	plugin/vcsgit.vim	/^function! s:gitFunctions.Add(argList)$/;"	f
gitFunctions.Annotate	plugin/vcsgit.vim	/^function! s:gitFunctions.Annotate(argList)$/;"	f
gitFunctions.Commit	plugin/vcsgit.vim	/^function! s:gitFunctions.Commit(argList)$/;"	f
gitFunctions.Delete	plugin/vcsgit.vim	/^function! s:gitFunctions.Delete(argList)$/;"	f
gitFunctions.Diff	plugin/vcsgit.vim	/^function! s:gitFunctions.Diff(argList)$/;"	f
gitFunctions.GetBufferInfo	plugin/vcsgit.vim	/^function! s:gitFunctions.GetBufferInfo()$/;"	f
gitFunctions.Identify	plugin/vcsgit.vim	/^function! s:gitFunctions.Identify(buffer)$/;"	f
gitFunctions.Log	plugin/vcsgit.vim	/^function! s:gitFunctions.Log(argList)$/;"	f
gitFunctions.Revert	plugin/vcsgit.vim	/^function! s:gitFunctions.Revert(argList)$/;"	f
gitFunctions.Review	plugin/vcsgit.vim	/^function! s:gitFunctions.Review(argList)$/;"	f
gitFunctions.Status	plugin/vcsgit.vim	/^function! s:gitFunctions.Status(argList)$/;"	f
gitFunctions.Update	plugin/vcsgit.vim	/^function! s:gitFunctions.Update(argList)$/;"	f
gitdiffcached	ftplugin/gitcommit.vim	/^function! s:gitdiffcached(bang,gitdir,...)$/;"	f
gnat#Find	autoload/gnat.vim	/^function gnat#Find () dict					     " {{{1$/;"	f
gnat#Get_Command	autoload/gnat.vim	/^function gnat#Get_Command (Command) dict			     " {{{1$/;"	f
gnat#Insert_Tags_Header	autoload/gnat.vim	/^function gnat#Insert_Tags_Header ()				  " {{{1$/;"	f
gnat#Make	autoload/gnat.vim	/^function gnat#Make () dict					     " {{{1$/;"	f
gnat#New	autoload/gnat.vim	/^function gnat#New ()						     " {{{1$/;"	f
gnat#Pretty	autoload/gnat.vim	/^function gnat#Pretty () dict					     " {{{1$/;"	f
gnat#Set_Project_File	autoload/gnat.vim	/^function gnat#Set_Project_File (...) dict			     " {{{1$/;"	f
gnat#Set_Session	autoload/gnat.vim	/^function gnat#Set_Session (...) dict				     " {{{1$/;"	f
gnat#Tags	autoload/gnat.vim	/^function gnat#Tags () dict					     " {{{1$/;"	f
gotoline	plugin/file:line.vim	/^function! s:gotoline()$/;"	f
grey_color	colors/desert256.vim	/^    fun <SID>grey_color(n)$/;"	f
grey_color	colors/jellybeans.vim	/^fun! s:grey_color(n)$/;"	f
grey_color	colors/summerfruit256.vim	/^    fun <SID>grey_color(n)$/;"	f
grey_color	colors/wombat256.vim	/^fun <SID>grey_color(n)$/;"	f
grey_level	colors/desert256.vim	/^    fun <SID>grey_level(n)$/;"	f
grey_level	colors/jellybeans.vim	/^fun! s:grey_level(n)$/;"	f
grey_level	colors/summerfruit256.vim	/^    fun <SID>grey_level(n)$/;"	f
grey_level	colors/wombat256.vim	/^fun <SID>grey_level(n)$/;"	f
grey_number	colors/desert256.vim	/^    fun <SID>grey_number(x)$/;"	f
grey_number	colors/jellybeans.vim	/^fun! s:grey_number(x)$/;"	f
grey_number	colors/summerfruit256.vim	/^    fun <SID>grey_number(x)$/;"	f
grey_number	colors/wombat256.vim	/^fun <SID>grey_number(x)$/;"	f
groovy_minlines	syntax/groovy.vim	/^  let groovy_minlines = 10$/;"	v
guisetcolor	colors/calmar256-dark.vim	/^function! s:guisetcolor(colarg)$/;"	f
guisetcolor	colors/calmar256-light.vim	/^function! s:guisetcolor(colarg)$/;"	f
gx	plugin/netrwPlugin.vim	/^  nmap <unique> gx <Plug>NetrwBrowseX$/;"	m
gzip	plugin/gzip.vim	/^augroup gzip$/;"	a
gzip#appre	autoload/gzip.vim	/^fun gzip#appre(cmd)$/;"	f
gzip#read	autoload/gzip.vim	/^fun gzip#read(cmd)$/;"	f
gzip#write	autoload/gzip.vim	/^fun gzip#write(cmd)$/;"	f
h	macros/less.vim	/^noremap h :call <SID>Help()<CR>$/;"	m
handleMiddleMouse	plugin/NERD_tree.vim	/^function! s:handleMiddleMouse()$/;"	f
handle_exit_cmd	vimsh.py	/^    def handle_exit_cmd( self, _cmd ):$/;"	m	class:vimsh
handle_shell_exited	vimsh.py	/^    def handle_shell_exited( self ):$/;"	m	class:vimsh
hgFunctions.Add	plugin/vcshg.vim	/^function! s:hgFunctions.Add(argList)$/;"	f
hgFunctions.Annotate	plugin/vcshg.vim	/^function! s:hgFunctions.Annotate(argList)$/;"	f
hgFunctions.Commit	plugin/vcshg.vim	/^function! s:hgFunctions.Commit(argList)$/;"	f
hgFunctions.Delete	plugin/vcshg.vim	/^function! s:hgFunctions.Delete(argList)$/;"	f
hgFunctions.Diff	plugin/vcshg.vim	/^function! s:hgFunctions.Diff(argList)$/;"	f
hgFunctions.GetBufferInfo	plugin/vcshg.vim	/^function! s:hgFunctions.GetBufferInfo()$/;"	f
hgFunctions.Identify	plugin/vcshg.vim	/^function! s:hgFunctions.Identify(buffer)$/;"	f
hgFunctions.Info	plugin/vcshg.vim	/^function! s:hgFunctions.Info(argList)$/;"	f
hgFunctions.Log	plugin/vcshg.vim	/^function! s:hgFunctions.Log(argList)$/;"	f
hgFunctions.Revert	plugin/vcshg.vim	/^function! s:hgFunctions.Revert(argList)$/;"	f
hgFunctions.Review	plugin/vcshg.vim	/^function! s:hgFunctions.Review(argList)$/;"	f
hgFunctions.Status	plugin/vcshg.vim	/^function! s:hgFunctions.Status(argList)$/;"	f
hgFunctions.Update	plugin/vcshg.vim	/^function! s:hgFunctions.Update(argList)$/;"	f
hibg	colors/vividchalk.vim	/^function! s:hibg(group,guibg,first,second)$/;"	f
hifg	colors/vividchalk.vim	/^function! s:hifg(group,guifg,first,second,...)$/;"	f
highlight_types	syntax/spup.vim	/^    let highlight_types = 1$/;"	v
highlighttest	syntax/hitest.vim	/^aug highlighttest$/;"	a
hostname	ftplugin/changelog.vim	/^          let hostname = strpart(hostname, 0, newline)$/;"	v
hostname	ftplugin/changelog.vim	/^        let hostname = 'localhost'$/;"	v
hostname	ftplugin/changelog.vim	/^      let hostname = system('hostname')$/;"	v
html_my_rendering	colors/tabula.vim	/^let html_my_rendering=1$/;"	v
html_no_pre	syntax/2html.vim	/^  let html_no_pre = s:old_html_no_pre$/;"	v
html_no_pre	syntax/2html.vim	/^  let html_no_pre=1$/;"	v
html_no_rendering	syntax/spyce.vim	/^let html_no_rendering = 1    " do not render <b>,<i>, etc...$/;"	v
htmlcomplete#CheckDoctype	autoload/htmlcomplete.vim	/^function! htmlcomplete#CheckDoctype() " {{{$/;"	f
htmlcomplete#CompleteTags	autoload/htmlcomplete.vim	/^function! htmlcomplete#CompleteTags(findstart, base)$/;"	f
htmlcomplete#LoadData	autoload/htmlcomplete.vim	/^function! htmlcomplete#LoadData() " {{{$/;"	f
htmlfiles	doc/Makefile	/^htmlfiles = $(addsuffix .html, $(projects))$/;"	m
http	tutor/tutor.pl	/^	http:\/\/helion.pl\/ksiazki\/viedyt.htm$/;"	l
http	tutor/tutor.pl	/^	http:\/\/helion.pl\/ksiazki\/vilek.htm$/;"	l
i	ftplugin/html.vim	/^        let i += 1$/;"	v
i	ftplugin/html.vim	/^    let i = 1$/;"	v
i	syntax/2html.vim	/^	let i = &ts - ((idx + s:startcol - 1) % &ts)$/;"	v
i	syntax/xpm.vim	/^   let i = i + 1$/;"	v
i	syntax/xpm.vim	/^let i      = 1$/;"	v
i	syntax/xpm2.vim	/^    let i = i + 1$/;"	v
i	syntax/xpm2.vim	/^  let i      = 1$/;"	v
icon_minlines	syntax/icon.vim	/^  let icon_minlines = 15$/;"	v
idx	syntax/2html.vim	/^	let idx = stridx(s:expandedtab, "\\t")$/;"	v
idx	syntax/2html.vim	/^      let idx = stridx(s:expandedtab, "\\t")$/;"	v
include_syntax	syntax/context.vim	/^function! s:include_syntax(name, group)$/;"	f
increase	ftplugin/cobol.vim	/^function! s:increase(...)$/;"	f
indentLevelFor	plugin/NERD_tree.vim	/^function! s:indentLevelFor(line)$/;"	f
indent_to_innermost_parentheses	indent/dtd.vim	/^function s:indent_to_innermost_parentheses(line, end)$/;"	f
index	plugin/bash-support.vim	/^	let index = index + 1$/;"	v
index	plugin/bash-support.vim	/^let index	= 0$/;"	v
initNerdTree	plugin/NERD_tree.vim	/^function! s:initNerdTree(name)$/;"	f
initNerdTreeInPlace	plugin/NERD_tree.vim	/^function! s:initNerdTreeInPlace(dir)$/;"	f
initNerdTreeMirror	plugin/NERD_tree.vim	/^function! s:initNerdTreeMirror()$/;"	f
initVariable	plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
isPresentInFile	ftplugin/latex-suite/pytools.py	/^def isPresentInFile(regexp, filename):$/;"	f
isTreeOpen	plugin/NERD_tree.vim	/^function! s:isTreeOpen()$/;"	f
isWindowUsable	plugin/NERD_tree.vim	/^function! s:isWindowUsable(winnumber)$/;"	f
is_bash	syntax/initng.vim	/^let is_bash = 1$/;"	v
iskKeep	syntax/vim.vim	/^ let iskKeep= &isk$/;"	v
j	ftplugin/flexwiki.vim	/^  nmap <buffer> j      gj$/;"	m
j	ftplugin/flexwiki.vim	/^  vmap <buffer> j      gj$/;"	m
j	macros/less.vim	/^map j <CR>$/;"	m
j	tutor/tutor.cs	/^   ** Pro pohyb kurzoru pou¾ívej klávesy h,j,k,l jak je znázornìno ní¾e. **$/;"	v
java_allow_cpp_keywords	syntax/java.vim	/^  let java_allow_cpp_keywords = 1$/;"	v
java_highlight_all	syntax/java.vim	/^  let java_highlight_all=1$/;"	v
java_minlines	syntax/java.vim	/^  let java_minlines = 10$/;"	v
javascriptcomplete#CompleteJS	autoload/javascriptcomplete.vim	/^function! javascriptcomplete#CompleteJS(findstart, base)$/;"	f
jproperties_lines	syntax/jproperties.vim	/^	let jproperties_lines = 256$/;"	v
jproperties_show_messages	syntax/jproperties.vim	/^	let jproperties_show_messages = 0$/;"	v
jproperties_strict_syntax	syntax/jproperties.vim	/^	let jproperties_strict_syntax = 0$/;"	v
jumpToChild	plugin/NERD_tree.vim	/^function! s:jumpToChild(direction)$/;"	f
jumpToFirstChild	plugin/NERD_tree.vim	/^function! s:jumpToFirstChild()$/;"	f
jumpToLastChild	plugin/NERD_tree.vim	/^function! s:jumpToLastChild()$/;"	f
jumpToParent	plugin/NERD_tree.vim	/^function! s:jumpToParent()$/;"	f
jumpToRoot	plugin/NERD_tree.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	plugin/NERD_tree.vim	/^function! s:jumpToSibling(forward)$/;"	f
k	ftplugin/flexwiki.vim	/^  nmap <buffer> k      gk$/;"	m
k	ftplugin/flexwiki.vim	/^  vmap <buffer> k      gk$/;"	m
k	macros/less.vim	/^noremap <script> k <C-Y><SID>L$/;"	m
k	tutor/tutor.cs	/^   ** Pro pohyb kurzoru pou¾ívej klávesy h,j,k,l jak je znázornìno ní¾e. **$/;"	v
kaz	tutor/tutor.cs	/^  3. A¾ se dostane¹ na pøíkazový øádek, napi¹ pøíkaz, kterým se dostane¹ zpìt$/;"	v
lex	indent/dtd.vim	/^function s:lex(input, start, ...)$/;"	f
lex1	indent/dtd.vim	/^function s:lex1(input, start, ...)$/;"	f
line	ftplugin/html.vim	/^        let line = getline(i)$/;"	v
line	ftplugin/html.vim	/^    let line = ""$/;"	v
lnum	scripts.vim	/^	let lnum = lnum + 1$/;"	v
lnum	scripts.vim	/^      let lnum = 1$/;"	v
lnum	scripts.vim	/^      let lnum = lnum + 1$/;"	v
lnum	scripts.vim	/^    let lnum = 1$/;"	v
loaded_VCSCommand	plugin/vcscommand.vim	/^let loaded_VCSCommand = 1$/;"	v
loaded_VCSCommand	plugin/vcscommand.vim	/^let loaded_VCSCommand = 2$/;"	v
loaded_ddldbl	plugin/ddldbl.vim	/^let loaded_ddldbl = 1$/;"	v
loaded_gzip	plugin/gzip.vim	/^let loaded_gzip = 1$/;"	v
loaded_less	macros/less.vim	/^let loaded_less = 1$/;"	v
loaded_libList	plugin/libList.vim	/^let loaded_libList=1$/;"	v
loaded_matchit	macros/matchit.vim	/^let loaded_matchit = 1$/;"	v
loaded_matchit	plugin/matchit.vim	/^let loaded_matchit = 1$/;"	v
loaded_matchit	plugin/plugin/matchit.vim	/^let loaded_matchit = 1$/;"	v
loaded_nerd_comments	plugin/NERD_commenter.vim	/^let loaded_nerd_comments = 1$/;"	v
loaded_nerd_tree	plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_rrhelper	plugin/rrhelper.vim	/^let loaded_rrhelper = 1$/;"	v
loaded_spellfile_plugin	plugin/spellfile.vim	/^let loaded_spellfile_plugin = 1$/;"	v
loaded_taglist	plugin/taglist.vim	/^            let loaded_taglist = 'no'$/;"	v
loaded_taglist	plugin/taglist.vim	/^        let loaded_taglist = 'no'$/;"	v
loaded_taglist	plugin/taglist.vim	/^    let loaded_taglist = 'fast_load_done'$/;"	v
loaded_taglist	plugin/taglist.vim	/^let loaded_taglist = 'available'$/;"	v
loaded_vimExplorer	plugin/vimExplorer.vim	/^    let loaded_vimExplorer = 1$/;"	v
login	ftplugin/changelog.vim	/^          let login = strpart(login, 0, newline)$/;"	v
login	ftplugin/changelog.vim	/^        let login = 'unknown'$/;"	v
login	ftplugin/changelog.vim	/^      let login = system('whoami')$/;"	v
lookup_buf	vimsh.py	/^def lookup_buf( _filename ):$/;"	f
lua_subversion	syntax/lua.vim	/^  let lua_subversion = 0$/;"	v
lua_subversion	syntax/lua.vim	/^  let lua_subversion = 1$/;"	v
lua_version	syntax/lua.vim	/^  let lua_version = 5$/;"	v
m	tutor/tutor.cs	/^POZNÁMKA: Zapamatuj si, ¾e by ses mìl uèit pou¾íváním, ne zapamatováním.$/;"	v
main	c-support/codesnippets/main.c	/^main ( int argc, char *argv[] )$/;"	f
main	c-support/codesnippets/main.cc	/^main ( int argc, char *argv[] )$/;"	f
main	colors/marklar.vim	/^    function! s:main()$/;"	f
main	ftplugin/latex-suite/outline.py	/^def main(fname, label_prefix):$/;"	f
main_syntax	syntax/aspperl.vim	/^  let main_syntax = 'perlscript'$/;"	v
main_syntax	syntax/aspvbs.vim	/^  let main_syntax = 'aspvbs'$/;"	v
main_syntax	syntax/css.vim	/^  let main_syntax = 'css'$/;"	v
main_syntax	syntax/eruby.vim	/^  let main_syntax = 'eruby'$/;"	v
main_syntax	syntax/fvwm2m4.vim	/^  let main_syntax = 'fvwm2m4'$/;"	v
main_syntax	syntax/groovy.vim	/^  let main_syntax='groovy'$/;"	v
main_syntax	syntax/gsp.vim	/^  let main_syntax = 'gsp'$/;"	v
main_syntax	syntax/haml.vim	/^  let main_syntax = 'haml'$/;"	v
main_syntax	syntax/html.vim	/^  let main_syntax = 'html'$/;"	v
main_syntax	syntax/htmlcheetah.vim	/^  let main_syntax = 'html'$/;"	v
main_syntax	syntax/htmldjango.vim	/^  let main_syntax = 'html'$/;"	v
main_syntax	syntax/htmlm4.vim	/^  let main_syntax='htmlm4'$/;"	v
main_syntax	syntax/htmlos.vim	/^  let main_syntax = 'htmlos'$/;"	v
main_syntax	syntax/java.vim	/^  let main_syntax='java'$/;"	v
main_syntax	syntax/javascript.vim	/^  let main_syntax = 'javascript'$/;"	v
main_syntax	syntax/jsp.vim	/^  let main_syntax = 'jsp'$/;"	v
main_syntax	syntax/lite.vim	/^  let main_syntax = 'lite'$/;"	v
main_syntax	syntax/m4.vim	/^  let main_syntax='m4'$/;"	v
main_syntax	syntax/mason.vim	/^	let main_syntax = 'mason'$/;"	v
main_syntax	syntax/msql.vim	/^  let main_syntax = 'msql'$/;"	v
main_syntax	syntax/ora.vim	/^  let main_syntax = 'ora'$/;"	v
main_syntax	syntax/pdf.vim	/^    let main_syntax = 'pdf'$/;"	v
main_syntax	syntax/php.vim	/^  let main_syntax = 'php'$/;"	v
main_syntax	syntax/plp.vim	/^  let main_syntax = 'perlscript'$/;"	v
main_syntax	syntax/pymol.vim	/^let main_syntax = 'pymol'$/;"	v
main_syntax	syntax/smarty.vim	/^  let main_syntax = 'smarty'$/;"	v
main_syntax	syntax/smil.vim	/^  let main_syntax = 'smil'$/;"	v
main_syntax	syntax/spyce.vim	/^  let main_syntax='spyce'$/;"	v
main_syntax	syntax/texinfo.vim	/^  let main_syntax = 'texinfo'$/;"	v
main_syntax	syntax/tf.vim	/^  let main_syntax = 'tf'$/;"	v
main_syntax	syntax/tpp.vim	/^  let main_syntax = 'tpp'$/;"	v
main_syntax	syntax/uc.vim	/^  let main_syntax='uc'$/;"	v
main_syntax	syntax/webmacro.vim	/^  let main_syntax = 'webmacro'$/;"	v
main_syntax	syntax/wml.vim	/^  let main_syntax = 'wml'$/;"	v
make-prerequisite-c	c-support/codesnippets/Makefile	/^define	make-prerequisite-c$/;"	m
make-prerequisite-cplusplus	c-support/codesnippets/Makefile	/^define	make-prerequisite-cplusplus$/;"	m
maplink	doc/vim2html.pl	/^sub maplink$/;"	s
maplocalleader	ftplugin/c.vim	/^  let maplocalleader  = g:C_MapLeader$/;"	v
maplocalleader	ftplugin/sh.vim	/^  let maplocalleader  = g:BASH_MapLeader$/;"	v
mappingInfo	plugin/vcscvs.vim	/^let mappingInfo = [$/;"	v
matchparen	plugin/matchparen.vim	/^augroup matchparen$/;"	a
mel_minlines	syntax/mel.vim	/^  let mel_minlines=15$/;"	v
menuRoot	plugin/NERD_commenter.vim	/^        let menuRoot = '&Plugin.&comment'$/;"	v
menuRoot	plugin/NERD_commenter.vim	/^        let menuRoot = '&comment'$/;"	v
menuRoot	plugin/NERD_commenter.vim	/^        let menuRoot = 'comment'$/;"	v
menuRoot	plugin/NERD_commenter.vim	/^    let menuRoot = ""$/;"	v
menutrans_help_dialog	lang/menu_hu_hu.iso_8859-2.vim	/^let menutrans_help_dialog = "Írd be a kívánt szót vagy parancsot:\\n\\n A szövegbeviteli parancsok elé írj i_-t (pl.: i_CTRL-X)\\nA sorszerkeszõ parancsok elé c_-t (pl.: c_<Del>)\\nA változókat a ' jellel vedd körül (pl.: 'shiftwidth')"$/;"	v
menutrans_help_dialog	lang/menu_hu_hu.utf-8.vim	/^let menutrans_help_dialog = "Ãrd be a kÃ­vÃ¡nt szÃ³t vagy parancsot:\\n\\n A szÃ¶vegbeviteli parancsok elÃ© Ã­rj i_-t (pl.: i_CTRL-X)\\nA sorszerkeszÅ parancsok elÃ© c_-t (pl.: c_<Del>)\\nA vÃ¡ltozÃ³kat a ' jellel vedd kÃ¶rÃ¼l (pl.: 'shiftwidth')"$/;"	v
menutrans_help_dialog	lang/menu_nl_nl.latin1.vim	/^let menutrans_help_dialog = "Typ een commando of woord om help voor te vinden:\\n\\nVoeg i_ in voor Input mode commandos (bijv. i_CTRL-X)\\nVoeg c_ in voor een commando-regel edit commando (bijv. c_<Del>)\\nVoeg ' in \\voor een optie naam (bijv. 'shiftwidth')"$/;"	v
menutrans_help_dialog	lang/menu_pl_pl.iso_8859-2.vim	/^let menutrans_help_dialog = "Wprowad¼ komendê lub s³owo, aby otrzymaæ pomoc o:\\n\\nPrzedrostek i_ oznacza komendê trybu Wprowadzania (np. i_CTRL-X)\\nPrzedrostek c_ oznacza komendê edycji wiersza komend (np. c_<Del>)\\nPrzedrostek ' oznacza nazwê opcji (np. 'shiftwidth')"$/;"	v
menutrans_help_dialog	lang/menu_pl_pl.utf-8.vim	/^let menutrans_help_dialog = "WprowadÅº komendÄ lub sÅowo, aby otrzymaÄ pomoc o:\\n\\nPrzedrostek i_ oznacza komendÄ trybu Wprowadzania (np. i_CTRL-X)\\nPrzedrostek c_ oznacza komendÄ edycji wiersza komend (np. c_<Del>)\\nPrzedrostek ' oznacza nazwÄ opcji (np. 'shiftwidth')"$/;"	v
menutrans_help_dialog	lang/menu_polish_poland.1250.vim	/^let menutrans_help_dialog = "Wprowad komendê lub s³owo, aby otrzymaæ pomoc o:\\n\\nPrzedrostek i_ oznacza komendê trybu Wprowadzania (np. i_CTRL-X)\\nPrzedrostek c_ oznacza komendê edycji wiersza komend (np. c_<Del>)\\nPrzedrostek ' oznacza nazwê opcji (np. 'shiftwidth')"$/;"	v
menutrans_help_dialog	lang/menu_sr_yu.ascii.vim	/^let menutrans_help_dialog = "Unesite naredbu ili rec cije pojasnjenje trazite:\\n\\nDodajte i_ za naredbe unosa (npr. i_CTRL-X)\\nDodajte c_ za naredbe komandnog rezima (npr. s_<Del>)\\nDodajte ' za imena opcija (npr. 'shiftwidth')"$/;"	v
menutrans_help_dialog	lang/menu_sr_yu.iso_8859-2.vim	/^let menutrans_help_dialog = "Unesite naredbu ili reè èije poja¹njenje tra¾ite:\\n\\nDodajte i_ za naredbe unosa (npr. i_CTRL-X)\\nDodajte c_ za naredbe komandnog re¾ima (npr. s_<Del>)\\nDodajte ' za imena opcija (npr. 'shiftwidth')"$/;"	v
menutrans_help_dialog	lang/menu_sr_yu.iso_8859-5.vim	/^let menutrans_help_dialog = "ÃÝÕáØâÕ ÝÐàÕÔÑã ØÛØ àÕç çØøÕ ßÞøÐèúÕúÕ âàÐÖØâÕ:\\n\\n´ÞÔÐøâÕ i_ ×Ð ÝÐàÕÔÑÕ ãÝÞáÐ (Ýßà. i_CTRL-X)\\n´ÞÔÐøâÕ c_ ×Ð ÝÐàÕÔÑÕ ÚÞÜÐÝÔÝÞÓ àÕÖØÜÐ (Ýßà. á_<Del>)\\n´ÞÔÐøâÕ ' ×Ð ØÜÕÝÐ ÞßæØøÐ (Ýßà. 'shiftwidth')"$/;"	v
menutrans_help_dialog	lang/menu_sr_yu.utf-8.vim	/^let menutrans_help_dialog = "Ð£Ð½ÐµÑÐ¸ÑÐµ Ð½Ð°ÑÐµÐ´Ð±Ñ Ð¸Ð»Ð¸ ÑÐµÑ ÑÐ¸ÑÐµ Ð¿Ð¾ÑÐ°ÑÑÐµÑÐµ ÑÑÐ°Ð¶Ð¸ÑÐµ:\\n\\nÐÐ¾Ð´Ð°ÑÑÐµ i_ Ð·Ð° Ð½Ð°ÑÐµÐ´Ð±Ðµ ÑÐ½Ð¾ÑÐ° (Ð½Ð¿Ñ. i_CTRL-X)\\nÐÐ¾Ð´Ð°ÑÑÐµ c_ Ð·Ð° Ð½Ð°ÑÐµÐ´Ð±Ðµ ÐºÐ¾Ð¼Ð°Ð½Ð´Ð½Ð¾Ð³ ÑÐµÐ¶Ð¸Ð¼Ð° (Ð½Ð¿Ñ. Ñ_<Del>)\\nÐÐ¾Ð´Ð°ÑÑÐµ ' Ð·Ð° Ð¸Ð¼ÐµÐ½Ð° Ð¾Ð¿ÑÐ¸ÑÐ° (Ð½Ð¿Ñ. 'shiftwidth')"$/;"	v
menutrans_help_dialog	lang/menu_sv_se.latin1.vim	/^let menutrans_help_dialog = "Skriv in ett kommando eller ord som du vill söka hjälp på:\\n\\nBörja med i_ för infogninglägeskommandon (t.ex. i_CTRL-X)\\nBörja med c_ för kommandoradredigeringskommandon (t.ex. c_<Del>)\\nBörja med ' för ett inställningsnamn (t.ex. 'shiftwidth')"$/;"	v
menutrans_help_dialog	lang/menu_uk_ua.cp1251.vim	/^let menutrans_help_dialog = "Âêàæ³òü êîìàíäó àáî ñëîâî äëÿ ïîøóêó:\\n\\nÄîäàéòå i_ äëÿ êîìàíä ðåæèìó âñòàâêè (íàïð. i_CTRL-X)\\nÄîäàéòå i_ äëÿ êîìàíäíîãî ðåæèìó (íàïð. ñ_<Del>)\\nÄîäàéòå ' äëÿ ïîçíà÷åííÿ íàçâè îïö³¿ (íàïð. 'shiftwidth')"$/;"	v
menutrans_help_dialog	lang/menu_uk_ua.koi8-u.vim	/^let menutrans_help_dialog = "÷ËÁÖ¦ÔØ ËÏÍÁÎÄÕ ÁÂÏ ÓÌÏ×Ï ÄÌÑ ÐÏÛÕËÕ:\\n\\näÏÄÁÊÔÅ i_ ÄÌÑ ËÏÍÁÎÄ ÒÅÖÉÍÕ ×ÓÔÁ×ËÉ (ÎÁÐÒ. i_CTRL-X)\\näÏÄÁÊÔÅ i_ ÄÌÑ ËÏÍÁÎÄÎÏÇÏ ÒÅÖÉÍÕ (ÎÁÐÒ. Ó_<Del>)\\näÏÄÁÊÔÅ ' ÄÌÑ ÐÏÚÎÁÞÅÎÎÑ ÎÁÚ×É ÏÐÃ¦§ (ÎÁÐÒ. 'shiftwidth')"$/;"	v
menutrans_no_file	lang/menu_hu_hu.iso_8859-2.vim	/^let menutrans_no_file = "[Nincs file]"$/;"	v
menutrans_no_file	lang/menu_hu_hu.utf-8.vim	/^let menutrans_no_file = "[Nincs file]"$/;"	v
menutrans_no_file	lang/menu_nl_nl.latin1.vim	/^let menutrans_no_file = "[Geen Bestand]"$/;"	v
menutrans_no_file	lang/menu_pl_pl.iso_8859-2.vim	/^let menutrans_no_file = "[Brak pliku]"$/;"	v
menutrans_no_file	lang/menu_pl_pl.utf-8.vim	/^let menutrans_no_file = "[Brak pliku]"$/;"	v
menutrans_no_file	lang/menu_polish_poland.1250.vim	/^let menutrans_no_file = "[Brak pliku]"$/;"	v
menutrans_no_file	lang/menu_ru_ru.koi8-r.vim	/^let menutrans_no_file = "[îÅÔ ÆÁÊÌÁ]"$/;"	v
menutrans_no_file	lang/menu_ru_ru.vim	/^let menutrans_no_file = "[ÐÐµÑ ÑÐ°Ð¹Ð»Ð°]"$/;"	v
menutrans_no_file	lang/menu_sr_yu.ascii.vim	/^let menutrans_no_file = "[Nema datoteke]"$/;"	v
menutrans_no_file	lang/menu_sr_yu.iso_8859-2.vim	/^let menutrans_no_file = "[Nema datoteke]"$/;"	v
menutrans_no_file	lang/menu_sr_yu.iso_8859-5.vim	/^let menutrans_no_file = "[½ÕÜÐ ÔÐâÞâÕÚÕ]"$/;"	v
menutrans_no_file	lang/menu_sr_yu.utf-8.vim	/^let menutrans_no_file = "[ÐÐµÐ¼Ð° Ð´Ð°ÑÐ¾ÑÐµÐºÐµ]"$/;"	v
menutrans_no_file	lang/menu_sv_se.latin1.vim	/^let menutrans_no_file = "[Ingen fil]"$/;"	v
menutrans_no_file	lang/menu_uk_ua.cp1251.vim	/^let menutrans_no_file = "[Íåìàº\\ Ôàéëà]"$/;"	v
menutrans_no_file	lang/menu_uk_ua.koi8-u.vim	/^let menutrans_no_file = "[îÅÍÁ¤\\ æÁÊÌÁ]"$/;"	v
menutrans_no_file	lang/menu_vi_vn.vim	/^let menutrans_no_file = "[khÃ´ng cÃ³ táº­p tin]"$/;"	v
mfplain_mp_macros	syntax/mp.vim	/^  let mfplain_mp_macros = 0 " Set this to '1' to include these macro names$/;"	v
modr	tutor/tutor.cs	/^      3)  Fialky jsou modré,$/;"	v
mupad_cmdextversion	syntax/mupad.vim	/^  let mupad_cmdextversion = 2$/;"	v
mv_DEtools	syntax/maple.vim	/^  let mv_DEtools    = 1$/;"	v
mv_Galois	syntax/maple.vim	/^  let mv_Galois     = 1$/;"	v
mv_GaussInt	syntax/maple.vim	/^  let mv_GaussInt   = 1$/;"	v
mv_LREtools	syntax/maple.vim	/^  let mv_LREtools   = 1$/;"	v
mv_combinat	syntax/maple.vim	/^  let mv_combinat   = 1$/;"	v
mv_combstruct	syntax/maple.vim	/^  let mv_combstruct = 1$/;"	v
mv_difforms	syntax/maple.vim	/^  let mv_difforms   = 1$/;"	v
mv_finance	syntax/maple.vim	/^  let mv_finance    = 1$/;"	v
mv_genfunc	syntax/maple.vim	/^  let mv_genfunc    = 1$/;"	v
mv_geometry	syntax/maple.vim	/^  let mv_geometry   = 1$/;"	v
mv_grobner	syntax/maple.vim	/^  let mv_grobner    = 1$/;"	v
mv_group	syntax/maple.vim	/^  let mv_group      = 1$/;"	v
mv_inttrans	syntax/maple.vim	/^  let mv_inttrans   = 1$/;"	v
mv_liesymm	syntax/maple.vim	/^  let mv_liesymm    = 1$/;"	v
mv_linalg	syntax/maple.vim	/^  let mv_linalg     = 1$/;"	v
mv_logic	syntax/maple.vim	/^  let mv_logic      = 1$/;"	v
mv_networks	syntax/maple.vim	/^  let mv_networks   = 1$/;"	v
mv_numapprox	syntax/maple.vim	/^  let mv_numapprox  = 1$/;"	v
mv_numtheory	syntax/maple.vim	/^  let mv_numtheory  = 1$/;"	v
mv_orthopoly	syntax/maple.vim	/^  let mv_orthopoly  = 1$/;"	v
mv_padic	syntax/maple.vim	/^  let mv_padic      = 1$/;"	v
mv_plots	syntax/maple.vim	/^  let mv_plots      = 1$/;"	v
mv_plottools	syntax/maple.vim	/^  let mv_plottools  = 1$/;"	v
mv_powseries	syntax/maple.vim	/^  let mv_powseries  = 1$/;"	v
mv_process	syntax/maple.vim	/^  let mv_process    = 1$/;"	v
mv_simplex	syntax/maple.vim	/^  let mv_simplex    = 1$/;"	v
mv_stats	syntax/maple.vim	/^  let mv_stats      = 1$/;"	v
mv_student	syntax/maple.vim	/^  let mv_student    = 1$/;"	v
mv_sumtools	syntax/maple.vim	/^  let mv_sumtools   = 1$/;"	v
mv_tensor	syntax/maple.vim	/^  let mv_tensor     = 1$/;"	v
mv_totorder	syntax/maple.vim	/^  let mv_totorder   = 1$/;"	v
n	syntax/xpm.vim	/^	 let n = 1		" n = color index$/;"	v
n	syntax/xpm.vim	/^	 let n = n + 1$/;"	v
n	syntax/xpm.vim	/^let n      = 0$/;"	v
n	syntax/xpm2.vim	/^	let n = 1			" n = color index$/;"	v
n	syntax/xpm2.vim	/^	let n = n + 1$/;"	v
n	syntax/xpm2.vim	/^  let n      = 0$/;"	v
n	tutor/tutor.cs	/^  1. Pro vlo¾ení textu, který byl smazán, napi¹  p  . To vlo¾í smazaný text$/;"	v
name	ftplugin/changelog.vim	/^              let name = strpart(name, 0, amp) . toupper(login[0]) .$/;"	v
name	ftplugin/changelog.vim	/^              let name = strpart(name, 0, comma)$/;"	v
name	ftplugin/changelog.vim	/^            let name = substitute(line,'^\\%([^:]*:\\)\\{4}\\([^:]*\\):.*$','\\1','')$/;"	v
name	ftplugin/changelog.vim	/^          let name = $NAME$/;"	v
name	ftplugin/changelog.vim	/^          let name = toupper(login[0]) . strpart(login, 1)$/;"	v
napsal	tutor/tutor.cs	/^Poznámka: Pokud si nìkdy nejsi jist nìèím, co jsi napsal, stlaè <ESC> pro$/;"	v
netrw#ErrorMsg	autoload/netrw.vim	/^fun! netrw#ErrorMsg(level,msg,errnum)$/;"	f
netrw#Explore	autoload/netrw.vim	/^fun! netrw#Explore(indx,dosplit,style,...)$/;"	f
netrw#LocalBrowseCheck	autoload/netrw.vim	/^fun! netrw#LocalBrowseCheck(dirname)$/;"	f
netrw#NetRead	autoload/netrw.vim	/^fun! netrw#NetRead(mode,...)$/;"	f
netrw#NetSource	autoload/netrw.vim	/^fun! netrw#NetSource(...)$/;"	f
netrw#NetWrite	autoload/netrw.vim	/^fun! netrw#NetWrite(...) range$/;"	f
netrw#NetrwBrowseX	autoload/netrw.vim	/^fun! netrw#NetrwBrowseX(fname,remote)$/;"	f
netrw#NetrwClean	autoload/netrw.vim	/^fun! netrw#NetrwClean(sys)$/;"	f
netrw#NetrwObtain	autoload/netrw.vim	/^fun! netrw#NetrwObtain(islocal,fname,...)$/;"	f
netrw#NetrwRestorePosn	autoload/netrw.vim	/^fun! netrw#NetrwRestorePosn(...)$/;"	f
netrw#NetrwSavePosn	autoload/netrw.vim	/^fun! netrw#NetrwSavePosn()$/;"	f
netrw#RFC2396	autoload/netrw.vim	/^fun! netrw#RFC2396(fname)$/;"	f
netrwFileHandlers#Invoke	autoload/netrwFileHandlers.vim	/^fun! netrwFileHandlers#Invoke(exten,fname)$/;"	f
netrwSettings#NetrwSettings	autoload/netrwSettings.vim	/^fun! netrwSettings#NetrwSettings()$/;"	f
new_buf	vimsh.py	/^def new_buf( _filename ):$/;"	f
new_changelog_entry	ftplugin/changelog.vim	/^  function! s:new_changelog_entry()$/;"	f
new_prompt	vimsh.py	/^    def new_prompt( self ):$/;"	m	class:vimsh
newline	ftplugin/changelog.vim	/^        let newline = stridx(hostname, "\\n")$/;"	v
newline	ftplugin/changelog.vim	/^        let newline = stridx(login, "\\n")$/;"	v
nextBufferName	plugin/NERD_tree.vim	/^function! s:nextBufferName()$/;"	f
notag	ftplugin/pdf.vim	/^function! s:notag()$/;"	f
nqc_minlines	syntax/nqc.vim	/^    let nqc_minlines = 15	    " mostly for () constructs$/;"	v
nqc_minlines	syntax/nqc.vim	/^    let nqc_minlines = 50	    " #if 0 constructs can be long$/;"	v
oneline_comments	syntax/spup.vim	/^    let oneline_comments = 2$/;"	v
openBookmark	plugin/NERD_tree.vim	/^function! s:openBookmark(name)$/;"	f
openEntrySplit	plugin/NERD_tree.vim	/^function! s:openEntrySplit(vertical, forceKeepWindowOpen)$/;"	f
openExplorer	plugin/NERD_tree.vim	/^function! s:openExplorer()$/;"	f
openInNewTab	plugin/NERD_tree.vim	/^function! s:openInNewTab(stayCurrentTab)$/;"	f
openNodeRecursively	plugin/NERD_tree.vim	/^function! s:openNodeRecursively()$/;"	f
open_changelog	ftplugin/changelog.vim	/^  function! s:open_changelog()$/;"	f
optionalblock	indent/cobol.vim	/^function! s:optionalblock(lnum,ind,blocks,clauses)$/;"	f
options	compiler/tex.vim	/^		let options = ''$/;"	v
options	compiler/tex.vim	/^		let options = '--src-specials'$/;"	v
optwin	optwin.vim	/^augroup optwin$/;"	a
other_mf_macros	syntax/mf.vim	/^  let other_mf_macros = 1 " Set this to '0' if your code gets too colourful$/;"	v
other_mf_macros	syntax/mp.vim	/^let other_mf_macros = 0 " cmbase.mf, logo.mf, ... neither$/;"	v
other_mp_macros	syntax/mp.vim	/^  let other_mp_macros = 1 " Set this to '0' if your source gets too colourful$/;"	v
p	macros/less.vim	/^map p %$/;"	m
page_output	vimsh.py	/^    def page_output( self, _add_new_line = 0 ):$/;"	m	class:vimsh
paste#Paste	autoload/paste.vim	/^  func! paste#Paste()$/;"	f
paste#paste_cmd	autoload/paste.vim	/^  let paste#paste_cmd = {'n': ":call paste#Paste()<CR>"}$/;"	v
paste#paste_cmd	autoload/paste.vim	/^  let paste#paste_cmd = {'n': "\\"=@+.'xy'<CR>gPFx\\"_2x"}$/;"	v
paste#paste_cmd	autoload/paste.vim	/^  let paste#paste_cmd['i'] = 'x<BS><Esc>' . paste#paste_cmd['n'] . 'gi'$/;"	v
paste#paste_cmd	autoload/paste.vim	/^  let paste#paste_cmd['i'] = 'x<Esc>' . paste#paste_cmd['n'] . '"_s'$/;"	v
paste#paste_cmd	autoload/paste.vim	/^  let paste#paste_cmd['v'] = '"-c<Esc>' . paste#paste_cmd['n']$/;"	v
paste#paste_cmd	autoload/paste.vim	/^  let paste#paste_cmd['v'] = '"-c<Esc>gix<Esc>' . paste#paste_cmd['n'] . '"_x'$/;"	v
perlpath	ftplugin/perl.vim	/^	    let perlpath = system("perl -e 'print join(q\/,\/,@INC)'")$/;"	v
perlpath	ftplugin/perl.vim	/^	    let perlpath = system('perl -e "print join(q\/,\/,@INC)"')$/;"	v
perlpath	ftplugin/perl.vim	/^	let perlpath = ".,,"$/;"	v
perlpath	ftplugin/perl.vim	/^	let perlpath = substitute(perlpath,',.$',',,','')$/;"	v
permute_suffixes	syntax/hostconf.vim	/^function s:permute_suffixes(list)$/;"	f
pfmain_syntax_init	syntax/pfmain.vim	/^		let pfmain_syntax_init = 1$/;"	v
php_alt_assignByReference	syntax/php.vim	/^    let php_alt_assignByReference = 1$/;"	v
php_alt_comparisons	syntax/php.vim	/^    let php_alt_comparisons = 1$/;"	v
php_parent_error_close	syntax/php.vim	/^  let php_parent_error_close=1$/;"	v
php_parent_error_open	syntax/php.vim	/^  let php_parent_error_open=1$/;"	v
php_special_functions	syntax/php.vim	/^    let php_special_functions = 1$/;"	v
php_sync_method	indent/php.vim	/^let php_sync_method = 0$/;"	v
php_sync_method	syntax/php.vim	/^    let php_sync_method=-1$/;"	v
php_sync_method	syntax/php.vim	/^    let php_sync_method=php_minlines$/;"	v
phpcomplete#CompletePHP	autoload/phpcomplete.vim	/^function! phpcomplete#CompletePHP(findstart, base)$/;"	f
phpcomplete#GetClassContents	autoload/phpcomplete.vim	/^function! phpcomplete#GetClassContents(file, name) " {{{$/;"	f
phpcomplete#GetClassLocation	autoload/phpcomplete.vim	/^function! phpcomplete#GetClassLocation(classname) " {{{$/;"	f
phpcomplete#GetClassName	autoload/phpcomplete.vim	/^function! phpcomplete#GetClassName(scontext) " {{{$/;"	f
phpcomplete#LoadData	autoload/phpcomplete.vim	/^function! phpcomplete#LoadData() " {{{$/;"	f
pipe_read	vimsh.py	/^    def pipe_read( self, _pipe, _minimum_to_read ):$/;"	m	class:vimsh
plain_mf_macros	syntax/mf.vim	/^  let plain_mf_macros = 1 " Set this to '0' if your source gets too colourful$/;"	v
plain_mf_macros	syntax/mp.vim	/^let plain_mf_macros = 0 " plain.mf has no special meaning for MetaPost$/;"	v
plain_mp_macros	syntax/mp.vim	/^  let plain_mp_macros = 1 " Set this to '0' if your source gets too colourful$/;"	v
polecenia	tutor/tutor.pl	/^  polecenia:$/;"	l
position_cursor	ftplugin/changelog.vim	/^  function! s:position_cursor()$/;"	f
postscr_level	syntax/postscr.vim	/^  let postscr_level = 2$/;"	v
ppwiz_highlight_defs	syntax/ppwiz.vim	/^    let ppwiz_highlight_defs = 1$/;"	v
ppwiz_with_html	syntax/ppwiz.vim	/^    let ppwiz_with_html = 1$/;"	v
prevgood	indent/bst.vim	/^function! s:prevgood(lnum)$/;"	f
prevgood	indent/cobol.vim	/^function! s:prevgood(lnum)$/;"	f
previewNode	plugin/NERD_tree.vim	/^function! s:previewNode(openNewWin)$/;"	f
prevnonblanknoncomment	indent/css.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
prevnonblanknoncomment	indent/ld.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
prevnonblanknoncomment	indent/tcl.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
print_lines	vimsh.py	/^    def print_lines( self, _lines, _buffer ):$/;"	m	class:vimsh
print_opts	colors/marklar.vim	/^        function! s:print_opts(...)$/;"	f
process_read	vimsh.py	/^    def process_read( self, _lines ):$/;"	m	class:vimsh
projects	doc/Makefile	/^projects = latex-suite latex-suite-quickstart$/;"	m
promptToDelBuffer	nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
promptToDelBuffer	plugin/NERD_tree.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
putCursorInTreeWin	plugin/NERD_tree.vim	/^function! s:putCursorInTreeWin()$/;"	f
putCursorOnBookmarkTable	plugin/NERD_tree.vim	/^function! s:putCursorOnBookmarkTable()$/;"	f
python_highlight_builtins	syntax/python.vim	/^  let python_highlight_builtins = 1$/;"	v
python_highlight_exceptions	syntax/python.vim	/^  let python_highlight_exceptions = 1$/;"	v
python_highlight_numbers	syntax/python.vim	/^  let python_highlight_numbers = 1$/;"	v
python_highlight_space_errors	syntax/python.vim	/^  let python_highlight_space_errors = 1$/;"	v
pythoncomplete#Complete	autoload/pythoncomplete.vim	/^function! pythoncomplete#Complete(findstart, base)$/;"	f
q	macros/hanoi/hanoi.vim	/^map q tllD$/;"	m
q	macros/less.vim	/^noremap q :q<CR>$/;"	m
r	macros/less.vim	/^noremap <script> r <C-L><SID>L$/;"	m
re	ftplugin/fortran_codecomplete.vim	/^import re$/;"	m
read	vimsh.py	/^    def read( self, _buffer ):$/;"	m	class:vimsh
readTagFile	doc/vim2html.pl	/^sub readTagFile$/;"	s
refreshCurrent	plugin/NERD_tree.vim	/^function! s:refreshCurrent()$/;"	f
refreshRoot	plugin/NERD_tree.vim	/^function! s:refreshRoot()$/;"	f
remove_buf	vimsh.py	/^def remove_buf( _filename ):$/;"	f
remove_continuation	indent/make.vim	/^function s:remove_continuation(line)$/;"	f
renderBookmarks	plugin/NERD_tree.vim	/^function! s:renderBookmarks()$/;"	f
renderView	plugin/NERD_tree.vim	/^function! s:renderView()$/;"	f
renderViewSavingPosition	plugin/NERD_tree.vim	/^function! s:renderViewSavingPosition()$/;"	f
repeat	ftplugin/cobol.vim	/^function! s:repeat(str,count)$/;"	f
restoreScreenState	plugin/NERD_tree.vim	/^function! s:restoreScreenState()$/;"	f
revealBookmark	plugin/NERD_tree.vim	/^function! s:revealBookmark(name)$/;"	f
rgb	colors/desert256.vim	/^    fun <SID>rgb(rgb)$/;"	f
rgb	colors/jellybeans.vim	/^fun! s:rgb(rgb)$/;"	f
rgb	colors/summerfruit256.vim	/^    fun <SID>rgb(rgb)$/;"	f
rgb	colors/wombat256.vim	/^fun <SID>rgb(rgb)$/;"	f
rgb_color	colors/desert256.vim	/^    fun <SID>rgb_color(x, y, z)$/;"	f
rgb_color	colors/jellybeans.vim	/^fun! s:rgb_color(x, y, z)$/;"	f
rgb_color	colors/summerfruit256.vim	/^    fun <SID>rgb_color(x, y, z)$/;"	f
rgb_color	colors/wombat256.vim	/^fun <SID>rgb_color(x, y, z)$/;"	f
rgb_level	colors/desert256.vim	/^    fun <SID>rgb_level(n)$/;"	f
rgb_level	colors/jellybeans.vim	/^fun! s:rgb_level(n)$/;"	f
rgb_level	colors/summerfruit256.vim	/^    fun <SID>rgb_level(n)$/;"	f
rgb_level	colors/wombat256.vim	/^fun <SID>rgb_level(n)$/;"	f
rgb_number	colors/desert256.vim	/^    fun <SID>rgb_number(x)$/;"	f
rgb_number	colors/jellybeans.vim	/^fun! s:rgb_number(x)$/;"	f
rgb_number	colors/summerfruit256.vim	/^    fun <SID>rgb_number(x)$/;"	f
rgb_number	colors/wombat256.vim	/^fun <SID>rgb_number(x)$/;"	f
rmfilters	ftplugin/latex-suite/bibtools.py	/^    def rmfilters(self):$/;"	m	class:BibFile
rmsortfields	ftplugin/latex-suite/bibtools.py	/^    def rmsortfields(self):$/;"	m	class:BibFile
ruby_minlines	syntax/ruby.vim	/^    let ruby_minlines = 50$/;"	v
ruby_operators	colors/herald.vim	/^let ruby_operators = 1$/;"	v
rubycomplete#Complete	autoload/rubycomplete.vim	/^function! rubycomplete#Complete(findstart, base)$/;"	f
rubycomplete#Init	autoload/rubycomplete.vim	/^function! rubycomplete#Init()$/;"	f
s	syntax/xpm.vim	/^	 let s = escape(s, '\/\\*^$.~[]')$/;"	v
s	syntax/xpm.vim	/^   let s = matchstr(getline(i), '".\\{-1,}"')$/;"	v
s	syntax/xpm2.vim	/^	let s = escape(s, '\/\\*^$.~[]')$/;"	v
s	syntax/xpm2.vim	/^	let s = substitute(s, "[ \\t][ \\t]*", "\\\\\\\\s\\\\\\\\+", "g")$/;"	v
s	syntax/xpm2.vim	/^      let s = matchstr(s, "^[^\\!]*")$/;"	v
s	syntax/xpm2.vim	/^    let s = getline(i)$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'article'}_optional1="vnpm"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'article'}_optional2="z" " z is note$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'article'}_required="atjy"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'article'}_retval = '@ARTICLE{' . s:key . ','."\\n"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'book'}_extras="k" " isbn$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'book'}_optional1="wd"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'book'}_optional2="vnsmz" " w is address, d is edition$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'book'}_required="aetqy" " requires author *or* editor$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'book'}_retval = '@BOOK{' . s:key . ','."\\n"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'booklet'}_optional1="ahy"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'booklet'}_optional2="wmz" " w is address$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'booklet'}_required="t"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'booklet'}_retval = '@BOOKLET{' . s:key . ','."\\n"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'conference'}_extras="k" " isbn$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'conference'}_optional1="epwoq" " w is address, q is publisher$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'conference'}_optional2="vnsmz"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'conference'}_required="atby" " b is booktitle$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'conference'}_retval = '@CONFERENCE{' . s:key . ','."\\n"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'inbook'}_extras="k" " isbn$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'inbook'}_optional1="w" " w is address$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'inbook'}_optional2="vnsudmz" " d is edition$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'inbook'}_required="aetcpqy"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'inbook'}_retval = '@INBOOK{' . s:key . ','."\\n"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'incollection'}_extras="k" " isbn$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'incollection'}_optional1="cpw" " w is address, c is chapter$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'incollection'}_optional2="evnsudmz" " d is edition$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'incollection'}_required="atbqy" " b is booktitle$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'incollection'}_retval = '@INCOLLECTION{' . s:key . ','."\\n"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'inproceedings'}_extras="k" " isbn$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'inproceedings'}_optional1="epwoq" " w is address, q is publisher$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'inproceedings'}_optional2="vnsmz"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'inproceedings'}_required="atby" " b is booktitle$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'inproceedings'}_retval = '@INPROCEEDINGS{' . s:key . ','."\\n"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'manual'}_optional1="ow"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'manual'}_optional2="admyz" " w is address$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'manual'}_required="t"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'manual'}_retval = '@MANUAL{' . s:key . ','."\\n"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'misc'}_optional1="ath"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'misc'}_optional2="myz"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'misc'}_required=""$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'misc'}_retval = '@MISC{' . s:key . ','."\\n"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'msthesis'}_optional1="w" " w is address$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'msthesis'}_optional2="umz" " u is type, w is address$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'msthesis'}_required="atry" " r is school$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'msthesis'}_retval = '@MASTERSTHESIS{' . s:key . ','."\\n"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'phdthesis'}_optional1="w" " w is address$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'phdthesis'}_optional2="umz" " u is type$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'phdthesis'}_required="atry" " r is school$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'phdthesis'}_retval = '@PHDTHESIS{' . s:key . ','."\\n"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'proceedings'}_optional1="ewo" " w is address$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'proceedings'}_optional2="vnsmqz" " q is publisher$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'proceedings'}_required="ty"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'proceedings'}_retval = '@PROCEEDINGS{' . s:key . ','."\\n"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'techreport'}_optional1="unw" " u is type, w is address$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'techreport'}_optional2="mz"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'techreport'}_required="atiy"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'techreport'}_retval = '@TECHREPORT{' . s:key . ','."\\n"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'unpublished'}_optional1="y"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'unpublished'}_optional2="m"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'unpublished'}_required="atz"$/;"	v
s:	ftplugin/latex-suite/bibtex.vim	/^let s:{'unpublished'}_retval = '@UNPUBLISHED{' . s:key . ','."\\n"$/;"	v
s:AdaBlockStart	indent/ada.vim	/^   let s:AdaBlockStart = '^\\s*\\(if\\>\\|while\\>\\|else\\>\\|elsif\\>\\|loop\\>\\|for\\>.*\\<\\(loop\\|use\\)\\>\\|declare\\>\\|begin\\>\\|type\\>.*\\<is\\>[^;]*$\\|\\(type\\>.*\\)\\=\\<record\\>\\|procedure\\>\\|function\\>\\|accept\\>\\|do\\>\\|task\\>\\|package\\>\\|project\\>\\|then\\>\\|when\\>\\|is\\>\\)'$/;"	v
s:AdaBlockStart	indent/ada.vim	/^   let s:AdaBlockStart = '^\\s*\\(if\\>\\|while\\>\\|else\\>\\|elsif\\>\\|loop\\>\\|for\\>.*\\<\\(loop\\|use\\)\\>\\|declare\\>\\|begin\\>\\|type\\>.*\\<is\\>[^;]*$\\|\\(type\\>.*\\)\\=\\<record\\>\\|procedure\\>\\|function\\>\\|accept\\>\\|do\\>\\|task\\>\\|package\\>\\|then\\>\\|when\\>\\|is\\>\\)'$/;"	v
s:AlignRegex	plugin/bash-support.vim	/^let	s:AlignRegex	= [$/;"	v
s:Aluminium	colors/two2tango.vim	/^let s:Aluminium		= ['#eeeeec', '#d3d7cf', '#babdb6',$/;"	v
s:Attribute	plugin/bash-support.vim	/^let s:Attribute                = { 'below':'', 'above':'', 'start':'', 'append':'', 'insert':'' }$/;"	v
s:Attribute	plugin/c.vim	/^let s:Attribute                = { 'below':'', 'above':'', 'start':'', 'append':'', 'insert':'' }$/;"	v
s:BASH_Active	plugin/bash-support.vim	/^let s:BASH_Active         = -1                    " state variable controlling the Bash-menus$/;"	v
s:BASH_ActualStyle	plugin/bash-support.vim	/^let s:BASH_ActualStyle					= 'default'$/;"	v
s:BASH_ActualStyleLast	plugin/bash-support.vim	/^let s:BASH_ActualStyleLast			= s:BASH_ActualStyle$/;"	v
s:BASH_Attribute	plugin/bash-support.vim	/^let s:BASH_Attribute           = {}$/;"	v
s:BASH_BASH	plugin/bash-support.vim	/^	let s:BASH_BASH					= $SHELL$/;"	v
s:BASH_BASH	plugin/bash-support.vim	/^	let s:BASH_BASH					= 'win-bash.exe'$/;"	v
s:BASH_Builtins	plugin/bash-support.vim	/^	let s:BASH_Builtins[index]	= substitute( s:BASH_Builtins[index], '&', '', '' )$/;"	v
s:BASH_Builtins	plugin/bash-support.vim	/^let s:BASH_Builtins     = s:BashBuiltins[:]$/;"	v
s:BASH_CodeSnippets	plugin/bash-support.vim	/^	let s:BASH_CodeSnippets	= s:plugin_dir.'bash-support\/codesnippets\/'$/;"	v
s:BASH_CodeSnippets	plugin/bash-support.vim	/^	let s:BASH_CodeSnippets = s:plugin_dir.'bash-support\/codesnippets\/'$/;"	v
s:BASH_Ctrl_j	plugin/bash-support.vim	/^let s:BASH_Ctrl_j								= 'on'$/;"	v
s:BASH_Debugger	plugin/bash-support.vim	/^let s:BASH_Debugger                = 'term'$/;"	v
s:BASH_DocBufferName	plugin/bash-support.vim	/^let s:BASH_DocBufferName       = "BASH_HELP"$/;"	v
s:BASH_DocHelpBufferNumber	plugin/bash-support.vim	/^let s:BASH_DocHelpBufferNumber = -1$/;"	v
s:BASH_Errorformat	plugin/bash-support.vim	/^let s:BASH_Errorformat    			= '%f:\\ %s\\ %l:\\ %m'$/;"	v
s:BASH_ExpansionCounter	plugin/bash-support.vim	/^let s:BASH_ExpansionCounter     = {}$/;"	v
s:BASH_ExpansionLimit	plugin/bash-support.vim	/^let s:BASH_ExpansionLimit      = 10$/;"	v
s:BASH_ExpansionRegex	plugin/bash-support.vim	/^let s:BASH_ExpansionRegex				 = '|?'.s:BASH_MacroNameRegex.'\\(:\\a\\)\\?|'$/;"	v
s:BASH_FileVisited	plugin/bash-support.vim	/^let s:BASH_FileVisited         = []$/;"	v
s:BASH_FormatDate	plugin/bash-support.vim	/^let s:BASH_FormatDate						= '%x'$/;"	v
s:BASH_FormatTime	plugin/bash-support.vim	/^let s:BASH_FormatTime						= '%X %Z'$/;"	v
s:BASH_FormatYear	plugin/bash-support.vim	/^let s:BASH_FormatYear						= '%Y'$/;"	v
s:BASH_GlobalTemplateDir	plugin/bash-support.vim	/^let s:BASH_GlobalTemplateDir       = fnamemodify( s:BASH_GlobalTemplateFile, ":p:h" ).'\/'$/;"	v
s:BASH_GlobalTemplateFile	plugin/bash-support.vim	/^let s:BASH_GlobalTemplateFile      = s:plugin_dir.'bash-support\/templates\/Templates'$/;"	v
s:BASH_GuiSnippetBrowser	plugin/bash-support.vim	/^let s:BASH_GuiSnippetBrowser       = 'gui'										" gui \/ commandline$/;"	v
s:BASH_GuiTemplateBrowser	plugin/bash-support.vim	/^let s:BASH_GuiTemplateBrowser      = 'gui'										" gui \/ explorer \/ commandline$/;"	v
s:BASH_LineEndCommColDefault	plugin/bash-support.vim	/^let s:BASH_LineEndCommColDefault   = 49$/;"	v
s:BASH_LoadMenus	plugin/bash-support.vim	/^let s:BASH_LoadMenus               = 'yes'$/;"	v
s:BASH_LocalTemplateDir	plugin/bash-support.vim	/^let s:BASH_LocalTemplateDir        = fnamemodify( s:BASH_LocalTemplateFile, ":p:h" ).'\/'$/;"	v
s:BASH_LocalTemplateFile	plugin/bash-support.vim	/^let s:BASH_LocalTemplateFile       = s:BASH_root_dir.'\/bash-support\/templates\/Templates'$/;"	v
s:BASH_Macro	plugin/bash-support.vim	/^let s:BASH_Macro                = {'|AUTHOR|'         : 'first name surname',$/;"	v
s:BASH_MacroCommentRegex	plugin/bash-support.vim	/^let s:BASH_MacroCommentRegex		 = '^Â§'$/;"	v
s:BASH_MacroFlag	plugin/bash-support.vim	/^let	s:BASH_MacroFlag						= {	':l' : 'lowercase'			,$/;"	v
s:BASH_MacroLineRegex	plugin/bash-support.vim	/^let s:BASH_MacroLineRegex				 = '^\\s*|'.s:BASH_MacroNameRegex.'|\\s*=\\s*\\(.*\\)'$/;"	v
s:BASH_MacroNameRegex	plugin/bash-support.vim	/^let s:BASH_MacroNameRegex        = '\\([a-zA-Z][a-zA-Z0-9_]*\\)'$/;"	v
s:BASH_Man	plugin/bash-support.vim	/^	let s:BASH_Man          = 'man'$/;"	v
s:BASH_Man	plugin/bash-support.vim	/^	let s:BASH_Man          = 'man.exe'$/;"	v
s:BASH_MenuHeader	plugin/bash-support.vim	/^let s:BASH_MenuHeader              = 'yes'$/;"	v
s:BASH_MenuVisible	plugin/bash-support.vim	/^let s:BASH_MenuVisible = 0								" state : 0 = not visible \/ 1 = visible$/;"	v
s:BASH_NonExpansionRegex	plugin/bash-support.vim	/^let s:BASH_NonExpansionRegex		 = '|'.s:BASH_MacroNameRegex.'\\(:\\a\\)\\?|'$/;"	v
s:BASH_OutputBufferName	plugin/bash-support.vim	/^let s:BASH_OutputBufferName   = "Bash-Output"$/;"	v
s:BASH_OutputBufferNumber	plugin/bash-support.vim	/^let s:BASH_OutputBufferNumber = -1$/;"	v
s:BASH_OutputGvim	plugin/bash-support.vim	/^	let s:BASH_OutputGvim   = 'vim'$/;"	v
s:BASH_OutputGvim	plugin/bash-support.vim	/^	let s:BASH_OutputGvim   = 'xterm'$/;"	v
s:BASH_Printheader	plugin/bash-support.vim	/^let s:BASH_Printheader             = "%<%f%h%m%<  %=%{strftime('%x %X')}     Page %N"$/;"	v
s:BASH_Printheader	plugin/bash-support.vim	/^let s:BASH_Printheader  = escape( s:BASH_Printheader, ' %' )$/;"	v
s:BASH_Root	plugin/bash-support.vim	/^let s:BASH_Root                    = 'B&ash.'         " the name of the root menu of this plugin$/;"	v
s:BASH_SetCounter	plugin/bash-support.vim	/^let s:BASH_SetCounter     = 0                     "$/;"	v
s:BASH_Set_Txt	plugin/bash-support.vim	/^let s:BASH_Set_Txt        = "SetOptionNumber_"$/;"	v
s:BASH_Shopt_Txt	plugin/bash-support.vim	/^let s:BASH_Shopt_Txt      = "ShoptOptionNumber_"$/;"	v
s:BASH_SyntaxCheckOptionsGlob	plugin/bash-support.vim	/^let s:BASH_SyntaxCheckOptionsGlob  = ''$/;"	v
s:BASH_TJT	plugin/bash-support.vim	/^let s:BASH_TJT									= '[ 0-9a-zA-Z_]*'$/;"	v
s:BASH_Template	plugin/bash-support.vim	/^let s:BASH_Template             = { 'default' : {} }$/;"	v
s:BASH_TemplateEndif	plugin/bash-support.vim	/^let s:BASH_TemplateEndif				 = '^==\\s*ENDIF\\s*=='$/;"	v
s:BASH_TemplateIf	plugin/bash-support.vim	/^let s:BASH_TemplateIf						 = '^==\\s*IF\\s\\+|STYLE|\\s\\+IS\\s\\+'.s:BASH_MacroNameRegex.'\\s*=='$/;"	v
s:BASH_TemplateJumpTarget1	plugin/bash-support.vim	/^let s:BASH_TemplateJumpTarget1  = '<+'.s:BASH_TJT.'+>\\|{+'.s:BASH_TJT.'+}'$/;"	v
s:BASH_TemplateJumpTarget2	plugin/bash-support.vim	/^let s:BASH_TemplateJumpTarget2  = '<-'.s:BASH_TJT.'->\\|{-'.s:BASH_TJT.'-}'$/;"	v
s:BASH_TemplateLineRegex	plugin/bash-support.vim	/^let s:BASH_TemplateLineRegex		 = '^==\\s*\\([a-zA-Z][0-9a-zA-Z'.s:BASH_TemplateNameDelimiter$/;"	v
s:BASH_TemplateLineRegex	plugin/bash-support.vim	/^let s:BASH_TemplateLineRegex		.= ']\\+\\)\\s*==\\s*\\([a-z]\\+\\s*==\\)\\?'$/;"	v
s:BASH_TemplateNameDelimiter	plugin/bash-support.vim	/^let s:BASH_TemplateNameDelimiter = '-+_,\\. '$/;"	v
s:BASH_TemplateOverwrittenMsg	plugin/bash-support.vim	/^let s:BASH_TemplateOverwrittenMsg= 'yes'$/;"	v
s:BASH_Wrapper	plugin/bash-support.vim	/^let s:BASH_Wrapper                 = s:plugin_dir.'bash-support\/scripts\/wrapper.sh'$/;"	v
s:BASH_XtermDefaults	plugin/bash-support.vim	/^	let s:BASH_XtermDefaults	= s:BASH_XtermDefaults." -geometry 80x24"$/;"	v
s:BASH_XtermDefaults	plugin/bash-support.vim	/^let s:BASH_XtermDefaults           = '-fa courier -fs 12 -geometry 80x24'$/;"	v
s:BASH_root_dir	plugin/bash-support.vim	/^		let s:BASH_root_dir	= $HOME.'\/.vim'$/;"	v
s:BASH_root_dir	plugin/bash-support.vim	/^		let s:BASH_root_dir	= g:BASH_Support_Root_Dir$/;"	v
s:BASH_root_dir	plugin/bash-support.vim	/^	let s:BASH_root_dir			= $VIM.'\\'$/;"	v
s:Background	colors/two2tango.vim	/^let s:Background    = '#212628'$/;"	v
s:BashBuiltins	plugin/bash-support.vim	/^let s:BashBuiltins  = [$/;"	v
s:BashEnvironmentVariables	plugin/bash-support.vim	/^let	s:BashEnvironmentVariables	= [$/;"	v
s:BashShopt	plugin/bash-support.vim	/^let	s:BashShopt = [$/;"	v
s:BoldStatement	colors/tabula.vim	/^  let s:BoldStatement = g:Tabula_BoldStatement$/;"	v
s:BoldStatement	colors/tabula.vim	/^let s:BoldStatement = 0$/;"	v
s:Bookmark	plugin/NERD_tree.vim	/^let s:Bookmark = {}$/;"	v
s:Browsers	browser_launcher.vim	/^			let s:Browsers[s:temp1][1] = substitute(s:temp2, "\\n$", '', '')$/;"	v
s:Browsers	browser_launcher.vim	/^	let s:Browsers = {}$/;"	v
s:Browsers	browser_launcher.vim	/^	let s:Browsers['f'] = ['firefox',  0]$/;"	v
s:Browsers	browser_launcher.vim	/^	let s:Browsers['l'] = ['lynx',     0]$/;"	v
s:Browsers	browser_launcher.vim	/^	let s:Browsers['m'] = ['mozilla',  0]$/;"	v
s:Browsers	browser_launcher.vim	/^	let s:Browsers['n'] = ['netscape', 0]$/;"	v
s:Browsers	browser_launcher.vim	/^	let s:Browsers['o'] = ['opera',    0]$/;"	v
s:Browsers	browser_launcher.vim	/^	let s:Browsers['w'] = ['w3m',      0]$/;"	v
s:BrowsersExist	browser_launcher.vim	/^			let s:BrowsersExist = substitute(s:BrowsersExist, s:temp1, '', 'g')$/;"	v
s:BrowsersExist	browser_launcher.vim	/^	let s:BrowsersExist = 'fmnolw'$/;"	v
s:Butter	colors/two2tango.vim	/^let s:Butter		= ['#fce94f', '#edd400', '#c4a000']$/;"	v
s:CFileSection	plugin/c.vim	/^let s:CFileSection	= { $/;"	v
s:C_ActualStyle	plugin/c.vim	/^let s:C_ActualStyle					= 'default'$/;"	v
s:C_ActualStyleLast	plugin/c.vim	/^let s:C_ActualStyleLast			= s:C_ActualStyle$/;"	v
s:C_Attribute	plugin/c.vim	/^let s:C_Attribute              = {}$/;"	v
s:C_C99Libs	plugin/c.vim	/^let s:C_C99Libs       = [$/;"	v
s:C_C99LibsClean	plugin/c.vim	/^let	s:C_C99LibsClean					= C_CleanDirNameList( s:C_C99Libs )$/;"	v
s:C_CComment	plugin/c.vim	/^let s:C_CComment         = '\\\/\\*.\\{-}\\*\\\/\\s*'		" C comment with trailing whitespaces$/;"	v
s:C_CCompiler	plugin/c.vim	/^	let s:C_CCompiler           = 'gcc'      " the C   compiler$/;"	v
s:C_CCompiler	plugin/c.vim	/^	let s:C_CCompiler           = 'gcc.exe'  " the C   compiler$/;"	v
s:C_CExtension	plugin/c.vim	/^let s:C_CExtension     				= 'c'                    " C file extension; everything else is C++$/;"	v
s:C_CFlags	plugin/c.vim	/^let s:C_CFlags         				= '-Wall -g -O0 -c'      " compiler flags: compile, don't optimize$/;"	v
s:C_CodeCheckExeName	plugin/c.vim	/^let s:C_CodeCheckExeName      = 'check'$/;"	v
s:C_CodeCheckIsExecutable	plugin/c.vim	/^	let s:C_CodeCheckIsExecutable	= 1$/;"	v
s:C_CodeCheckIsExecutable	plugin/c.vim	/^let s:C_CodeCheckIsExecutable	= 0$/;"	v
s:C_CodeCheckOptions	plugin/c.vim	/^let s:C_CodeCheckOptions      = '-K13'$/;"	v
s:C_CodeSnippets	plugin/c.vim	/^	let s:C_CodeSnippets   = $VIMRUNTIME.'\/c-support\/codesnippets\/'$/;"	v
s:C_CodeSnippets	plugin/c.vim	/^  let s:C_CodeSnippets   = s:plugin_dir.'c-support\/codesnippets\/'$/;"	v
s:C_CplusCompiler	plugin/c.vim	/^	let s:C_CplusCompiler       = 'g++'      " the C++ compiler$/;"	v
s:C_CplusCompiler	plugin/c.vim	/^	let s:C_CplusCompiler       = 'g++.exe'  " the C++ compiler$/;"	v
s:C_CppComment	plugin/c.vim	/^let s:C_CppComment       = '\\\/\\\/.*$'						" C++ comment$/;"	v
s:C_Ctrl_j	plugin/c.vim	/^let s:C_Ctrl_j								 = 'on'$/;"	v
s:C_Display	plugin/c.vim	/^	let s:C_Display	= system("echo -n $DISPLAY")$/;"	v
s:C_Display	plugin/c.vim	/^	let s:C_Display        = ''$/;"	v
s:C_DocBufferName	plugin/c.vim	/^let s:C_DocBufferName       = "C_HELP"$/;"	v
s:C_DocHelpBufferNumber	plugin/c.vim	/^let s:C_DocHelpBufferNumber = -1$/;"	v
s:C_ExeExtension	plugin/c.vim	/^	let s:C_ExeExtension        = ''         " file extension for executables (leading point required)$/;"	v
s:C_ExeExtension	plugin/c.vim	/^	let s:C_ExeExtension        = '.exe'     " file extension for executables (leading point required)$/;"	v
s:C_ExpansionCounter	plugin/c.vim	/^let s:C_ExpansionCounter       = {}$/;"	v
s:C_ExpansionLimit	plugin/c.vim	/^let s:C_ExpansionLimit         = 10$/;"	v
s:C_ExpansionRegex	plugin/c.vim	/^let s:C_ExpansionRegex				 = '|?'.s:C_MacroNameRegex.'\\(:\\a\\)\\?|'$/;"	v
s:C_FileVisited	plugin/c.vim	/^let s:C_FileVisited            = []$/;"	v
s:C_ForTypes	plugin/c.vim	/^let s:C_ForTypes     = [$/;"	v
s:C_FormatDate	plugin/c.vim	/^let s:C_FormatDate						= '%x'$/;"	v
s:C_FormatTime	plugin/c.vim	/^let s:C_FormatTime						= '%X'$/;"	v
s:C_FormatYear	plugin/c.vim	/^let s:C_FormatYear						= '%Y'$/;"	v
s:C_GlobalTemplateDir	plugin/c.vim	/^let s:C_GlobalTemplateDir     = fnamemodify( s:C_GlobalTemplateFile, ":p:h" ).'\/'$/;"	v
s:C_GlobalTemplateFile	plugin/c.vim	/^let s:C_GlobalTemplateFile    = s:plugin_dir.'c-support\/templates\/Templates'$/;"	v
s:C_GuiSnippetBrowser	plugin/c.vim	/^let s:C_GuiSnippetBrowser     = 'gui'										" gui \/ commandline$/;"	v
s:C_GuiTemplateBrowser	plugin/c.vim	/^let s:C_GuiTemplateBrowser    = 'gui'										" gui \/ explorer \/ commandline$/;"	v
s:C_HlMessage	plugin/c.vim	/^let s:C_HlMessage    = ""$/;"	v
s:C_If0_Counter	plugin/c.vim	/^let s:C_If0_Counter   = 0$/;"	v
s:C_If0_Txt	plugin/c.vim	/^let s:C_If0_Txt		 		= "If0Label_"$/;"	v
s:C_IndentErrorLog	plugin/c.vim	/^	let s:C_IndentErrorLog = $HOME.'\/.indent.errorlog'$/;"	v
s:C_IndentErrorLog	plugin/c.vim	/^  let s:C_IndentErrorLog = $HOME.'.indent.errorlog'$/;"	v
s:C_LFlags	plugin/c.vim	/^let s:C_LFlags         				= '-Wall -g -O0'         " compiler flags: link   , don't optimize$/;"	v
s:C_Libs	plugin/c.vim	/^let s:C_Libs           				= '-lm'                  " libraries to use$/;"	v
s:C_LineEndCommColDefault	plugin/c.vim	/^let s:C_LineEndCommColDefault = 49$/;"	v
s:C_LoadMenus	plugin/c.vim	/^let s:C_LoadMenus      				= 'yes'$/;"	v
s:C_LocalTemplateDir	plugin/c.vim	/^let s:C_LocalTemplateDir      = fnamemodify( s:C_LocalTemplateFile, ":p:h" ).'\/'$/;"	v
s:C_LocalTemplateFile	plugin/c.vim	/^let s:C_LocalTemplateFile     = $HOME.'\/.vim\/c-support\/templates\/Templates'$/;"	v
s:C_Macro	plugin/c.vim	/^let s:C_Macro                  = {'|AUTHOR|'         : 'first name surname',$/;"	v
s:C_MacroCommentRegex	plugin/c.vim	/^let s:C_MacroCommentRegex			 = '^\\$'$/;"	v
s:C_MacroFlag	plugin/c.vim	/^let	s:C_MacroFlag								= {	':l' : 'lowercase'			,$/;"	v
s:C_MacroLineRegex	plugin/c.vim	/^let s:C_MacroLineRegex				 = '^\\s*|'.s:C_MacroNameRegex.'|\\s*=\\s*\\(.*\\)'$/;"	v
s:C_MacroNameRegex	plugin/c.vim	/^let s:C_MacroNameRegex         = '\\([a-zA-Z][a-zA-Z0-9_]*\\)'$/;"	v
s:C_MakeCmdLineArgs	plugin/c.vim	/^let s:C_MakeCmdLineArgs   = ""     " command line arguments for Run-make; initially empty$/;"	v
s:C_Man	plugin/c.vim	/^	let s:C_Man                 = 'man'      " the manual program$/;"	v
s:C_Man	plugin/c.vim	/^	let s:C_Man                 = 'man.exe'  " the manual program$/;"	v
s:C_MenuHeader	plugin/c.vim	/^let s:C_MenuHeader     				= 'yes'$/;"	v
s:C_MenuVisible	plugin/c.vim	/^let s:C_MenuVisible = 0								" state variable controlling the C-menus$/;"	v
s:C_NonExpansionRegex	plugin/c.vim	/^let s:C_NonExpansionRegex			 = '|'.s:C_MacroNameRegex.'\\(:\\a\\)\\?|'$/;"	v
s:C_ObjExtension	plugin/c.vim	/^	let s:C_ObjExtension        = '.o'       " file extension for objects (leading point required)$/;"	v
s:C_ObjExtension	plugin/c.vim	/^	let s:C_ObjExtension        = '.obj'     " file extension for objects (leading point required)$/;"	v
s:C_OutputBufferName	plugin/c.vim	/^let s:C_OutputBufferName   = "C-Output"$/;"	v
s:C_OutputBufferNumber	plugin/c.vim	/^let s:C_OutputBufferNumber = -1$/;"	v
s:C_OutputGvim	plugin/c.vim	/^let s:C_OutputGvim            = 'vim'$/;"	v
s:C_Printheader	plugin/c.vim	/^let s:C_Printheader           = "%<%f%h%m%<  %=%{strftime('%x %X')}     Page %N"$/;"	v
s:C_Printheader	plugin/c.vim	/^let s:C_Printheader  = escape( s:C_Printheader, ' %' )$/;"	v
s:C_Prototype	plugin/c.vim	/^let s:C_Prototype        = []$/;"	v
s:C_PrototypeCounter	plugin/c.vim	/^let s:C_PrototypeCounter = 0$/;"	v
s:C_PrototypeShow	plugin/c.vim	/^let s:C_PrototypeShow    = []$/;"	v
s:C_Root	plugin/c.vim	/^let s:C_Root  	       				= '&C\\\/C\\+\\+.'           " the name of the root menu of this plugin$/;"	v
s:C_RunMsg1	plugin/c.vim	/^let s:C_RunMsg1						 ="' does not exist or is not executable or object\/source older then executable"$/;"	v
s:C_SourceCodeExtensions	plugin/c.vim	/^let s:C_SourceCodeExtensions  = 'c cc cp cxx cpp CPP c++ C i ii'$/;"	v
s:C_SourceCodeExtensionsList	plugin/c.vim	/^let s:C_SourceCodeExtensionsList	= split( s:C_SourceCodeExtensions, '\\s\\+' )$/;"	v
s:C_SplintIsExecutable	plugin/c.vim	/^	let s:C_SplintIsExecutable	= 1$/;"	v
s:C_SplintIsExecutable	plugin/c.vim	/^let s:C_SplintIsExecutable	= 0$/;"	v
s:C_StandardLibs	plugin/c.vim	/^let s:C_StandardLibs       = [$/;"	v
s:C_StandardLibsClean	plugin/c.vim	/^let	s:C_StandardLibsClean			= C_CleanDirNameList( s:C_StandardLibs )$/;"	v
s:C_StartMultilineComment	plugin/c.vim	/^let s:C_StartMultilineComment	= '^\\s*\\\/\\*[\\*! ]\\='$/;"	v
s:C_TJT	plugin/c.vim	/^let s:C_TJT										 = '[ 0-9a-zA-Z_]*'$/;"	v
s:C_Template	plugin/c.vim	/^let s:C_Template             = { 'default' : {} }$/;"	v
s:C_TemplateEndif	plugin/c.vim	/^let s:C_TemplateEndif					 = '^==\\s*ENDIF\\s*=='$/;"	v
s:C_TemplateIf	plugin/c.vim	/^let s:C_TemplateIf						 = '^==\\s*IF\\s\\+|STYLE|\\s\\+IS\\s\\+'.s:C_MacroNameRegex.'\\s*=='$/;"	v
s:C_TemplateJumpTarget1	plugin/c.vim	/^let s:C_TemplateJumpTarget1    = '<+'.s:C_TJT.'+>\\|{+'.s:C_TJT.'+}'$/;"	v
s:C_TemplateJumpTarget2	plugin/c.vim	/^let s:C_TemplateJumpTarget2    = '<-'.s:C_TJT.'->\\|{-'.s:C_TJT.'-}'$/;"	v
s:C_TemplateLineRegex	plugin/c.vim	/^let s:C_TemplateLineRegex			 = '^==\\s*\\([a-zA-Z][0-9a-zA-Z'.s:C_TemplateNameDelimiter$/;"	v
s:C_TemplateLineRegex	plugin/c.vim	/^let s:C_TemplateLineRegex			.= ']\\+\\)\\s*==\\s*\\([a-z]\\+\\s*==\\)\\?'$/;"	v
s:C_TemplateNameDelimiter	plugin/c.vim	/^let s:C_TemplateNameDelimiter  = '-+_,\\. '$/;"	v
s:C_TemplateOverwrittenMsg	plugin/c.vim	/^let s:C_TemplateOverwrittenMsg= 'yes'$/;"	v
s:C_TypeOfH	plugin/c.vim	/^let s:C_TypeOfH               = 'cpp'$/;"	v
s:C_Wrapper	plugin/c.vim	/^let s:C_Wrapper               = s:plugin_dir.'c-support\/scripts\/wrapper.sh'$/;"	v
s:C_XtermDefaults	plugin/c.vim	/^	let s:C_XtermDefaults	= s:C_XtermDefaults." -geometry 80x24"$/;"	v
s:C_XtermDefaults	plugin/c.vim	/^let s:C_XtermDefaults         = '-fa courier -fs 12 -geometry 80x24'$/;"	v
s:Chameleon	colors/two2tango.vim	/^let s:Chameleon		= ['#8ae234', '#73d216', '#4e9a06']$/;"	v
s:Chocolate	colors/two2tango.vim	/^let s:Chocolate		= ['#e9b96e', '#c17d11', '#8f5902']$/;"	v
s:ColonEnd	indent/occam.vim	/^let s:ColonEnd = '\\(--.*\\)\\@<!:\\s*\\(--.*\\)\\=$'$/;"	v
s:ColonIndent	indent/occam.vim	/^let s:ColonIndent = '\\(--.*\\)\\@<!\\<PROC\\>'$/;"	v
s:ColonNonColonEndIndent	indent/occam.vim	/^let s:ColonNonColonEndIndent = '^\\C\\s*PROTOCOL\\>\\|\\(--.*\\)\\@<!\\<\\(\\(CHAN\\|DATA\\)\\s\\+TYPE\\|FUNCTION\\)\\>'$/;"	v
s:ColonStart	indent/occam.vim	/^let s:ColonStart = '^\\s*:\\s*\\(--.*\\)\\=$'$/;"	v
s:ColorPre	colors/tabula.vim	/^    let s:ColorPre = g:Tabula_ColorPre$/;"	v
s:ColorPre	colors/tabula.vim	/^let s:ColorPre = "blue"$/;"	v
s:Colors	plugin/ScreenShot.vim	/^            let s:Colors = ['#000000', '#0000c0', '#008000', '#008080', '#c00000', '#c000c0', '#808000', '#c0c0c0', '#808080', '#6060ff', '#00ff00', '#00ffff', '#ff8080', '#ff40ff', '#ffff00', '#ffffff']$/;"	v
s:Colors	plugin/ScreenShot.vim	/^            let s:Colors = ['#000000', '#0000ff', '#00ff00', '#00ffff', '#ff0000', '#ff00ff', '#ffff00', '#ffffff']$/;"	v
s:Colors	plugin/ScreenShot.vim	/^            let s:Colors = ['#000000', '#c00000', '#008000', '#808000', '#0000c0', '#c000c0', '#008080', '#c0c0c0', '#808080', '#ff6060', '#00ff00', '#ffff00', '#8080ff', '#ff40ff', '#00ffff', '#ffffff']$/;"	v
s:Colors	plugin/ScreenShot.vim	/^            let s:Colors = ['#000000', '#ff0000', '#00ff00', '#ffff00', '#0000ff', '#ff00ff', '#00ffff', '#ffffff']$/;"	v
s:CommandSpec_	ftplugin/latex-suite/packages.vim	/^let s:CommandSpec_    = '\\<+replace+>'$/;"	v
s:CommandSpec_bra	ftplugin/latex-suite/packages.vim	/^let s:CommandSpec_bra = '\\<+replace+>{<++>}<++>'$/;"	v
s:CommandSpec_brd	ftplugin/latex-suite/packages.vim	/^let s:CommandSpec_brd = '\\<+replace+>{<++>}{<++>}<++>'$/;"	v
s:CommandSpec_brs	ftplugin/latex-suite/packages.vim	/^let s:CommandSpec_brs = '\\<+replace+><++>'$/;"	v
s:CommandSpec_eno	ftplugin/latex-suite/packages.vim	/^let s:CommandSpec_eno = '\\begin[<++>]{<+replace+>}'."\\<CR><++>\\<CR>".'\\end{<+replace+>}'$/;"	v
s:CommandSpec_ens	ftplugin/latex-suite/packages.vim	/^let s:CommandSpec_ens = '\\begin{<+replace+>}<+extra+>'."\\<CR><++>\\<CR>".'\\end{<+replace+>}<++>'$/;"	v
s:CommandSpec_env	ftplugin/latex-suite/packages.vim	/^let s:CommandSpec_env = '\\begin{<+replace+>}'."\\<CR><++>\\<CR>".'\\end{<+replace+>}<++>'$/;"	v
s:CommandSpec_nob	ftplugin/latex-suite/packages.vim	/^let s:CommandSpec_nob = '\\<+replace+>[<++>]{<++>}{<++>}<++>'$/;"	v
s:CommandSpec_noo	ftplugin/latex-suite/packages.vim	/^let s:CommandSpec_noo = '\\<+replace+>[<++>]'$/;"	v
s:CommandSpec_nor	ftplugin/latex-suite/packages.vim	/^let s:CommandSpec_nor = '\\<+replace+>'$/;"	v
s:CommandSpec_spe	ftplugin/latex-suite/packages.vim	/^let s:CommandSpec_spe = '<+replace+>'$/;"	v
s:CommentLine	indent/occam.vim	/^let s:CommentLine = '^\\s*--'$/;"	v
s:Comments	plugin/c.vim	/^let s:Comments     = s:C_Root.'&Comments'$/;"	v
s:Cpp	plugin/c.vim	/^let s:Cpp          = s:C_Root.'C&++'$/;"	v
s:Cpp_CStandardLibs	plugin/c.vim	/^let s:Cpp_CStandardLibs       = [$/;"	v
s:Cpp_CStandardLibsClean	plugin/c.vim	/^let	s:Cpp_CStandardLibsClean	= C_CleanDirNameList( s:Cpp_CStandardLibs )$/;"	v
s:Cpp_IosFlagBits	plugin/c.vim	/^let s:Cpp_IosFlagBits       = [$/;"	v
s:Cpp_StandardLibs	plugin/c.vim	/^let s:Cpp_StandardLibs       = [$/;"	v
s:Cpp_StandardLibsClean	plugin/c.vim	/^let	s:Cpp_StandardLibsClean		= C_CleanDirNameList( s:Cpp_StandardLibs )$/;"	v
s:CurColor	colors/tabula.vim	/^  let s:CurColor = g:Tabula_CurColor$/;"	v
s:CurColor	colors/tabula.vim	/^let s:CurColor = "blue"$/;"	v
s:DarkError	colors/tabula.vim	/^  let s:DarkError = g:Tabula_DarkError$/;"	v
s:DarkError	colors/tabula.vim	/^let s:DarkError = 0$/;"	v
s:ERROR	autoload/netrw.vim	/^ let s:ERROR   = 2$/;"	v
s:ERROR	autoload/vimball.vim	/^ let s:ERROR   = 2$/;"	v
s:ERROR	autoload/zip.vim	/^let s:ERROR          = 2$/;"	v
s:ES	indent/vhdl.vim	/^let s:ES = '\\s*\\%(--.*\\)\\=$'$/;"	v
s:FirstLevelIndent	indent/occam.vim	/^let s:FirstLevelIndent = '^\\C\\s*\\(IF\\|ALT\\|PRI\\s\\+ALT\\|PAR\\|SEQ\\|PRI\\s\\+PAR\\|WHILE\\|VALOF\\|CLAIM\\|FORKING\\)\\>\\|\\(--.*\\)\\@<!\\(\\<PROC\\>\\|??\\|\\<CASE\\>\\s*\\(--.*\\)\\=\\_$\\)'$/;"	v
s:FirstLevelNonColonEndIndent	indent/occam.vim	/^let s:FirstLevelNonColonEndIndent = '^\\C\\s*PROTOCOL\\>\\|\\(--.*\\)\\@<!\\<\\(\\(CHAN\\|DATA\\)\\s\\+TYPE\\|FUNCTION\\)\\>'$/;"	v
s:FlagNode	plugin/ScreenShot.vim	/^let s:FlagNode = extend({'type': 'flag'},s:StringNode,'keep')$/;"	v
s:FlatConstants	colors/tabula.vim	/^  let s:FlatConstants = g:Tabula_FlatConstants$/;"	v
s:FlatConstants	colors/tabula.vim	/^let s:FlatConstants = 1$/;"	v
s:Fold_Collate	autoload/ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<begin\\>$\\|'$/;"	v
s:Fold_Collate	autoload/ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<exception\\>$\\|'$/;"	v
s:Fold_Collate	autoload/ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<is\\>$\\|'$/;"	v
s:Fold_Collate	autoload/ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<private\\>$\\|'$/;"	v
s:Fold_Collate	autoload/ada.vim	/^   let s:Fold_Collate .= '--\\)'$/;"	v
s:Fold_Collate	autoload/ada.vim	/^   let s:Fold_Collate = '^\\([;)]*$\\|'$/;"	v
s:HFileSection	plugin/c.vim	/^let s:HFileSection	= { $/;"	v
s:HtmlEndline	syntax/2html.vim	/^  let s:HtmlEndline = '<br' . s:tag_close$/;"	v
s:HtmlEndline	syntax/2html.vim	/^let s:HtmlEndline = ''$/;"	v
s:HtmlSpace	syntax/2html.vim	/^  let s:HtmlSpace = '\\' . s:LeadingSpace$/;"	v
s:HtmlSpace	syntax/2html.vim	/^let s:HtmlSpace = ' '$/;"	v
s:Idioms	plugin/c.vim	/^let s:Idioms       = s:C_Root.'&Idioms'$/;"	v
s:InvisibleIgnore	colors/tabula.vim	/^  let s:InvisibleIgnore = g:Tabula_InvisibleIgnore$/;"	v
s:InvisibleIgnore	colors/tabula.vim	/^let s:InvisibleIgnore = 1$/;"	v
s:KeyMap	plugin/NERD_tree.vim	/^let s:KeyMap = {}$/;"	v
s:KeywordComment	plugin/c.vim	/^let s:KeywordComment	= { $/;"	v
s:LNumUnderline	colors/tabula.vim	/^  let s:LNumUnderline = g:Tabula_LNumUnderline$/;"	v
s:LNumUnderline	colors/tabula.vim	/^let s:LNumUnderline = 0$/;"	v
s:LONGLIST	autoload/netrw.vim	/^ let s:LONGLIST = 1$/;"	v
s:LastShellReturnCode	plugin/c.vim	/^let s:LastShellReturnCode	= 0			" for compile \/ link \/ run only$/;"	v
s:LeadingSpace	syntax/2html.vim	/^  let s:LeadingSpace = '&nbsp;'$/;"	v
s:LeadingSpace	syntax/2html.vim	/^let s:LeadingSpace = ' '$/;"	v
s:MAXLIST	autoload/netrw.vim	/^ let s:MAXLIST  = 4$/;"	v
s:MRU_Exclude_List	plugin/bufexplorer.vim	/^let s:MRU_Exclude_List = ["[BufExplorer]","__MRU_Files__"]$/;"	v
s:MSWIN	ftplugin/sh.vim	/^let s:MSWIN =   has("win16") || has("win32") || has("win64") || has("win95")$/;"	v
s:MSWIN	plugin/bash-support.vim	/^let	s:MSWIN =		has("win16") || has("win32") || has("win64") || has("win95")$/;"	v
s:MSWIN	plugin/c.vim	/^let	s:MSWIN =		has("win16") || has("win32") || has("win64") || has("win95")$/;"	v
s:Mark	plugin/imaps.vim	/^let s:Mark = "(0,0)"$/;"	v
s:MathMenuName	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:MathMenuName = g:Tex_MenuPrefix.'Ma&th.'$/;"	v
s:MathMenuName	ftplugin/latex-suite/mathmacros.vim	/^let s:MathMenuName = g:Tex_MenuPrefix.'&Math.'$/;"	v
s:MenuController	plugin/NERD_tree.vim	/^let s:MenuController = {}$/;"	v
s:MenuItem	plugin/NERD_tree.vim	/^let s:MenuItem = {}$/;"	v
s:MenuLHS_	ftplugin/latex-suite/packages.vim	/^let s:MenuLHS_    = '\\\\&<+replace+>'$/;"	v
s:MenuLHS_bra	ftplugin/latex-suite/packages.vim	/^let s:MenuLHS_bra = '\\\\&<+replace+>{}'$/;"	v
s:MenuLHS_brd	ftplugin/latex-suite/packages.vim	/^let s:MenuLHS_brd = '\\\\&<+replace+>{}{}'$/;"	v
s:MenuLHS_brs	ftplugin/latex-suite/packages.vim	/^let s:MenuLHS_brs = '\\\\&<+replace+>{}'$/;"	v
s:MenuLHS_eno	ftplugin/latex-suite/packages.vim	/^let s:MenuLHS_eno = '&<+replace+>\\ (E)'$/;"	v
s:MenuLHS_ens	ftplugin/latex-suite/packages.vim	/^let s:MenuLHS_ens = '&<+replace+>\\ (E)'$/;"	v
s:MenuLHS_env	ftplugin/latex-suite/packages.vim	/^let s:MenuLHS_env = '&<+replace+>\\ (E)'$/;"	v
s:MenuLHS_nob	ftplugin/latex-suite/packages.vim	/^let s:MenuLHS_nob = '\\\\&<+replace+>[]{}{}'$/;"	v
s:MenuLHS_noo	ftplugin/latex-suite/packages.vim	/^let s:MenuLHS_noo = '\\\\&<+replace+>[]'$/;"	v
s:MenuLHS_nor	ftplugin/latex-suite/packages.vim	/^let s:MenuLHS_nor = '\\\\&<+replace+>'$/;"	v
s:MenuLHS_sep	ftplugin/latex-suite/packages.vim	/^let s:MenuLHS_sep = '-sep<+replace+>-'$/;"	v
s:MenuLHS_spe	ftplugin/latex-suite/packages.vim	/^let s:MenuLHS_spe = '&<+replace+>'$/;"	v
s:MsgInsNotAvail	plugin/bash-support.vim	/^let s:MsgInsNotAvail	= "insertion not available for a fold"$/;"	v
s:MsgInsNotAvail	plugin/c.vim	/^let s:MsgInsNotAvail	= "insertion not available for a fold" $/;"	v
s:NC	indent/vhdl.vim	/^let s:NC = '\\%(--.*\\)\\@<!'$/;"	v
s:NE	indent/vhdl.vim	/^let s:NE = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:NERDFileNameEscape	plugin/NERD_commenter.vim	/^let s:NERDFileNameEscape="[]#*$%'\\" ?`!&();<>\\\\"$/;"	v
s:NERDTreeBufName	plugin/NERD_tree.vim	/^let s:NERDTreeBufName = 'NERD_tree_'$/;"	v
s:NERDTreeSortStarIndex	plugin/NERD_tree.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:NERD_tree_version	plugin/NERD_tree.vim	/^let s:NERD_tree_version = '4.1.0'$/;"	v
s:NOTE	autoload/netrw.vim	/^ let s:NOTE    = 0$/;"	v
s:NOTE	autoload/zip.vim	/^let s:NOTE           = 0$/;"	v
s:NetscapeRemoteCmd	browser_launcher.vim	/^			let s:NetscapeRemoteCmd = 'false'$/;"	v
s:NetscapeRemoteCmd	browser_launcher.vim	/^			let s:NetscapeRemoteCmd = s:Browsers['f'][1]$/;"	v
s:NetscapeRemoteCmd	browser_launcher.vim	/^			let s:NetscapeRemoteCmd = s:Browsers['m'][1]$/;"	v
s:NetscapeRemoteCmd	browser_launcher.vim	/^			let s:NetscapeRemoteCmd = s:Browsers['n'][1]$/;"	v
s:NetscapeRemoteCmd	browser_launcher.vim	/^		let s:NetscapeRemoteCmd = substitute(system("which netscape-remote"), "\\n$", '', '')$/;"	v
s:NetscapeRemoteCmd	browser_launcher.vim	/^	let s:NetscapeRemoteCmd = substitute(system("which mozilla-xremote-client"), "\\n$", '', '')$/;"	v
s:Nodes	plugin/ScreenShot.vim	/^let s:Nodes = {'f': copy(s:StringNode), $/;"	v
s:Nodes	plugin/ScreenShot.vim	/^let s:Nodes.m.Value = s:Nodes.M.Value$/;"	v
s:NumericNode	plugin/ScreenShot.vim	/^let s:NumericNode = extend({'type': 'num'},s:PrintfNode,'keep')$/;"	v
s:Orange	colors/two2tango.vim	/^let s:Orange		= ['#fcaf3e', '#f57900', '#ce5c00']$/;"	v
s:PHP_startindenttag	indent/php.vim	/^let s:PHP_startindenttag = '<?\\%(.*?>\\)\\@!\\|<script[^>]*>\\%(.*<\\\/script>\\)\\@!'$/;"	v
s:Path	plugin/NERD_tree.vim	/^let s:Path = {}$/;"	v
s:Plum	colors/two2tango.vim	/^let s:Plum			= ['#ad7fa8', '#75507b', '#5c3566']$/;"	v
s:Preprocessor	plugin/c.vim	/^let s:Preprocessor = s:C_Root.'&Preprocessor'$/;"	v
s:PrintfNode	plugin/ScreenShot.vim	/^let s:PrintfNode = {'type': ''}$/;"	v
s:ReferenceName	syntax/rst.vim	/^let s:ReferenceName = '[[:alnum:]]\\+\\%([_.-][[:alnum:]]\\+\\)*'$/;"	v
s:RemoveLastHistoryItem	plugin/imaps.vim	/^let s:RemoveLastHistoryItem = ':call histdel("\/", -1)|let @\/=g:Tex_LastSearchPattern'$/;"	v
s:Run	plugin/c.vim	/^let s:Run          = s:C_Root.'&Run'$/;"	v
s:SQLBlockEnd	indent/sqlanywhere.vim	/^let s:SQLBlockEnd = '^\\s*\\(end\\)\\>'$/;"	v
s:SQLBlockStart	indent/sqlanywhere.vim	/^let s:SQLBlockStart = '^\\s*\\%('.$/;"	v
s:ScarletRed	colors/two2tango.vim	/^let s:ScarletRed	= ['#ef2929', '#cc0000', '#a40000']$/;"	v
s:SearchStandOut	colors/tabula.vim	/^  let s:SearchStandOut = g:Tabula_SearchStandOut$/;"	v
s:SearchStandOut	colors/tabula.vim	/^let s:SearchStandOut=0$/;"	v
s:SecondLevelIndent	indent/occam.vim	/^let s:SecondLevelIndent = '^\\C\\s*\\(IF\\|ALT\\|PRI\\s\\+ALT\\)\\>\\|\\(--.*\\)\\@<!?\\s*\\<CASE\\>\\s*\\(--.*\\)\\=\\_$'$/;"	v
s:SecondLevelNonColonEndIndent	indent/occam.vim	/^let s:SecondLevelNonColonEndIndent = '\\(--.*\\)\\@<!\\<\\(CHAN\\|DATA\\)\\s\\+TYPE\\>'$/;"	v
s:SkyBlue	colors/two2tango.vim	/^let s:SkyBlue		= ['#729fcf', '#3465a4', '#204a87']$/;"	v
s:Snippets	plugin/c.vim	/^let s:Snippets     = s:C_Root.'S&nippets'$/;"	v
s:SpecialComment	plugin/c.vim	/^let s:SpecialComment	= { $/;"	v
s:Statements	plugin/c.vim	/^let s:Statements   = s:C_Root.'&Statements'$/;"	v
s:StringNode	plugin/ScreenShot.vim	/^let s:StringNode = extend({'type': 'str'},s:PrintfNode,'keep')$/;"	v
s:TBrowser_Config	ftplugin/txt.vim	/^		let s:TBrowser_Config = iconv(s:TBrowser_Config, 'utf8', &fenc)$/;"	v
s:TBrowser_Config	ftplugin/txt.vim	/^	let s:TBrowser_Config .= '--regex-txt="\/^(([0-9]+\\.){1}([0-9]+\\.?)[ \\t]+)(.+$)\/.   \\1\\4\/c,content\/" '$/;"	v
s:TBrowser_Config	ftplugin/txt.vim	/^	let s:TBrowser_Config .= '--regex-txt="\/^(([0-9]+\\.){2}([0-9]+\\.?)[ \\t]+)(.+$)\/.       \\1\\4\/c,content\/" '$/;"	v
s:TBrowser_Config	ftplugin/txt.vim	/^	let s:TBrowser_Config .= '--regex-txt="\/^(([0-9]+\\.){3}([0-9]+\\.?)[ \\t]+)(.+$)\/.           \\1\\4\/c,content\/" '$/;"	v
s:TBrowser_Config	ftplugin/txt.vim	/^	let s:TBrowser_Config .= '--regex-txt="\/^[ \\t]*(å¾[ \\t]*[0-9a-zA-Z]+[.: ][ \\t]*.+$)\/\\1\/f,figures\/i" '$/;"	v
s:TBrowser_Config	ftplugin/txt.vim	/^	let s:TBrowser_Config .= '--regex-txt="\/^[ \\t]*(è¡¨[ \\t]*[0-9a-zA-Z]+[.: ][ \\t]*.+$)\/\\1\/t,tables\/i" '$/;"	v
s:TBrowser_Config	ftplugin/txt.vim	/^let s:TBrowser_Config .= '--regex-txt="\/^([0-9]+\\.?[ \\t]+)(.+$)\/\\1\\2\/c,content\/" '$/;"	v
s:TBrowser_Config	ftplugin/txt.vim	/^let s:TBrowser_Config .= '--regex-txt="\/^[ \\t]+(figure[ \\t]+[0-9a-zA-Z]+([.: ]([ \\t]*.+)?)?$)\/\\1\/f,figures\/i" '$/;"	v
s:TBrowser_Config	ftplugin/txt.vim	/^let s:TBrowser_Config .= '--regex-txt="\/^[ \\t]+(table[ \\t]+[0-9a-zA-Z]+([.: ]([ \\t]*.+)?)?$)\/\\1\/t,tables\/i" '$/;"	v
s:TBrowser_Config	ftplugin/txt.vim	/^let s:TBrowser_Config = ' --langdef=txt --langmap=txt:.txt '$/;"	v
s:THINLIST	autoload/netrw.vim	/^ let s:THINLIST = 0$/;"	v
s:TREELIST	autoload/netrw.vim	/^ let s:TREELIST = 3$/;"	v
s:Tlist_Skip_Refresh	plugin/taglist.vim	/^let s:Tlist_Skip_Refresh = 0$/;"	v
s:TodoUnderline	colors/tabula.vim	/^  let s:TodoUnderline = g:Tabula_TodoUnderline$/;"	v
s:TodoUnderline	colors/tabula.vim	/^let s:TodoUnderline=1$/;"	v
s:TreeDirNode	plugin/NERD_tree.vim	/^let s:TreeDirNode = copy(s:TreeFileNode)$/;"	v
s:TreeFileNode	plugin/NERD_tree.vim	/^let s:TreeFileNode = {}$/;"	v
s:USAGE	autoload/vimball.vim	/^ let s:USAGE   = 0$/;"	v
s:VCSCommandUtility	plugin/vcsbzr.vim	/^let s:VCSCommandUtility = VCSCommandRegisterModule('BZR', expand('<sfile>'), s:bzrFunctions, [])$/;"	v
s:VCSCommandUtility	plugin/vcscommand.vim	/^let s:VCSCommandUtility = {}$/;"	v
s:VCSCommandUtility	plugin/vcscvs.vim	/^let s:VCSCommandUtility = VCSCommandRegisterModule('CVS', expand('<sfile>'), s:cvsFunctions, s:cvsExtensionMappings)$/;"	v
s:VCSCommandUtility	plugin/vcsgit.vim	/^let s:VCSCommandUtility = VCSCommandRegisterModule('git', expand('<sfile>'), s:gitFunctions, [])$/;"	v
s:VCSCommandUtility	plugin/vcshg.vim	/^let s:VCSCommandUtility = VCSCommandRegisterModule('HG', expand('<sfile>'), s:hgFunctions, [])$/;"	v
s:VCSCommandUtility	plugin/vcssvk.vim	/^let s:VCSCommandUtility = VCSCommandRegisterModule('SVK', expand('<sfile>'), s:svkFunctions, [])$/;"	v
s:VCSCommandUtility	plugin/vcssvn.vim	/^let s:VCSCommandUtility = VCSCommandRegisterModule('SVN', expand('<sfile>'), s:svnFunctions, [])$/;"	v
s:VEContainer	plugin/vimExplorer.vim	/^let s:VEContainer = {} "contains all VEFrameWorks$/;"	v
s:VEContainer	plugin/vimExplorer.vim	/^let s:VEContainer.clipboard = [] "shared clipboard$/;"	v
s:VEContainer	plugin/vimExplorer.vim	/^let s:VEContainer.markPlaces = {}$/;"	v
s:VEContainer	plugin/vimExplorer.vim	/^let s:VEContainer.yankMode = ''  "cut or yank$/;"	v
s:VEFilePanel	plugin/vimExplorer.vim	/^let s:VEFilePanel = {}$/;"	v
s:VEFilePanel	plugin/vimExplorer.vim	/^let s:VEFilePanel.displayList = []$/;"	v
s:VEFilePanel	plugin/vimExplorer.vim	/^let s:VEFilePanel.fileList = []$/;"	v
s:VEFilePanel	plugin/vimExplorer.vim	/^let s:VEFilePanel.name = ''$/;"	v
s:VEFilePanel	plugin/vimExplorer.vim	/^let s:VEFilePanel.path = ''$/;"	v
s:VEFilePanel	plugin/vimExplorer.vim	/^let s:VEFilePanel.selectedFiles = []$/;"	v
s:VEFilePanel	plugin/vimExplorer.vim	/^let s:VEFilePanel.splitLocation = ""$/;"	v
s:VEFilePanel	plugin/vimExplorer.vim	/^let s:VEFilePanel.splitMode = ""$/;"	v
s:VEFilePanel	plugin/vimExplorer.vim	/^let s:VEFilePanel.width = 0$/;"	v
s:VEFrameWork	plugin/vimExplorer.vim	/^let s:VEFrameWork = {}$/;"	v
s:VEFrameWork	plugin/vimExplorer.vim	/^let s:VEFrameWork.filePanel = {}$/;"	v
s:VEFrameWork	plugin/vimExplorer.vim	/^let s:VEFrameWork.name = ''$/;"	v
s:VEFrameWork	plugin/vimExplorer.vim	/^let s:VEFrameWork.pathHistory = []$/;"	v
s:VEFrameWork	plugin/vimExplorer.vim	/^let s:VEFrameWork.pathPosition = -1$/;"	v
s:VEFrameWork	plugin/vimExplorer.vim	/^let s:VEFrameWork.treePanel = {}$/;"	v
s:VENode	plugin/vimExplorer.vim	/^let s:VENode = {}$/;"	v
s:VENode	plugin/vimExplorer.vim	/^let s:VENode.childs = {}$/;"	v
s:VENode	plugin/vimExplorer.vim	/^let s:VENode.hasOwnChilds = 0$/;"	v
s:VENode	plugin/vimExplorer.vim	/^let s:VENode.isopen = 0$/;"	v
s:VENode	plugin/vimExplorer.vim	/^let s:VENode.name = ''$/;"	v
s:VENode	plugin/vimExplorer.vim	/^let s:VENode.path = ''$/;"	v
s:VETree	plugin/vimExplorer.vim	/^let s:VETree = {}$/;"	v
s:VETree	plugin/vimExplorer.vim	/^let s:VETree.content = []$/;"	v
s:VETree	plugin/vimExplorer.vim	/^let s:VETree.rootNodes = {}$/;"	v
s:VETreePanel	plugin/vimExplorer.vim	/^let s:VETreePanel = {}$/;"	v
s:VETreePanel	plugin/vimExplorer.vim	/^let s:VETreePanel.name = ''$/;"	v
s:VETreePanel	plugin/vimExplorer.vim	/^let s:VETreePanel.path = ''$/;"	v
s:VETreePanel	plugin/vimExplorer.vim	/^let s:VETreePanel.splitLocation = ''$/;"	v
s:VETreePanel	plugin/vimExplorer.vim	/^let s:VETreePanel.splitMode = ''$/;"	v
s:VETreePanel	plugin/vimExplorer.vim	/^let s:VETreePanel.tree = {}$/;"	v
s:VETreePanel	plugin/vimExplorer.vim	/^let s:VETreePanel.width = 0$/;"	v
s:VimLogoXpm	plugin/ScreenShot.vim	/^let s:VimLogoXpm = "\/* XPM *\/$/;"	v
s:WARNING	autoload/netrw.vim	/^ let s:WARNING = 1$/;"	v
s:WARNING	autoload/vimball.vim	/^ let s:WARNING = 1$/;"	v
s:WARNING	autoload/zip.vim	/^let s:WARNING        = 1$/;"	v
s:WIDELIST	autoload/netrw.vim	/^ let s:WIDELIST = 2$/;"	v
s:a_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:a_standsfor = 'author'$/;"	v
s:ant_cpo_save	syntax/ant.vim	/^let s:ant_cpo_save = &cpo$/;"	v
s:array	ftplugin/latex-suite/envmacros.vim	/^let s:array =      "\\\\left<++>\\<cr>\\\\begin{array}{<+dimension+>}\\<cr><+elements+>\\<cr>\\\\end{array}\\<cr>\\\\right<++>"$/;"	v
s:assignment_rx	indent/make.vim	/^let s:assignment_rx = '^\\s*\\h\\w*\\s*[+?]\\==\\s*\\zs.*\\\\$'$/;"	v
s:attr	syntax/2html.vim	/^  let s:attr = ""$/;"	v
s:attr	syntax/2html.vim	/^  let s:attr = s:CSS1(s:id)$/;"	v
s:attributes	indent/haml.vim	/^let s:attributes = '\\%({.\\{-\\}}\\|\\[.\\{-\\}\\]\\)'$/;"	v
s:autoinstall	autoload/getscript.vim	/^  let s:autoinstall= $HOME."\/".s:dotvim$/;"	v
s:autoinstall	autoload/getscript.vim	/^let s:autoinstall= ""$/;"	v
s:autorestoptions	indent/php.vim	/^    let s:autorestoptions = 1$/;"	v
s:autorestoptions	indent/php.vim	/^let s:autorestoptions = 0$/;"	v
s:b_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:b_standsfor = 'booktitle'$/;"	v
s:beflet	indent/ocaml.vim	/^let s:beflet = '^\\s*\\(initializer\\|method\\|try\\)\\|\\(\\<\\(begin\\|do\\|else\\|in\\|then\\|try\\)\\|->\\|<-\\|=\\|;\\|(\\)\\s*$'$/;"	v
s:beflet	indent/sml.vim	/^let s:beflet = '^\\s*\\(initializer\\|method\\|try\\)\\|\\(\\<\\(begin\\|do\\|else\\|in\\|then\\|try\\)\\|->\\|;\\)\\s*$'$/;"	v
s:beige	colors/twilight.vim	/^let s:beige = '#ceb67f'$/;"	v
s:bgc	syntax/2html.vim	/^  let s:bgc = ( &background == "dark" ? "#000000" : "#ffffff" )$/;"	v
s:bgc	syntax/2html.vim	/^let s:bgc = s:HtmlColor(synIDattr(hlID("Normal"), "bg#", s:whatterm))$/;"	v
s:black	colors/astronaut.vim	/^ let s:black   = "black"$/;"	v
s:block_regex	indent/ruby.vim	/^let s:block_regex =$/;"	v
s:blockstart	indent/php.vim	/^let s:blockstart = '\\%(\\%(\\%(}\\s*\\)\\=else\\%(\\s\\+\\)\\=\\)\\=if\\>\\|else\\>\\|while\\>\\|switch\\>\\|for\\%(each\\)\\=\\>\\|declare\\>\\|class\\>\\|interface\\>\\|abstract\\>\\|try\\>\\|catch\\>\\)'$/;"	v
s:blue	colors/astronaut.vim	/^ let s:blue    = "blue"$/;"	v
s:blue	colors/astronaut.vim	/^ let s:blue    = "darkblue"$/;"	v
s:bmenu_wait	menu.vim	/^let s:bmenu_wait = 1$/;"	v
s:bold	colors/astronaut.vim	/^ let s:bold=""$/;"	v
s:bold	colors/astronaut.vim	/^ let s:bold=",bold"$/;"	v
s:bold_opt	colors/marklar.vim	/^    let s:bold_opt = 0$/;"	v
s:browsefilter	ftplugin/ant.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	ftplugin/ant.vim	/^let s:browsefilter = "XML Files (*.xml)\\t*.xml\\n" .$/;"	v
s:browsefilter	ftplugin/aspvbs.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	ftplugin/aspvbs.vim	/^let s:browsefilter = "HTML Files (*.html, *.htm)\\t*.htm*\\n" .$/;"	v
s:browsefilter	ftplugin/config.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	ftplugin/config.vim	/^let s:browsefilter = "Bourne Shell Files (*.sh)\\t*.sh\\n" .$/;"	v
s:browsefilter	ftplugin/eruby.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	ftplugin/eruby.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:browsefilter	ftplugin/eruby.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	ftplugin/haml.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	ftplugin/haml.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:browsefilter	ftplugin/haml.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	ftplugin/jsp.vim	/^    let s:browsefilter = b:browsefilter . s:browsefilter$/;"	v
s:browsefilter	ftplugin/jsp.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	ftplugin/jsp.vim	/^let s:browsefilter = "Java Files (*.java)\\t*.java\\n" .$/;"	v
s:browsefilter	ftplugin/php.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	ftplugin/php.vim	/^let s:browsefilter = "HTML Files (*.html, *.htm)\\t*.html;*.htm\\n" .$/;"	v
s:browsefilter	ftplugin/sgml.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	ftplugin/sgml.vim	/^let s:browsefilter = "XML Files (*.xml)\\t*.xml\\n" .$/;"	v
s:browsefilter	ftplugin/svg.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	ftplugin/svg.vim	/^let s:browsefilter = "XML Files (*.xml)\\t*.xml\\n" .$/;"	v
s:browsefilter	ftplugin/tcsh.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	ftplugin/tcsh.vim	/^let s:browsefilter = "csh Files (*.csh)\\t*.csh\\n" .$/;"	v
s:browsefilter	ftplugin/xhtml.vim	/^    let s:browsefilter = b:browsefilter . s:browsefilter$/;"	v
s:browsefilter	ftplugin/xhtml.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	ftplugin/xhtml.vim	/^let s:browsefilter = "HTML Files (*.html, *.htm)\\t*.html;*.htm\\n" .$/;"	v
s:browsefilter	ftplugin/xsd.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	ftplugin/xsd.vim	/^let s:browsefilter = "XML Files (*.xml)\\t*.xml\\n" .$/;"	v
s:browsers	ftplugin/html/HTML.vim	/^    let s:browsers = LaunchBrowser()$/;"	v
s:browsers	ftplugin/html/HTML.vim	/^  let s:browsers = LaunchBrowser()$/;"	v
s:byte_pattern	syntax/cdrtoc.vim	/^let s:byte_pattern = '\\<\\%([01]\\=\\d\\{1,2}\\|2\\%([0-4]\\d\\|5[0-5]\\)\\)\\>'$/;"	v
s:bzrFunctions	plugin/vcsbzr.vim	/^let s:bzrFunctions = {}$/;"	v
s:bzrFunctions	plugin/vcsbzr.vim	/^let s:bzrFunctions.AnnotateSplitRegex = '^[^|]\\+ | '$/;"	v
s:c_cppcomment	plugin/c.vim	/^let	s:c_cppcomment= '\\(\\\/\\*.\\{-}\\*\\\/\\|\\\/\\\/.*$\\)'$/;"	v
s:c_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:c_standsfor = 'chapter'$/;"	v
s:cache_list	autoload/syntaxcomplete.vim	/^let s:cache_list = []$/;"	v
s:cache_name	autoload/syntaxcomplete.vim	/^let s:cache_name = []$/;"	v
s:charsets	ftplugin/html/HTML.vim	/^let s:charsets = {}$/;"	v
s:charsets	ftplugin/html/HTML.vim	/^let s:charsets['big5']      = 'Big5'$/;"	v
s:charsets	ftplugin/html/HTML.vim	/^let s:charsets['cp950']     = 'Big5'$/;"	v
s:charsets	ftplugin/html/HTML.vim	/^let s:charsets['euc_jp']    = 'EUC-JP'$/;"	v
s:charsets	ftplugin/html/HTML.vim	/^let s:charsets['latin1']    = 'iso-8859-1'$/;"	v
s:charsets	ftplugin/html/HTML.vim	/^let s:charsets['shift_jis'] = 'Shift_JIS'$/;"	v
s:charsets	ftplugin/html/HTML.vim	/^let s:charsets['utf_16']    = 'UTF-16'$/;"	v
s:charsets	ftplugin/html/HTML.vim	/^let s:charsets['utf_8']     = 'UTF-8'$/;"	v
s:class	ftplugin/php.vim	/^let s:class = '\\(abstract\\s\\+\\|final\\s\\+\\)*class'$/;"	v
s:cmap	colors/calmar256-dark.vim	/^    let s:cmap =   [ $/;"	v
s:cmap	colors/calmar256-light.vim	/^    let s:cmap =   [ $/;"	v
s:code	ftplugin/ruby.vim	/^    let s:code = "print ($: + begin; require %q{rubygems}; Gem.all_load_paths.sort.uniq; rescue LoadError; []; end).join(%q{,})"$/;"	v
s:col	colors/calmar256-dark.vim	/^            let s:col[i] = "NONE"$/;"	v
s:col	colors/calmar256-light.vim	/^            let s:col[i] = "NONE"$/;"	v
s:col	syntax/2html.vim	/^	let s:col = s:col + 1$/;"	v
s:col	syntax/2html.vim	/^    let s:col = 1$/;"	v
s:col	syntax/2html.vim	/^  let s:col = stridx(s:idlist, ",")$/;"	v
s:color_list	ftplugin/html/HTML.vim	/^let s:color_list = {}$/;"	v
s:colors256	colors/calmar256-dark.vim	/^let s:colors256 = [$/;"	v
s:colors256	colors/calmar256-light.vim	/^let s:colors256 = [$/;"	v
s:colors_sort	ftplugin/html/HTML.vim	/^let s:colors_sort = {$/;"	v
s:colorvim7	colors/calmar256-dark.vim	/^let s:colorvim7 = [$/;"	v
s:colorvim7	colors/calmar256-light.vim	/^let s:colorvim7 = [$/;"	v
s:comment_rx	indent/make.vim	/^let s:comment_rx = '^\\s*#'$/;"	v
s:conditionalEnd	ftplugin/matlab.vim	/^	let s:conditionalEnd = '\\(([^()]*\\)\\@!\\<end\\>\\([^()]*)\\)\\@!'$/;"	v
s:conditional_directive_rx	indent/make.vim	/^let s:conditional_directive_rx = '^ *\\%(ifn\\=\\%(eq\\|def\\)\\|else\\)\\>'$/;"	v
s:continuation_regex	indent/ruby.vim	/^let s:continuation_regex = '\\%([\\\\*+\/.,:]\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:continuation_regex2	indent/ruby.vim	/^let s:continuation_regex2 =$/;"	v
s:continuation_rx	indent/make.vim	/^let s:continuation_rx = '\\\\$'$/;"	v
s:continued_rule_rx	indent/make.vim	/^let s:continued_rule_rx = '^[^#:]*:\\{1,2}\\%([^=:]\\|$\\)'$/;"	v
s:counterMenuLoc	ftplugin/latex-suite/elementmacros.vim	/^let s:counterMenuLoc    = g:Tex_ElementsMenuLocation.'Counters.'$/;"	v
s:cpo_save	compiler/ant.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	compiler/bdf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	compiler/eruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	compiler/fortran_g77.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	compiler/gcc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	compiler/gf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	compiler/mcs.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	compiler/onsgmls.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	compiler/php.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	compiler/rspec.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	compiler/rst.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	compiler/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	compiler/rubyunit.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	compiler/se.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	compiler/splint.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	compiler/xmllint.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	compiler/xmlwf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	filetype.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/a2ps.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/abaqus.vim	/^let s:cpo_save = &cpoptions$/;"	v
s:cpo_save	ftplugin/alsaconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/arch.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/automake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/bdf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/calendar.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/cdrdaoconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/changelog.vim	/^  let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/cobol.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/conf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/context.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/crm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/css.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/cvsrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/denyhosts.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/dictconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/dictdconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/dircolors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/dosini.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/dtrace.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/elinks.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/eterm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/fetchmail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/framescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/gpg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/group.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/grub.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/haskell.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/help.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/hostconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/hostsaccess.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/indent.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/javascript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/kconfig.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/ld.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/lftp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/libao.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/limits.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/loginaccess.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/logindefs.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/m4.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/mailaliases.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/mailcap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/manconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/mf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/modconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/mp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/mplayerconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/msmessages.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/muttrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/nanorc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/netrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/nsis.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/old.c.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/pamconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/passwd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/pinfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/procmail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/prolog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/protocols.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/quake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/racc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/readline.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/rnc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/rst.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/screen.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/sensors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/services.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/setserial.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/sieve.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/slpconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/slpreg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/slpspi.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/sshconfig.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/sudoers.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/sysctl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/terminfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/txt.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/udevconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/udevperm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/udevrules.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/updatedb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/vb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/xdefaults.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/xf86conf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/xinetd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/xmodmap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/yaml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	ftplugin/zsh.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	indent/dtd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	indent/html.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	indent/perl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	indent/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	indent/sh.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	menu.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	optwin.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugin/taglist.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugin/txtbrowser.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	scripts.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	synmenu.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/a2ps.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/aap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/alsaconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/arch.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/autohotkey.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/bdf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/calendar.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/cdrdaoconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/cdrtoc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/chordpro.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/cmusrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/context.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/crm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/cvsrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/denyhosts.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/dictconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/dictdconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/dircolors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/doxygen.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/elinks.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/eterm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/fetchmail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/framescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/gpg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/group.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/grub.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/hostconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/indent.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/initex.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/kconfig.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/ld.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/ldapconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/lftp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/libao.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/limits.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/litestep.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/loginaccess.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/logindefs.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/lynx.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/mailaliases.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/manconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/messages.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/modconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/mplayerconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/nanorc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/netrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/pamconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/passwd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/pinfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/plaintex.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/privoxy.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/protocols.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/quake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/racc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/readline.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/rnc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/rst.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/screen.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/sensors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/services.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/setserial.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/sieve.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/slpconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/slpreg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/slpspi.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/sudoers.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/synload.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/sysctl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/terminfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/udevconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/udevperm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/udevrules.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/updatedb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/xbl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/xinetd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/xmodmap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/yaml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	syntax/zsh.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpoptions	ftplugin/ada.vim	/^let s:cpoptions = &cpoptions$/;"	v
s:cposet	compiler/fortran_F.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	compiler/fortran_cv.vim	/^let s:cposet = &cpoptions$/;"	v
s:cposet	compiler/fortran_elf90.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	compiler/fortran_lf95.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	ftplugin/fortran.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	ftplugin/ocaml.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	indent/fortran.vim	/^let s:cposet=&cpoptions$/;"	v
s:cs_cpo_save	syntax/cs.vim	/^let s:cs_cpo_save = &cpo$/;"	v
s:cterm_color	syntax/2html.vim	/^    let s:cterm_color = {0: "#000000", 1: "#c00000", 2: "#008000", 3: "#804000", 4: "#0000c0", 5: "#c000c0", 6: "#008080", 7: "#c0c0c0", 8: "#808080", 9: "#ff6060", 10: "#00ff00", 11: "#ffff00", 12: "#8080ff", 13: "#ff40ff", 14: "#00ffff", 15: "#ffffff"}$/;"	v
s:cterm_color	syntax/2html.vim	/^    let s:cterm_color = {0: "#808080", 1: "#ff6060", 2: "#00ff00", 3: "#ffff00", 4: "#8080ff", 5: "#ff40ff", 6: "#00ffff", 7: "#ffffff"}$/;"	v
s:cvsExtensionMappings	plugin/vcscvs.vim	/^		let s:cvsExtensionMappings[shortCut] = commandText$/;"	v
s:cvsExtensionMappings	plugin/vcscvs.vim	/^let s:cvsExtensionMappings = {}$/;"	v
s:cvsFunctions	plugin/vcscvs.vim	/^let s:cvsFunctions = {}$/;"	v
s:cvsFunctions	plugin/vcscvs.vim	/^let s:cvsFunctions.AnnotateSplitRegex = '): '$/;"	v
s:cyan	colors/astronaut.vim	/^ let s:cyan    = "cyan"$/;"	v
s:cyan	colors/astronaut.vim	/^ let s:cyan    = "darkcyan"$/;"	v
s:cyan	colors/twilight.vim	/^let s:cyan = '#74dad9'$/;"	v
s:d_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:d_standsfor = 'edition'$/;"	v
s:dark_grey_blue	colors/twilight.vim	/^let s:dark_grey_blue = '#34383c'$/;"	v
s:darkgrey	colors/twilight.vim	/^let s:darkgrey = '#1a1a1a'$/;"	v
s:defaultMappings	plugin/vcscommand.vim	/^let s:defaultMappings = [$/;"	v
s:definedFuncs	ftplugin/latex-suite/elementmacros.vim	/^	let s:definedFuncs = 1$/;"	v
s:description	ftplugin/latex-suite/envmacros.vim	/^let s:description ="\\\\begin{description}\\<cr>\\\\item[<+label+>]<++>\\<cr>\\\\end{description}<++>"$/;"	v
s:did_ft	syntax/syntax.vim	/^  let s:did_ft = 0$/;"	v
s:did_ft	syntax/syntax.vim	/^  let s:did_ft = 1$/;"	v
s:diffattr	syntax/2html.vim	/^    let s:diffattr = diff_hlID(s:lnum, 1)$/;"	v
s:difffillchar	syntax/2html.vim	/^  let s:difffillchar = '-'$/;"	v
s:difffillchar	syntax/2html.vim	/^let s:difffillchar = &fillchars[matchend(&fillchars, 'diff:')]$/;"	v
s:dimensionMenuLoc	ftplugin/latex-suite/elementmacros.vim	/^let s:dimensionMenuLoc  = g:Tex_ElementsMenuLocation.'Dimension.'$/;"	v
s:document	ftplugin/latex-suite/envmacros.vim	/^let s:document =   "\\\\documentclass[<+options+>]{<+class+>}\\<cr>\\<cr>\\\\begin{document}\\<cr><++>\\<cr>\\\\end{document}"$/;"	v
s:doing_extra_html_mappings	ftplugin/html/HTML.vim	/^        let s:doing_extra_html_mappings = 1$/;"	v
s:doing_internal_html_mappings	ftplugin/html/HTML.vim	/^let s:doing_internal_html_mappings = 1$/;"	v
s:done	ftplugin/latex-suite/bibtex.vim	/^let s:done = 1$/;"	v
s:doneFunctionDefinitions	ftplugin/latex-suite/main.vim	/^let s:doneFunctionDefinitions = 1$/;"	v
s:doneMappings	ftplugin/latex-suite/main.vim	/^	let s:doneMappings = 1$/;"	v
s:doneOnce	ftplugin/latex-suite/elementmacros.vim	/^let s:doneOnce = 1$/;"	v
s:doneOnce	ftplugin/latex-suite/envmacros.vim	/^let s:doneOnce = 1$/;"	v
s:doneOnce	ftplugin/latex-suite/packages.vim	/^let s:doneOnce = 1$/;"	v
s:doneOnce	ftplugin/latex-suite/wizardfuncs.vim	/^let s:doneOnce = 1$/;"	v
s:dotvim	autoload/getscript.vim	/^  let s:dotvim= ".vim"$/;"	v
s:dotvim	autoload/getscript.vim	/^  let s:dotvim= "vimfiles"$/;"	v
s:dtd_cpo_save	syntax/dtd.vim	/^    let s:dtd_cpo_save = &cpo$/;"	v
s:e_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:e_standsfor = 'editor'$/;"	v
s:encoding	keymap/croatian.vim	/^	let s:encoding = 'cp1250'$/;"	v
s:encoding	keymap/croatian.vim	/^	let s:encoding = 'iso-8859-2'$/;"	v
s:encoding	keymap/croatian.vim	/^let s:encoding = &enc$/;"	v
s:end	syntax/2html.vim	/^    let s:end = line("$")$/;"	v
s:end	syntax/2html.vim	/^  let s:end = html_end_line$/;"	v
s:end	syntax/2html.vim	/^  let s:end = line("$")$/;"	v
s:end_conditional_directive_rx	indent/make.vim	/^let s:end_conditional_directive_rx = '^\\s*\\%(else\\|endif\\)\\>'$/;"	v
s:end_end_regex	indent/ruby.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end\\>'$/;"	v
s:end_middle_regex	indent/ruby.vim	/^let s:end_middle_regex = '\\<\\%(ensure\\|else\\|\\%(\\%(^\\|;\\)\\s*\\)\\@<=\\<rescue\\>\\|when\\|elsif\\)\\>'$/;"	v
s:end_skip_expr	indent/ruby.vim	/^let s:end_skip_expr = s:skip_expr .$/;"	v
s:end_start_regex	indent/ruby.vim	/^let s:end_start_regex = '^\\s*\\zs\\<\\%(module\\|class\\|def\\|if\\|for' .$/;"	v
s:endline	indent/php.vim	/^let s:endline= '\\s*\\%(\/\/.*\\|#.*\\|\/\\*.*\\*\/\\s*\\)\\=$'$/;"	v
s:erroricon	plugin/errormarker.vim	/^    let s:erroricon = " icon=" . escape (g:errormarker_erroricon, '| \\')$/;"	v
s:erroricon	plugin/errormarker.vim	/^let s:erroricon = ""$/;"	v
s:escape_chars	plugin/NERD_tree.vim	/^    let s:escape_chars =  " \\\\`\\|\\"#%&,?()\\*^<>"$/;"	v
s:escape_chars	plugin/NERD_tree.vim	/^    let s:escape_chars =  " `\\|\\"#%&,?()\\*^<>"$/;"	v
s:escfilename	plugin/bash-support.vim	/^	let s:escfilename       = ' \\%#[]'$/;"	v
s:escfilename	plugin/bash-support.vim	/^	let s:escfilename       = ''$/;"	v
s:escfilename	plugin/c.vim	/^  let s:escfilename 	= ' \\%#[]'$/;"	v
s:escfilename	plugin/c.vim	/^  let s:escfilename      = ''$/;"	v
s:expandedtab	syntax/2html.vim	/^	let s:expandedtab = substitute(s:expandedtab, '\\t', repeat(' ', i), '')$/;"	v
s:expandedtab	syntax/2html.vim	/^      let s:expandedtab = strpart(s:line, s:startcol - 1, s:col - s:startcol)$/;"	v
s:ext	tutor/tutor.vim	/^      let s:ext = "." . strpart(s:lang, 0, 2)$/;"	v
s:ext	tutor/tutor.vim	/^      let s:ext = ".cs"$/;"	v
s:ext	tutor/tutor.vim	/^      let s:ext = ".de"$/;"	v
s:ext	tutor/tutor.vim	/^      let s:ext = ".nl"$/;"	v
s:ext	tutor/tutor.vim	/^      let s:ext = ".pl"$/;"	v
s:ext	tutor/tutor.vim	/^      let s:ext = ".sk"$/;"	v
s:ext	tutor/tutor.vim	/^    let s:ext = ".cs.cp1250"$/;"	v
s:ext	tutor/tutor.vim	/^    let s:ext = ".el"$/;"	v
s:ext	tutor/tutor.vim	/^    let s:ext = ".el.cp737"$/;"	v
s:ext	tutor/tutor.vim	/^    let s:ext = ".el.utf-8"$/;"	v
s:ext	tutor/tutor.vim	/^    let s:ext = ".hr.cp1250"$/;"	v
s:ext	tutor/tutor.vim	/^    let s:ext = ".hu.cp1250"$/;"	v
s:ext	tutor/tutor.vim	/^    let s:ext = ".ja.euc"$/;"	v
s:ext	tutor/tutor.vim	/^    let s:ext = ".ja.sjis"$/;"	v
s:ext	tutor/tutor.vim	/^    let s:ext = ".ko.euc"$/;"	v
s:ext	tutor/tutor.vim	/^    let s:ext = ".pl.cp1250"$/;"	v
s:ext	tutor/tutor.vim	/^    let s:ext = ".sk.cp1250"$/;"	v
s:ext	tutor/tutor.vim	/^    let s:ext = ".tr.iso9"$/;"	v
s:ext	tutor/tutor.vim	/^    let s:ext = ".zh.big5"$/;"	v
s:ext	tutor/tutor.vim	/^    let s:ext = ".zh.euc"$/;"	v
s:ext	tutor/tutor.vim	/^    let s:ext = '.hr'$/;"	v
s:ext	tutor/tutor.vim	/^    let s:ext = '.hu'$/;"	v
s:ext	tutor/tutor.vim	/^    let s:ext = '.ru'$/;"	v
s:ext	tutor/tutor.vim	/^    let s:ext = '.ru.cp1251'$/;"	v
s:ext	tutor/tutor.vim	/^  let s:ext .= '.utf-8'$/;"	v
s:ext	tutor/tutor.vim	/^  let s:ext = ""$/;"	v
s:ext	tutor/tutor.vim	/^  let s:ext = "." . $xx$/;"	v
s:ext	tutor/tutor.vim	/^  let s:ext = ".de"$/;"	v
s:ext	tutor/tutor.vim	/^  let s:ext = ".eo.utf-8"$/;"	v
s:ext	tutor/tutor.vim	/^  let s:ext = ".vi.utf-8"$/;"	v
s:ext	tutor/tutor.vim	/^let s:ext = ""$/;"	v
s:f	spell/cleanadd.vim	/^      let s:f = escape(s:fname, ' \\|<')$/;"	v
s:f	spell/cleanadd.vim	/^      let s:f = fnameescape(s:fname)$/;"	v
s:fgc	syntax/2html.vim	/^  let s:fgc = ( &background == "dark" ? "#ffffff" : "#000000" )$/;"	v
s:fgc	syntax/2html.vim	/^let s:fgc = s:HtmlColor(synIDattr(hlID("Normal"), "fg#", s:whatterm))$/;"	v
s:figure	ftplugin/latex-suite/envmacros.vim	/^let s:figure =    "\\\\begin{figure}[<+htpb+>]\\<cr>\\\\begin{center}\\<cr>\\\\includegraphics{<+file+>}\\<cr>\\\\end{center}\\<cr>\\\\caption{<+caption text+>}\\<cr>\\\\label{fig:<+label+>}\\<cr>\\\\end{figure}<++>"$/;"	v
s:figure_graphicx	ftplugin/latex-suite/envmacros.vim	/^let s:figure_graphicx =    "\\\\begin{figure}[<+htpb+>]\\<cr>\\\\begin{center}\\<cr>ZIG\\<cr>\\\\end{center}\\<cr>\\\\caption{<+caption text+>}\\<cr>\\\\label{fig:<+label+>}\\<cr>\\\\end{figure}<++>"$/;"	v
s:filler	syntax/2html.vim	/^  let s:filler = diff_filler(s:lnum)$/;"	v
s:fname	syntax/colortest.vim	/^    let s:fname = escape(s:fname, ' \\|')$/;"	v
s:fname	syntax/colortest.vim	/^    let s:fname = fnameescape(s:fname)$/;"	v
s:fname	syntax/colortest.vim	/^  let s:fname = expand('<sfile>')$/;"	v
s:folded_assignment_rx	indent/make.vim	/^let s:folded_assignment_rx = '^\\s*\\h\\w*\\s*[+?]\\=='$/;"	v
s:foldfillchar	syntax/2html.vim	/^    let s:foldfillchar = '-'$/;"	v
s:foldfillchar	syntax/2html.vim	/^  let s:foldfillchar = &fillchars[matchend(&fillchars, 'fold:')]$/;"	v
s:fontMenuLoc	ftplugin/latex-suite/elementmacros.vim	/^let s:fontMenuLoc       = g:Tex_ElementsMenuLocation.'Font.'$/;"	v
s:found_lower	ftplugin/html/HTML.vim	/^    let s:found_lower = search('\\C<\\(\\s*\/\\)\\?\\s*\\l\\+\\_[^<>]*>', 'wn')$/;"	v
s:found_upper	ftplugin/html/HTML.vim	/^    let s:found_upper = search('\\C<\\(\\s*\/\\)\\?\\s*\\u\\+\\_[^<>]*>', 'wn')$/;"	v
s:ft_rules_udev_rules_pattern	filetype.vim	/^let s:ft_rules_udev_rules_pattern = '^\\s*\\cudev_rules\\s*=\\s*"\\([^"]\\{-1,}\\)\/*".*'$/;"	v
s:ftplugin_sql_objects	ftplugin/sql.vim	/^let s:ftplugin_sql_objects = $/;"	v
s:function	ftplugin/php.vim	/^let s:function = '\\(abstract\\s\\+\\|final\\s\\+\\|private\\s\\+\\|protected\\s\\+\\|public\\s\\+\\|static\\s\\+\\)*function'$/;"	v
s:gitFunctions	plugin/vcsgit.vim	/^let s:gitFunctions = {}$/;"	v
s:gitFunctions	plugin/vcsgit.vim	/^let s:gitFunctions.AnnotateSplitRegex = ') '$/;"	v
s:green	colors/astronaut.vim	/^ let s:green   = "darkgreen"$/;"	v
s:green	colors/astronaut.vim	/^ let s:green   = "green"$/;"	v
s:green	colors/twilight.vim	/^let s:green = '#a2a96f'$/;"	v
s:grey	colors/twilight.vim	/^let s:grey = '#303030'$/;"	v
s:grey_blue	colors/twilight.vim	/^let s:grey_blue = '#8a9597'$/;"	v
s:h_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:h_standsfor = 'howpublished'$/;"	v
s:hgFunctions	plugin/vcshg.vim	/^let s:hgFunctions = {}$/;"	v
s:hgFunctions	plugin/vcshg.vim	/^let s:hgFunctions.AnnotateSplitRegex = '\\d\\+: '$/;"	v
s:hidden	syntax/hitest.vim	/^let s:hidden      = &hidden$/;"	v
s:hit	indent/GenericIndent.vim	/^let s:hit=0$/;"	v
s:html_encoding	syntax/2html.vim	/^    let s:html_encoding = ""$/;"	v
s:html_encoding	syntax/2html.vim	/^    let s:html_encoding = "Big5"$/;"	v
s:html_encoding	syntax/2html.vim	/^    let s:html_encoding = 'GBK'$/;"	v
s:html_encoding	syntax/2html.vim	/^    let s:html_encoding = 'GB_2312-80'$/;"	v
s:html_encoding	syntax/2html.vim	/^    let s:html_encoding = 'KS_C_5601-1987'$/;"	v
s:html_encoding	syntax/2html.vim	/^    let s:html_encoding = 'Shift_JIS'$/;"	v
s:html_encoding	syntax/2html.vim	/^    let s:html_encoding = 'UTF-8'$/;"	v
s:html_encoding	syntax/2html.vim	/^    let s:html_encoding = 'iso-8859-1'$/;"	v
s:html_encoding	syntax/2html.vim	/^    let s:html_encoding = substitute(s:vim_encoding, '.*', '\\U\\0', '')$/;"	v
s:html_encoding	syntax/2html.vim	/^    let s:html_encoding = substitute(s:vim_encoding, 'cp', 'windows-', '')$/;"	v
s:html_encoding	syntax/2html.vim	/^  let s:html_encoding = html_use_encoding$/;"	v
s:htmlfont	syntax/2html.vim	/^  let s:htmlfont = "monospace"$/;"	v
s:htmlfont	syntax/2html.vim	/^  let s:htmlfont = html_font . ", monospace"$/;"	v
s:i	ftplugin/ocaml.vim	/^  let s:i = g:omlet_indent_struct$/;"	v
s:i	ftplugin/ocaml.vim	/^  let s:i = matchstr(s:m,'\\d\\+')$/;"	v
s:i	ftplugin/ocaml.vim	/^  let s:i = s:idef$/;"	v
s:i	macros/less.vim	/^    let s:i = s:i + 1$/;"	v
s:i	macros/less.vim	/^  let s:i = 0$/;"	v
s:i	menu.vim	/^      let s:i = stridx(s:n, "\\n")$/;"	v
s:i	menu.vim	/^  let s:i = stridx(s:n, "\\n")$/;"	v
s:i	syntax/help.vim	/^let s:i = match(expand("%"), '\\.\\a\\ax$')$/;"	v
s:i_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:i_standsfor = 'institution'$/;"	v
s:id	syntax/2html.vim	/^	let s:id = diff_hlID(s:lnum, s:col)$/;"	v
s:id	syntax/2html.vim	/^	let s:id = synID(s:lnum, s:col, 1)$/;"	v
s:id	syntax/2html.vim	/^      let s:id = synIDtrans(s:id)$/;"	v
s:id	syntax/2html.vim	/^  let s:id = strpart(s:idlist, 0, s:col)$/;"	v
s:id_name	syntax/2html.vim	/^      let s:id_name = synIDattr(s:id, "name", s:whatterm)$/;"	v
s:id_name	syntax/2html.vim	/^  let s:id_name = synIDattr(s:id, "name", s:whatterm)$/;"	v
s:idef	ftplugin/ocaml.vim	/^  let s:idef = 2$/;"	v
s:idef	ftplugin/ocaml.vim	/^  let s:idef = g:omlet_indent$/;"	v
s:idef	ftplugin/ocaml.vim	/^  let s:idef = matchstr(s:m,'\\d\\+')$/;"	v
s:idlist	syntax/2html.vim	/^  let s:idlist = strpart(s:idlist, s:col + 1)$/;"	v
s:idlist	syntax/2html.vim	/^let s:idlist = ","$/;"	v
s:idlist	syntax/2html.vim	/^let s:idlist = strpart(s:idlist, 1)$/;"	v
s:idx	menu.vim	/^      let s:idx = s:idx + 10$/;"	v
s:idx	menu.vim	/^    let s:idx = 100$/;"	v
s:idx	menu.vim	/^  let s:idx = s:idx + 10$/;"	v
s:idx	menu.vim	/^let s:idx = 100$/;"	v
s:idx	optwin.vim	/^let s:idx = 1$/;"	v
s:ignore_opt	colors/marklar.vim	/^    let s:ignore_opt = 1$/;"	v
s:incnum	ftplugin/latex-suite/main.vim	/^let s:incnum = 0$/;"	v
s:inheritance_dent	indent/eiffel.vim	/^let s:inheritance_dent = '\\s*\\(redefine\\|rename\\|export\\)\\>'$/;"	v
s:initBlanks	plugin/imaps.vim	/^let s:initBlanks = ''$/;"	v
s:initLatexSuite	ftplugin/tex_latexSuite.vim	/^	let s:initLatexSuite = 1$/;"	v
s:installation	plugin/bash-support.vim	/^		let s:installation	= 'system'$/;"	v
s:installation	plugin/bash-support.vim	/^	let s:installation			= 'system'$/;"	v
s:installation	plugin/bash-support.vim	/^	let s:installation	= 'local'$/;"	v
s:installation	plugin/c.vim	/^		let s:installation	= 'system'$/;"	v
s:installation	plugin/c.vim	/^	let s:installation	   = 'system'$/;"	v
s:installation	plugin/c.vim	/^	let s:installation	= 'local'$/;"	v
s:interface	ftplugin/php.vim	/^let s:interface = 'interface'$/;"	v
s:internal_html_template	ftplugin/html/HTML.vim	/^let s:internal_html_template=$/;"	v
s:isEditFileRunning	plugin/vcscommand.vim	/^let s:isEditFileRunning = 0$/;"	v
s:italic	colors/astronaut.vim	/^ let s:italic= ""$/;"	v
s:italic	colors/astronaut.vim	/^ let s:italic= ",italic"$/;"	v
s:j_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:j_standsfor = 'journal'$/;"	v
s:just_inserted_rule_rx	indent/make.vim	/^let s:just_inserted_rule_rx = '^\\s*[^#:]\\+:\\{1,2}$'$/;"	v
s:k_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:k_standsfor = 'isbn'$/;"	v
s:keepcpo	autoload/getscript.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	autoload/netrw.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	autoload/netrwFileHandlers.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	autoload/tar.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	autoload/vimball.vim	/^let s:keepcpo        = &cpo$/;"	v
s:keepcpo	autoload/zip.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugin/getscriptPlugin.vim	/^let s:keepcpo                = &cpo$/;"	v
s:keepcpo	plugin/netrwPlugin.vim	/^let s:keepcpo            = &cpo$/;"	v
s:keepcpo	plugin/netrwPlugin.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	plugin/tarPlugin.vim	/^let s:keepcpo          = &cpo$/;"	v
s:keepcpo	plugin/vimballPlugin.vim	/^let s:keepcpo              = &cpo$/;"	v
s:keepcpo	plugin/zipPlugin.vim	/^let s:keepcpo          = &cpo$/;"	v
s:key	ftplugin/latex-suite/bibtex.vim	/^let s:key='<+key+>'$/;"	v
s:lang	menu.vim	/^      let s:lang = ""$/;"	v
s:lang	menu.vim	/^      let s:lang = &langmenu$/;"	v
s:lang	menu.vim	/^      let s:lang = s:lang . '.' . &enc$/;"	v
s:lang	menu.vim	/^      let s:lang = substitute(s:lang, '\\.[^.]*', "", "")$/;"	v
s:lang	menu.vim	/^    let s:lang = substitute(s:lang, " ", "_", "g")$/;"	v
s:lang	menu.vim	/^    let s:lang = substitute(s:lang, "@euro", "", "")$/;"	v
s:lang	menu.vim	/^    let s:lang = substitute(s:lang, '\\.iso8859', ".iso_8859", "")$/;"	v
s:lang	menu.vim	/^    let s:lang = substitute(s:lang, 'iso_8859-15\\=$', "latin1", "")$/;"	v
s:lang	menu.vim	/^    let s:lang = substitute(tolower(s:lang), '\\.iso-', ".iso_", "")$/;"	v
s:lang	menu.vim	/^    let s:lang = v:lang$/;"	v
s:lang	tutor/tutor.vim	/^    let s:lang = $LANG$/;"	v
s:lang	tutor/tutor.vim	/^    let s:lang = $LC_ALL$/;"	v
s:lang	tutor/tutor.vim	/^    let s:lang = substitute(s:lang, '\\c@euro', '', '')$/;"	v
s:lang	tutor/tutor.vim	/^    let s:lang = v:lang$/;"	v
s:lang	tutor/tutor.vim	/^  let s:lang = ""$/;"	v
s:lastElementsLocation	ftplugin/latex-suite/elementmacros.vim	/^let s:lastElementsLocation = g:Tex_ElementsMenuLocation$/;"	v
s:lastVlnum	indent/GenericIndent.vim	/^let s:lastVlnum=0$/;"	v
s:last_mps	macros/matchit.vim	/^let s:last_mps = ""$/;"	v
s:last_mps	plugin/matchit.vim	/^let s:last_mps = ""$/;"	v
s:last_mps	plugin/plugin/matchit.vim	/^let s:last_mps = ""$/;"	v
s:last_words	macros/matchit.vim	/^let s:last_words = ":"$/;"	v
s:last_words	plugin/matchit.vim	/^let s:last_words = ":"$/;"	v
s:last_words	plugin/plugin/matchit.vim	/^let s:last_words = ":"$/;"	v
s:lazyredraw	syntax/hitest.vim	/^let s:lazyredraw  = &lazyredraw$/;"	v
s:len	syntax/2html.vim	/^	  let s:len = &columns$/;"	v
s:len	syntax/2html.vim	/^    let s:len = strlen(s:line)$/;"	v
s:lenSpaceStr	plugin/NERD_commenter.vim	/^let s:lenSpaceStr = strlen(s:spaceStr)$/;"	v
s:length_pattern	syntax/cdrtoc.vim	/^let s:length_pattern = '\\%(\\%([0-5]\\d\\|\\d\\):\\%([0-5]\\d\\|\\d\\):\\%([0-6]\\d\\|7[0-5]\\|\\d\\)\\|\\d\\+\\)\\>'$/;"	v
s:letlim	indent/ocaml.vim	/^let s:letlim = '\\(\\<\\(sig\\|struct\\)\\|;;\\)\\s*$'$/;"	v
s:letlim	indent/sml.vim	/^let s:letlim = '\\(\\<\\(sig\\|struct\\)\\|;;\\)\\s*$'$/;"	v
s:letpat	indent/ocaml.vim	/^let s:letpat = '^\\s*\\(let\\|type\\|module\\|class\\|open\\|exception\\|val\\|include\\|external\\)\\>'$/;"	v
s:letpat	indent/sml.vim	/^let s:letpat = '^\\s*\\(let\\|type\\|module\\|class\\|open\\|exception\\|val\\|include\\|external\\)\\>'$/;"	v
s:light_grey_blue	colors/twilight.vim	/^let s:light_grey_blue = '#a0a8b0'$/;"	v
s:light_orange	colors/twilight.vim	/^let s:light_orange = '#ebc471'$/;"	v
s:lightgreen	colors/twilight.vim	/^let s:lightgreen = '#c2c98f'$/;"	v
s:lightgrey	colors/twilight.vim	/^let s:lightgrey = '#605958'$/;"	v
s:lim	indent/ocaml.vim	/^let s:lim = '^\\s*\\(exception\\|external\\|include\\|let\\|module\\|open\\|type\\|val\\)\\>'$/;"	v
s:lim	indent/sml.vim	/^let s:lim = '^\\s*\\(exception\\|external\\|include\\|let\\|module\\|open\\|type\\|val\\)\\>'$/;"	v
s:line	syntax/2html.vim	/^	  let s:line = s:line . repeat(' ', &columns - s:len)$/;"	v
s:line	syntax/2html.vim	/^    let s:line = getline(s:lnum)$/;"	v
s:line1	scripts.vim	/^    let s:line1 = substitute(s:line1, '\\<env\\s\\+', '', '')$/;"	v
s:line1	scripts.vim	/^    let s:line1 = substitute(s:line1, '\\S\\+=\\S\\+', '', 'g')$/;"	v
s:line1	scripts.vim	/^let s:line1 = getline(1)$/;"	v
s:line2	scripts.vim	/^  let s:line2 = getline(2)$/;"	v
s:line3	scripts.vim	/^  let s:line3 = getline(3)$/;"	v
s:line4	scripts.vim	/^  let s:line4 = getline(4)$/;"	v
s:line5	scripts.vim	/^  let s:line5 = getline(5)$/;"	v
s:lines	ftplugin/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lines	syntax/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:list	ftplugin/latex-suite/envmacros.vim	/^let s:list =       "\\\\begin{list}{<+label+>}{<+spacing+>}\\<cr>\\\\item <++>\\<cr>\\\\end{list}<++>"$/;"	v
s:list	plugin/ScrollColor.vim	/^let s:list = ""$/;"	v
s:lmax	ftplugin/fortran.vim	/^      let s:lmax = line("$")$/;"	v
s:lmax	ftplugin/fortran.vim	/^    let s:lmax = 250$/;"	v
s:lmax	indent/fortran.vim	/^      let s:lmax = line("$")$/;"	v
s:lmax	indent/fortran.vim	/^    let s:lmax = 250$/;"	v
s:ln	ftplugin/fortran.vim	/^      let s:ln = s:ln + 1$/;"	v
s:ln	ftplugin/fortran.vim	/^    let s:ln=1$/;"	v
s:ln	indent/fortran.vim	/^      let s:ln = s:ln + 1$/;"	v
s:ln	indent/fortran.vim	/^    let s:ln=1$/;"	v
s:lnum	optwin.vim	/^let s:lnum = line("$")$/;"	v
s:lnum	syntax/2html.vim	/^    let s:lnum = 1$/;"	v
s:lnum	syntax/2html.vim	/^    let s:lnum = foldclosedend(s:lnum)$/;"	v
s:lnum	syntax/2html.vim	/^  let s:lnum = 1$/;"	v
s:lnum	syntax/2html.vim	/^  let s:lnum = html_start_line$/;"	v
s:lnum	syntax/2html.vim	/^  let s:lnum = s:lnum + 1$/;"	v
s:low_color	colors/jellybeans.vim	/^	let s:low_color = 0$/;"	v
s:low_color	colors/jellybeans.vim	/^	let s:low_color = 1$/;"	v
s:lz	macros/less.vim	/^let s:lz = &lz$/;"	v
s:m	ftplugin/ocaml.vim	/^let s:m = matchstr(s:modeline,'default\\s*=\\s*\\d\\+')$/;"	v
s:m	ftplugin/ocaml.vim	/^let s:m = matchstr(s:modeline,'struct\\s*=\\s*\\d\\+')$/;"	v
s:m_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:m_standsfor = 'month'$/;"	v
s:macrodirpath	ftplugin/latex-suite/custommacros.vim	/^		let s:macrodirpath = $HOME."\/vimfiles\/ftplugin\/latex-suite\/macros\/"$/;"	v
s:macrodirpath	ftplugin/latex-suite/custommacros.vim	/^		let s:macrodirpath = $VIM."\/vimfiles\/ftplugin\/latex-suite\/macros\/"$/;"	v
s:macrodirpath	ftplugin/latex-suite/custommacros.vim	/^	let s:macrodirpath = $HOME."\/.vim\/ftplugin\/latex-suite\/macros\/"$/;"	v
s:magenta	colors/astronaut.vim	/^ let s:magenta = "darkmagenta"$/;"	v
s:magenta	colors/astronaut.vim	/^ let s:magenta = "magenta"$/;"	v
s:mainmenuname	ftplugin/latex-suite/texmenuconf.vim	/^let s:mainmenuname = g:Tex_MenuPrefix.'S&uite.'$/;"	v
s:man_find_arg	ftplugin/man.vim	/^    let s:man_find_arg = "-l"$/;"	v
s:man_find_arg	ftplugin/man.vim	/^let s:man_find_arg = "-w"$/;"	v
s:man_sect_arg	ftplugin/man.vim	/^    let s:man_sect_arg = "-s"$/;"	v
s:man_sect_arg	ftplugin/man.vim	/^let s:man_sect_arg = ""$/;"	v
s:man_tag_depth	ftplugin/man.vim	/^let s:man_tag_depth = 0$/;"	v
s:mapleader	ftplugin/latex-suite/texmenuconf.vim	/^let s:mapleader = exists('mapleader') ? mapleader : "\\\\"$/;"	v
s:mapleader	ftplugin/latex-suite/wizardfuncs.vim	/^let s:mapleader = exists('mapleader') ? mapleader : "\\\\"$/;"	v
s:match_words	ftplugin/aspvbs.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	ftplugin/aspvbs.vim	/^let s:match_words = ""$/;"	v
s:match_words	ftplugin/config.vim	/^let s:match_words = ""$/;"	v
s:match_words	ftplugin/eruby.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	ftplugin/eruby.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	ftplugin/eruby.vim	/^let s:match_words = ""$/;"	v
s:match_words	ftplugin/haml.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	ftplugin/haml.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	ftplugin/haml.vim	/^let s:match_words = ""$/;"	v
s:match_words	ftplugin/jsp.vim	/^    let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	ftplugin/jsp.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	ftplugin/jsp.vim	/^let s:match_words = ""$/;"	v
s:match_words	ftplugin/php.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	ftplugin/php.vim	/^let s:match_words = ""$/;"	v
s:match_words	ftplugin/xhtml.vim	/^    let s:match_words = b:match_words . "," . s:match_words$/;"	v
s:match_words	ftplugin/xhtml.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	ftplugin/xhtml.vim	/^let s:match_words = ""$/;"	v
s:maxoff	indent/python.vim	/^let s:maxoff = 50	" maximum number of lines to look backwards for ()$/;"	v
s:menuEnabled	plugin/vcscommand.vim	/^let s:menuEnabled = !VCSCommandGetOption('VCSCommandDisableMenu', 0)$/;"	v
s:menuPriority	plugin/vcscommand.vim	/^let s:menuPriority = VCSCommandGetOption('VCSCommandMenuPriority', '')$/;"	v
s:menuRoot	plugin/vcscommand.vim	/^let s:menuRoot = VCSCommandGetOption('VCSCommandMenuRoot', '&Plugin.VCS')$/;"	v
s:menu_char_prefix	plugin/taglist.vim	/^let s:menu_char_prefix =$/;"	v
s:menu_div	ftplugin/latex-suite/packages.vim	/^let s:menu_div = 20$/;"	v
s:mid_grey_blue	colors/twilight.vim	/^let s:mid_grey_blue = '#64686c'$/;"	v
s:minipage	ftplugin/latex-suite/envmacros.vim	/^let s:minipage =   "\\\\begin{minipage}[<+tb+>]{<+width+>}\\<cr><++>\\<cr>\\\\end{minipage}<++>"$/;"	v
s:ml	ftplugin/latex-suite/main.vim	/^let s:ml = exists('g:mapleader') ? g:mapleader : '\\'$/;"	v
s:mmssff_pattern	syntax/cdrtoc.vim	/^let s:mmssff_pattern = '\\%([0-5]\\d\\|\\d\\):\\%([0-5]\\d\\|\\d\\):\\%([0-6]\\d\\|7[0-5]\\|\\d\\)\\>'$/;"	v
s:modeline	ftplugin/ocaml.vim	/^  let s:modeline = ""$/;"	v
s:modeline	ftplugin/ocaml.vim	/^  let s:modeline = getline(".")$/;"	v
s:modes	ftplugin/html/HTML.vim	/^let s:modes = {$/;"	v
s:module	indent/ocaml.vim	/^let s:module = '\\<\\%(begin\\|sig\\|struct\\|object\\)\\>'$/;"	v
s:module	indent/sml.vim	/^let s:module = '\\<\\%(let\\|sig\\|struct\\)\\>'$/;"	v
s:molokai_original	colors/molokai.vim	/^    let s:molokai_original = 0$/;"	v
s:molokai_original	colors/molokai.vim	/^    let s:molokai_original = g:molokai_original$/;"	v
s:more	syntax/hitest.vim	/^let s:more	  = &more$/;"	v
s:moria_fontface	colors/moria.vim	/^    let s:moria_fontface = "plain"$/;"	v
s:moria_fontface	colors/moria.vim	/^    let s:moria_fontface = g:moria_fontface$/;"	v
s:moria_monochrome	colors/moria.vim	/^    let s:moria_monochrome = 0$/;"	v
s:moria_monochrome	colors/moria.vim	/^    let s:moria_monochrome = g:moria_monochrome$/;"	v
s:moria_style	colors/moria.vim	/^    let s:moria_style = &background $/;"	v
s:moria_style	colors/moria.vim	/^    let s:moria_style = &background$/;"	v
s:moria_style	colors/moria.vim	/^    let s:moria_style = g:moria_style$/;"	v
s:myName	ftplugin/AppendMatchGroup.vim	/^let s:myName=expand("<sfile>:t")$/;"	v
s:myScriptName	indent/GenericIndent.vim	/^let s:myScriptName=expand("<sfile>:t")$/;"	v
s:my_syncolor	syntax/doxygen.vim	/^    let s:my_syncolor=1$/;"	v
s:my_syncolor	syntax/doxygen.vim	/^  let s:my_syncolor=0$/;"	v
s:my_synlink	syntax/doxygen.vim	/^    let s:my_synlink=1$/;"	v
s:my_synlink	syntax/doxygen.vim	/^  let s:my_synlink=0$/;"	v
s:n	menu.vim	/^	let s:n = ""$/;"	v
s:n	menu.vim	/^	let s:n = strpart(s:n, s:i + 1, 19999)$/;"	v
s:n	menu.vim	/^    let s:n = ""$/;"	v
s:n	menu.vim	/^    let s:n = strpart(s:n, s:i + 1, 19999)$/;"	v
s:n	menu.vim	/^  let s:n = globpath(&runtimepath, "keymap\/*.vim")$/;"	v
s:n	menu.vim	/^let s:n = globpath(&runtimepath, "colors\/*.vim")$/;"	v
s:n	menu.vim	/^let s:n = globpath(&runtimepath, "compiler\/*.vim")$/;"	v
s:n	syntax/2html.vim	/^	let s:n = 2$/;"	v
s:n	syntax/2html.vim	/^      let s:n = s:n - 1$/;"	v
s:n	syntax/2html.vim	/^    let s:n = s:filler$/;"	v
s:n_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:n_standsfor = 'number'$/;"	v
s:name	menu.vim	/^	let s:name = s:n$/;"	v
s:name	menu.vim	/^	let s:name = strpart(s:n, 0, s:i)$/;"	v
s:name	menu.vim	/^      let s:name = substitute(s:name, '\\c.*[\/\\\\:\\]]\\([^\/\\\\:_]*\\)\\(_[0-9a-zA-Z-]*\\)\\=\\.vim', '\\1', '')$/;"	v
s:name	menu.vim	/^    let s:name = s:n$/;"	v
s:name	menu.vim	/^    let s:name = strpart(s:n, 0, s:i)$/;"	v
s:name	menu.vim	/^  let s:name = substitute(s:name, '\\c.*[\/\\\\:\\]]\\([^\/\\\\:]*\\)\\.vim', '\\1', '')$/;"	v
s:name	plugin/bufexplorer.vim	/^let s:name = '[BufExplorer]'$/;"	v
s:name	scripts.vim	/^    let s:name = 'wish'$/;"	v
s:name	scripts.vim	/^    let s:name = substitute(s:line1, '^#!.*[\/\\\\]\\(\\i\\+\\).*', '\\1', '')$/;"	v
s:name	scripts.vim	/^    let s:name = substitute(s:line1, '^#!.*\\<env\\>\\s\\+\\(\\i\\+\\).*', '\\1', '')$/;"	v
s:name	scripts.vim	/^    let s:name = substitute(s:line1, '^#!\\s*\\([^\/\\\\ ]*\\>\\).*', '\\1', '')$/;"	v
s:name	scripts.vim	/^    let s:name = substitute(s:line1, '^#!\\s*\\S*[\/\\\\]\\(\\i\\+\\).*', '\\1', '')$/;"	v
s:netrw_has_nt_rcp	autoload/netrw.vim	/^ let s:netrw_has_nt_rcp = 0$/;"	v
s:netrw_has_nt_rcp	autoload/netrw.vim	/^ let s:netrw_has_nt_rcp = 1$/;"	v
s:netrw_map_escape	autoload/netrw.vim	/^let s:netrw_map_escape = "<|\\n\\r\\\\\\<C-V>\\""$/;"	v
s:netrw_rcpmode	autoload/netrw.vim	/^ let s:netrw_rcpmode    = ''$/;"	v
s:netrw_rcpmode	autoload/netrw.vim	/^ let s:netrw_rcpmode    = '-b'$/;"	v
s:netrw_silentxfer	autoload/netrw.vim	/^ let s:netrw_silentxfer= ""$/;"	v
s:netrw_silentxfer	autoload/netrw.vim	/^ let s:netrw_silentxfer= "silent "$/;"	v
s:new	syntax/2html.vim	/^	let s:new = repeat(s:LeadingSpace, strlen(s:end) + 1) . repeat(s:difffillchar, 3)$/;"	v
s:new	syntax/2html.vim	/^	let s:new = repeat(s:difffillchar, 3)$/;"	v
s:new	syntax/2html.vim	/^	let s:new = s:new . " " . s:filler . " inserted lines "$/;"	v
s:new	syntax/2html.vim	/^	let s:new = s:new . repeat(s:difffillchar, &columns - strlen(s:new))$/;"	v
s:new	syntax/2html.vim	/^      let s:new = s:HtmlFormat(s:new, "DiffDelete")$/;"	v
s:new	syntax/2html.vim	/^      let s:new = s:HtmlFormat(s:new, "lnr")$/;"	v
s:new	syntax/2html.vim	/^      let s:new = s:new . repeat(s:foldfillchar, &columns - strlen(s:new))$/;"	v
s:new	syntax/2html.vim	/^      let s:new = s:new . s:HtmlFormat(s:expandedtab,  s:id_name)$/;"	v
s:new	syntax/2html.vim	/^    let s:new = ""$/;"	v
s:new	syntax/2html.vim	/^    let s:new = repeat(' ', strlen(s:end) - strlen(s:lnum)) . s:lnum . ' '$/;"	v
s:new	syntax/2html.vim	/^    let s:new = s:HtmlFormat(s:new, "Folded")$/;"	v
s:new	syntax/2html.vim	/^    let s:new = s:new . foldtextresult(s:lnum)$/;"	v
s:newwin	syntax/2html.vim	/^let s:newwin = winnr()$/;"	v
s:next_buffer_number	plugin/NERD_tree.vim	/^let s:next_buffer_number = 1$/;"	v
s:no_indent	indent/eiffel.vim	/^let s:no_indent = '^\\s*\\(class\\|feature\\|creation\\|inherit\\)\\>'$/;"	v
s:notPhpHereDoc	indent/php.vim	/^let s:notPhpHereDoc = '\\%(break\\|return\\|continue\\|exit\\|else\\)'$/;"	v
s:not_end	ftplugin/framescript.vim	/^  let s:not_end = '\\c\\%(\\<End\\)\\@<!'$/;"	v
s:notelse	ftplugin/fortran.vim	/^  let s:notelse = '\\%(\\<end\\s\\+\\|\\<else\\s\\+\\)\\@<!'$/;"	v
s:notend	ftplugin/ada.vim	/^   let s:notend      = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	ftplugin/aspvbs.vim	/^  let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	ftplugin/fortran.vim	/^  let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	ftplugin/sql.vim	/^let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	ftplugin/vhdl.vim	/^  let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notprocedure	ftplugin/fortran.vim	/^  let s:notprocedure = '\\%(\\s\\+procedure\\>\\)\\@!'$/;"	v
s:notselect	ftplugin/fortran.vim	/^  let s:notselect = '\\%(\\<select\\s\\+\\)\\@<!'$/;"	v
s:notslash	macros/matchit.vim	/^let s:notslash = '\\\\\\@<!\\%(\\\\\\\\\\)*'$/;"	v
s:notslash	plugin/matchit.vim	/^let s:notslash = '\\\\\\@<!\\%(\\\\\\\\\\)*'$/;"	v
s:notslash	plugin/plugin/matchit.vim	/^let s:notslash = '\\\\\\@<!\\%(\\\\\\\\\\)*'$/;"	v
s:numblines	syntax/2html.vim	/^  let s:numblines = &number$/;"	v
s:numblines	syntax/2html.vim	/^  let s:numblines = html_number_lines$/;"	v
s:o_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:o_standsfor = 'organization'$/;"	v
s:obj	indent/ocaml.vim	/^let s:obj = '^\\s*\\(constraint\\|inherit\\|initializer\\|method\\|val\\)\\>\\|\\<\\(object\\|object\\s*(.*)\\)\\s*$'$/;"	v
s:obj	indent/sml.vim	/^let s:obj = '^\\s*\\(constraint\\|inherit\\|initializer\\|method\\|val\\)\\>\\|\\<\\(object\\|object\\s*(.*)\\)\\s*$'$/;"	v
s:ocaml_word_char	ftplugin/ocaml.vim	/^    let s:ocaml_word_char = '\\w|[À-ÿ]|'''$/;"	v
s:old_cpo	plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:old_et	syntax/2html.vim	/^let s:old_et = &l:et$/;"	v
s:old_html_no_pre	syntax/2html.vim	/^  let s:old_html_no_pre = html_no_pre$/;"	v
s:old_icon	optwin.vim	/^let s:old_icon = &icon$/;"	v
s:old_icon	syntax/2html.vim	/^let s:old_icon = &icon$/;"	v
s:old_magic	syntax/2html.vim	/^let s:old_magic = &magic$/;"	v
s:old_paste	syntax/2html.vim	/^let s:old_paste = &paste$/;"	v
s:old_report	syntax/2html.vim	/^let s:old_report = &report$/;"	v
s:old_ru	optwin.vim	/^let s:old_ru = &ru$/;"	v
s:old_sc	optwin.vim	/^let s:old_sc = &sc$/;"	v
s:old_search	syntax/2html.vim	/^let s:old_search = @\/$/;"	v
s:old_title	optwin.vim	/^let s:old_title = &title$/;"	v
s:old_title	syntax/2html.vim	/^let s:old_title = &title$/;"	v
s:oldcolumn	syntax/lhaskell.vim	/^let s:oldcolumn=col(".")$/;"	v
s:oldcpo	syntax/tcsh.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldline	syntax/lhaskell.vim	/^let s:oldline=line(".")$/;"	v
s:oneProbe	syntax/dtrace.vim	/^let s:oneProbe = '\\%(BEGIN\\|END\\|ERROR\\|\\S\\{-}:\\S\\{-}:\\S\\{-}:\\S\\{-}\\)\\_s*'$/;"	v
s:optionOverrides	plugin/vcscommand.vim	/^let s:optionOverrides = {}$/;"	v
s:opts	colors/marklar.vim	/^        let s:opts = {'bold': 0, 'ignore': 1}$/;"	v
s:or_replace	ftplugin/sql.vim	/^let s:or_replace = '\\%(or\\s\\+replace\\s\\+\\)\\?'$/;"	v
s:orders	syntax/hostconf.vim	/^let s:orders = ['bind', 'hosts', 'nis']$/;"	v
s:ordot	ftplugin/cobol.vim	/^    let s:ordot = '\\|\\ze\\.\\%( \\@=\\|$\\)'$/;"	v
s:orgbufnr	syntax/2html.vim	/^let s:orgbufnr = winbufnr(0)$/;"	v
s:orgwin	syntax/2html.vim	/^let s:orgwin = bufwinnr(s:orgbufnr)$/;"	v
s:originBuffer	plugin/bufexplorer.vim	/^let s:originBuffer = 0$/;"	v
s:outdent	indent/eiffel.vim	/^let s:outdent = '^\\s*\\(else\\|invariant\\|variant\\|do\\|require\\|until\\|loop\\|local\\)\\>'$/;"	v
s:pA	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA = 'amenu <silent> 85 '.s:MathMenuName$/;"	v
s:pA	ftplugin/latex-suite/mathmacros.vim	/^let s:pA = 'amenu <silent> '.g:Tex_NextMenuLocation.' '.s:MathMenuName$/;"	v
s:pA1	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA1 = s:pA."&Arrows."$/;"	v
s:pA1	ftplugin/latex-suite/mathmacros.vim	/^let s:pA1 = s:pA."&Arrows."$/;"	v
s:pA10	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA10 = s:pA."&MathCreating."$/;"	v
s:pA10	ftplugin/latex-suite/mathmacros.vim	/^let s:pA10 = s:pA."&MathCreating."$/;"	v
s:pA11	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA11 = s:pA."&Styles."$/;"	v
s:pA11	ftplugin/latex-suite/mathmacros.vim	/^let s:pA11 = s:pA."&Styles."$/;"	v
s:pA12	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA12 = s:pA."&MathDiacritics."$/;"	v
s:pA12	ftplugin/latex-suite/mathmacros.vim	/^let s:pA12 = s:pA."&MathDiacritics."$/;"	v
s:pA13	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA13 = s:pA."&OverlineAndCo."$/;"	v
s:pA13	ftplugin/latex-suite/mathmacros.vim	/^let s:pA13 = s:pA."&OverlineAndCo."$/;"	v
s:pA14a	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA14a = s:pA."&Symbols1."$/;"	v
s:pA14a	ftplugin/latex-suite/mathmacros.vim	/^let s:pA14a = s:pA."&Symbols1."$/;"	v
s:pA14b	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA14b = s:pA."&Symbols2."$/;"	v
s:pA14b	ftplugin/latex-suite/mathmacros.vim	/^let s:pA14b = s:pA."&Symbols2."$/;"	v
s:pA14c	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA14c = s:pA."&Symbols3."$/;"	v
s:pA14c	ftplugin/latex-suite/mathmacros.vim	/^let s:pA14c = s:pA."&Symbols3."$/;"	v
s:pA15	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA15 = s:pA."&Logic."$/;"	v
s:pA15	ftplugin/latex-suite/mathmacros.vim	/^let s:pA15 = s:pA."&Logic."$/;"	v
s:pA16	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA16 = s:pA."&Limits1."$/;"	v
s:pA16	ftplugin/latex-suite/mathmacros.vim	/^let s:pA16 = s:pA."&Limits1."$/;"	v
s:pA16a	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA16a = s:pA."&Limits2."$/;"	v
s:pA16a	ftplugin/latex-suite/mathmacros.vim	/^let s:pA16a = s:pA."&Limits2."$/;"	v
s:pA17	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA17 = s:pA."Lo&g-likes."$/;"	v
s:pA17	ftplugin/latex-suite/mathmacros.vim	/^let s:pA17 = s:pA."Lo&g-likes."$/;"	v
s:pA18	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA18 = s:pA."MathSpacing."$/;"	v
s:pA18	ftplugin/latex-suite/mathmacros.vim	/^let s:pA18 = s:pA."MathSpacing."$/;"	v
s:pA1a	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA1a = s:pA."Arrows2."$/;"	v
s:pA1a	ftplugin/latex-suite/mathmacros.vim	/^let s:pA1a = s:pA."&nArrows."$/;"	v
s:pA1a	ftplugin/latex-suite/mathmacros.vim	/^let s:pA1a = s:pA."Arrows2."$/;"	v
s:pA1b	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA1b = s:pA."&nArrows."$/;"	v
s:pA2	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA2 = s:pA."&Greek.&Small."$/;"	v
s:pA2	ftplugin/latex-suite/mathmacros.vim	/^let s:pA2 = s:pA."&Greek.&Small."$/;"	v
s:pA2a	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA2a = s:pA."&MathFonts."$/;"	v
s:pA2a	ftplugin/latex-suite/mathmacros.vim	/^let s:pA2a = s:pA."&MathFonts."$/;"	v
s:pA3	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA3 = s:pA.'&Greek.&Big.' $/;"	v
s:pA3	ftplugin/latex-suite/mathmacros.vim	/^let s:pA3 = s:pA.'&Greek.&Big.' $/;"	v
s:pA4	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA4 = s:pA."&BinaryRel1."  $/;"	v
s:pA4	ftplugin/latex-suite/mathmacros.vim	/^let s:pA4 = s:pA."&BinaryRel1."  $/;"	v
s:pA4a	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA4a = s:pA."&nBinaryRel1."  $/;"	v
s:pA4a	ftplugin/latex-suite/mathmacros.vim	/^let s:pA4a = s:pA."&nBinaryRel1."  $/;"	v
s:pA5	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA5 = s:pA."&BinaryRel2."  $/;"	v
s:pA5	ftplugin/latex-suite/mathmacros.vim	/^let s:pA5 = s:pA."&BinaryRel2."  $/;"	v
s:pA5a	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA5a = s:pA."n&BinaryRel2."  "TODO: dorobiÃ¦ logarytmy$/;"	v
s:pA5a	ftplugin/latex-suite/mathmacros.vim	/^let s:pA5a = s:pA."n&BinaryRel2."  "TODO: dorobiæ logarytmy$/;"	v
s:pA6	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA6 = s:pA."&BinaryRel3."  $/;"	v
s:pA6	ftplugin/latex-suite/mathmacros.vim	/^let s:pA6 = s:pA."&BinaryRel3."  $/;"	v
s:pA6a	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA6a = s:pA."&nBinaryRel3."$/;"	v
s:pA6a	ftplugin/latex-suite/mathmacros.vim	/^let s:pA6a = s:pA."&nBinaryRel3."$/;"	v
s:pA7	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA7 = s:pA."&BinaryRel4."  $/;"	v
s:pA7	ftplugin/latex-suite/mathmacros.vim	/^let s:pA7 = s:pA."&BinaryRel4."  $/;"	v
s:pA8	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA8 = s:pA."&BinaryOp."$/;"	v
s:pA8	ftplugin/latex-suite/mathmacros.vim	/^let s:pA8 = s:pA."&BinaryOp."$/;"	v
s:pA8a	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA8a = s:pA."&BigOp."$/;"	v
s:pA8a	ftplugin/latex-suite/mathmacros.vim	/^let s:pA8a = s:pA."&BigOp."$/;"	v
s:pA9	ftplugin/latex-suite/mathmacros-utf.vim	/^let s:pA9 = s:pA."&Other1."$/;"	v
s:pA9	ftplugin/latex-suite/mathmacros.vim	/^let s:pA9 = s:pA."&Other1."$/;"	v
s:p_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:p_standsfor = 'pages'$/;"	v
s:path	ftplugin/latex-suite/custommacros.vim	/^let s:path = expand('<sfile>:p:h')$/;"	v
s:path	ftplugin/latex-suite/main.vim	/^let s:path = expand('<sfile>:p:h')$/;"	v
s:path	ftplugin/latex-suite/packages.vim	/^let s:path = fnameescape(expand("<sfile>:p:h"))$/;"	v
s:path	ftplugin/latex-suite/templates.vim	/^let s:path = fnameescape(expand("<sfile>:p:h"))$/;"	v
s:path	ftplugin/latex-suite/texmenuconf.vim	/^let s:path = fnameescape(expand("<sfile>:p:h"))$/;"	v
s:path	ftplugin/latex-suite/texproject.vim	/^let s:path = fnameescape(expand("<sfile>:p:h"))$/;"	v
s:path	ftplugin/latex-suite/texviewer.vim	/^let s:path = expand('<sfile>:p:h')$/;"	v
s:picture	ftplugin/latex-suite/envmacros.vim	/^let s:picture =    "\\\\begin{picture}(<+width+>, <+height+>)(<+xoff+>,<+yoff+>)\\<cr>\\\\put(<+xoff+>,<+yoff+>){\\\\framebox(<++>,<++>){<++>}}\\<cr>\\\\end{picture}<++>"$/;"	v
s:plugin_dir	plugin/bash-support.vim	/^		let s:plugin_dir  	= g:BASH_Support_Root_Dir.'\/'$/;"	v
s:plugin_dir	plugin/bash-support.vim	/^		let s:plugin_dir  = $HOME.'\/.vim\/'$/;"	v
s:plugin_dir	plugin/bash-support.vim	/^		let s:plugin_dir  = $VIM.'\/\/'$/;"	v
s:plugin_dir	plugin/bash-support.vim	/^  let s:plugin_dir  		  = $VIM.'\\\\'$/;"	v
s:plugin_dir	plugin/c.vim	/^		let s:plugin_dir  = $VIMRUNTIME.'\/'$/;"	v
s:plugin_dir	plugin/c.vim	/^  let s:plugin_dir       = $VIM.'\\vimfiles\\'$/;"	v
s:plugins	plugin/vcscommand.vim	/^let s:plugins = {}$/;"	v
s:prepended	autoload/syntaxcomplete.vim	/^let s:prepended  = ''$/;"	v
s:property	indent/sass.vim	/^let s:property = '^\\s*:\\|^\\s*[[:alnum:]-]\\+:'$/;"	v
s:q_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:q_standsfor = 'publisher'$/;"	v
s:quiet_errors	ftplugin/html/HTML.vim	/^    let s:quiet_errors = 1$/;"	v
s:r_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:r_standsfor = 'school'$/;"	v
s:red	colors/astronaut.vim	/^ let s:red     = "darkred"$/;"	v
s:red	colors/astronaut.vim	/^ let s:red     = "red"$/;"	v
s:red	colors/twilight.vim	/^let s:red = '#d08356'$/;"	v
s:refreshBufferList	plugin/bufexplorer.vim	/^let s:refreshBufferList = 1$/;"	v
s:register_a	syntax/hitest.vim	/^let s:register_a  = @a$/;"	v
s:register_se	syntax/hitest.vim	/^let s:register_se = @\/$/;"	v
s:relative_indent	indent/eiffel.vim	/^let s:relative_indent = '^\\s*\\(deferred\\|class\\|feature\\|creation\\|inherit\\|loop\\|from\\|until\\|if\\|else\\|elseif\\|ensure\\|require\\|check\\|do\\|local\\|invariant\\|variant\\|rename\\|redefine\\|do\\|export\\)\\>'$/;"	v
s:report	syntax/hitest.vim	/^let s:report      = &report$/;"	v
s:ruby_deindent_keywords	indent/ruby.vim	/^let s:ruby_deindent_keywords =$/;"	v
s:ruby_indent_keywords	indent/ruby.vim	/^let s:ruby_indent_keywords = '^\\s*\\zs\\<\\%(module\\|class\\|def\\|if\\|for' .$/;"	v
s:rubycomplete_debug	autoload/rubycomplete.vim	/^let s:rubycomplete_debug = 0$/;"	v
s:rubycomplete_rails_loaded	autoload/rubycomplete.vim	/^let s:rubycomplete_rails_loaded = 0$/;"	v
s:rubypath	ftplugin/ruby.vim	/^      let s:rubypath = system("ruby -e '" . s:code . "'")$/;"	v
s:rubypath	ftplugin/ruby.vim	/^      let s:rubypath = system('ruby -e "' . s:code . '"')$/;"	v
s:rubypath	ftplugin/ruby.vim	/^    let s:rubypath = ".,,"$/;"	v
s:rubypath	ftplugin/ruby.vim	/^    let s:rubypath = '.,' . substitute(s:rubypath, '\\%(^\\|,\\)\\.\\%(,\\|$\\)', ',,', '')$/;"	v
s:rule_rx	indent/make.vim	/^let s:rule_rx = '^[^ \\t#:][^#:]*:\\{1,2}\\%([^=:]\\|$\\)'$/;"	v
s:running	plugin/bufexplorer.vim	/^let s:running = 0$/;"	v
s:running_windows	plugin/NERD_tree.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:s	ftplugin/ocaml.vim	/^let s:s = line2byte(line('.'))+col('.')-1$/;"	v
s:s_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:s_standsfor = 'series'$/;"	v
s:save_cpo	colors/calmar256-dark.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	colors/calmar256-light.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/ant.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/aspvbs.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/config.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/csc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/csh.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/dtd.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/eruby.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/haml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/html.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/initex.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/java.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/jsp.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/latex-suite/main.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/matlab.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/perl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/php.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/plaintex.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/sgml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/sql.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/svg.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/tcsh.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/tex.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/xhtml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/xml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	ftplugin/xsd.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	macros/matchit.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	mswin.vim	/^  let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	plugin/ddldbl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugin/errormarker.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugin/filebrowser.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugin/imaps.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugin/matchit.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugin/plugin/matchit.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugin/vcsbzr.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	plugin/vcscommand.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	plugin/vcscvs.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	plugin/vcsgit.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	plugin/vcshg.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	plugin/vcssvk.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	plugin/vcssvn.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	syntax/named.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_exc	autoload/sqlcomplete.vim	/^    let s:save_exc = g:omni_syntax_group_exclude_sql$/;"	v
s:save_exc	autoload/sqlcomplete.vim	/^let s:save_exc              = ""$/;"	v
s:save_inc	autoload/sqlcomplete.vim	/^    let s:save_inc = g:omni_syntax_group_include_sql$/;"	v
s:save_inc	autoload/sqlcomplete.vim	/^let s:save_inc              = ""$/;"	v
s:save_prev_table	autoload/sqlcomplete.vim	/^let s:save_prev_table       = ""$/;"	v
s:savecpo	compiler/perl.vim	/^let s:savecpo = &cpo$/;"	v
s:savecpo	ftplugin/html/HTML.vim	/^let s:savecpo = &cpoptions$/;"	v
s:searchpairflags	indent/php.vim	/^let s:searchpairflags = 'bWr'$/;"	v
s:section	ftplugin/php.vim	/^let s:section = '\\(.*\\%#\\)\\@!\\_^\\s*\\zs\\('.s:function.'\\|'.s:class.'\\|'.s:interface.'\\)'$/;"	v
s:sgml_cpo_save	syntax/sgml.vim	/^let s:sgml_cpo_save = &cpo$/;"	v
s:sh_fold_functions	syntax/sh.vim	/^ let s:sh_fold_functions = 1$/;"	v
s:sh_fold_heredoc	syntax/sh.vim	/^ let s:sh_fold_heredoc   = 2$/;"	v
s:sh_fold_ifdofor	syntax/sh.vim	/^ let s:sh_fold_ifdofor   = 4$/;"	v
s:shortmess	syntax/hitest.vim	/^let s:shortmess   = &shortmess$/;"	v
s:sienna_style	colors/sienna.vim	/^    let s:sienna_style = 'light'$/;"	v
s:sienna_style	colors/sienna.vim	/^    let s:sienna_style = g:sienna_style$/;"	v
s:single_dent	indent/eiffel.vim	/^let s:single_dent = '^[^-]\\+[[:alnum:]]\\+ is\\(\\s*\\(--\\).*\\)\\=$'$/;"	v
s:skip	indent/cobol.vim	/^let s:skip = 'getline(".") =~ "^.\\\\{6\\\\}[*\/$-]\\\\|\\"[^\\"]*\\""'$/;"	v
s:skip_expr	indent/ruby.vim	/^let s:skip_expr =$/;"	v
s:smartBS_pat	ftplugin/latex-suite/main.vim	/^	let s:smartBS_pat = Tex_GetVarValue('Tex_SmartBSPattern')$/;"	v
s:smarttags	ftplugin/html/HTML.vim	/^let s:smarttags = {}$/;"	v
s:smarttags	ftplugin/html/HTML.vim	/^let s:smarttags['b'] = {$/;"	v
s:smarttags	ftplugin/html/HTML.vim	/^let s:smarttags['comment'] = {$/;"	v
s:smarttags	ftplugin/html/HTML.vim	/^let s:smarttags['em'] = {$/;"	v
s:smarttags	ftplugin/html/HTML.vim	/^let s:smarttags['i'] = {$/;"	v
s:smarttags	ftplugin/html/HTML.vim	/^let s:smarttags['strong']  = {$/;"	v
s:smarttags	ftplugin/html/HTML.vim	/^let s:smarttags['u'] = {$/;"	v
s:sort_by	plugin/bufexplorer.vim	/^let s:sort_by = ["number", "name", "fullpath", "mru", "extension"]$/;"	v
s:spaceStr	plugin/NERD_commenter.vim	/^let s:spaceStr = ' '$/;"	v
s:spacing_errors	syntax/changelog.vim	/^  let s:spacing_errors = 1$/;"	v
s:spacing_errors	syntax/changelog.vim	/^  let s:spacing_errors = b:changelog_spacing_errors$/;"	v
s:spacing_errors	syntax/changelog.vim	/^  let s:spacing_errors = g:changelog_spacing_errors$/;"	v
s:spc	spell/he.vim	/^let s:spc = &l:spc$/;"	v
s:spc	spell/yi.vim	/^let s:spc = &l:spc$/;"	v
s:spellfile_URL	autoload/spellfile.vim	/^let s:spellfile_URL = ''    " Start with nothing so that s:donedict is reset.$/;"	v
s:splitMode	plugin/bufexplorer.vim	/^let s:splitMode = ""$/;"	v
s:sql_file_procedure	autoload/sqlcomplete.vim	/^let s:sql_file_procedure    = ""$/;"	v
s:sql_file_table	autoload/sqlcomplete.vim	/^let s:sql_file_table        = ""$/;"	v
s:sql_file_view	autoload/sqlcomplete.vim	/^let s:sql_file_view         = ""$/;"	v
s:startcol	syntax/2html.vim	/^      let s:startcol = s:col " The start column for processing text$/;"	v
s:style	plugin/bash-support.vim	/^let	s:style			= 'default'$/;"	v
s:style	plugin/c.vim	/^let	s:style			= 'default'$/;"	v
s:svkFunctions	plugin/vcssvk.vim	/^let s:svkFunctions = {}$/;"	v
s:svnFunctions	plugin/vcssvn.vim	/^let s:svnFunctions = {}$/;"	v
s:svnFunctions	plugin/vcssvn.vim	/^let s:svnFunctions.AnnotateSplitRegex = '\\s\\+\\S\\+\\s\\+\\S\\+ '$/;"	v
s:syn_list	autoload/sqlcomplete.vim	/^let s:syn_list              = []$/;"	v
s:syn_remove_words	autoload/syntaxcomplete.vim	/^let s:syn_remove_words = 'match,matchgroup=,contains,'.$/;"	v
s:syn_value	autoload/sqlcomplete.vim	/^let s:syn_value             = []$/;"	v
s:syng_strcom	indent/ruby.vim	/^let s:syng_strcom = '\\<ruby\\%(String\\|StringEscape\\|ASCIICode' .$/;"	v
s:syng_string	indent/ruby.vim	/^let s:syng_string =$/;"	v
s:syng_stringdoc	indent/ruby.vim	/^let s:syng_stringdoc =$/;"	v
s:t_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:t_standsfor = 'title'$/;"	v
s:table	ftplugin/latex-suite/envmacros.vim	/^let s:table =      "\\\\begin{table}\\<cr>\\\\centering\\<cr>\\\\begin{tabular}{<+dimensions+>}\\<cr><++>\\<cr>\\\\end{tabular}\\<cr>\\\\caption{<+Caption text+>}\\<cr>\\\\label{tab:<+label+>}\\<cr>\\\\end{table}<++>"$/;"	v
s:tabular	ftplugin/latex-suite/envmacros.vim	/^let s:tabular = "\\\\begin{tabular}[<+hbtp+>]{<+format+>}\\<cr><++>\\<cr>\\\\end{tabular}"$/;"	v
s:tabular_star	ftplugin/latex-suite/envmacros.vim	/^let s:tabular_star = "\\\\begin{tabular*}[<+hbtp+>]{<+format+>}\\<cr><++>\\<cr>\\\\end{tabular*}"$/;"	v
s:tag	indent/haml.vim	/^let s:tag = '\\%([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
s:tag_close	syntax/2html.vim	/^  let s:tag_close = ' \/>'$/;"	v
s:tag_close	syntax/2html.vim	/^  let s:tag_close = '>'$/;"	v
s:taintopt	compiler/perl.vim	/^	let s:taintopt = ''$/;"	v
s:taintopt	compiler/perl.vim	/^	let s:taintopt = 'T'$/;"	v
s:tbl_alias	autoload/sqlcomplete.vim	/^let s:tbl_alias             = []$/;"	v
s:tbl_cols	autoload/sqlcomplete.vim	/^let s:tbl_cols              = []$/;"	v
s:tbl_name	autoload/sqlcomplete.vim	/^let s:tbl_name              = []$/;"	v
s:temp2	browser_launcher.vim	/^		let s:temp2 = system("which " . s:Browsers[s:temp1][0])$/;"	v
s:test	ftplugin/fortran.vim	/^      let s:test = strpart(getline(s:ln),0,5)$/;"	v
s:test	indent/fortran.vim	/^      let s:test = strpart(getline(s:ln),0,5)$/;"	v
s:tex_ctags	ftplugin/latex-suite/main.vim	/^		let s:tex_ctags = 'ctags' " Configurable in texrc?$/;"	v
s:tex_ctags	ftplugin/latex-suite/main.vim	/^		let s:tex_ctags = Tlist_Ctags_Cmd$/;"	v
s:thisfile	ftplugin/html/HTML.vim	/^let s:thisfile = expand("<sfile>:p")$/;"	v
s:thiswin	optwin.vim	/^  let s:thiswin = winnr()$/;"	v
s:thiswin	optwin.vim	/^let s:thiswin = winnr()$/;"	v
s:tlist_app_name	plugin/taglist.vim	/^let s:tlist_app_name = "none"$/;"	v
s:tlist_brief_help	plugin/taglist.vim	/^let s:tlist_brief_help = 1$/;"	v
s:tlist_cur_file_idx	plugin/taglist.vim	/^let s:tlist_cur_file_idx = -1$/;"	v
s:tlist_debug	plugin/taglist.vim	/^let s:tlist_debug = 0$/;"	v
s:tlist_debug_file	plugin/taglist.vim	/^let s:tlist_debug_file = ''$/;"	v
s:tlist_def_asm_settings	plugin/taglist.vim	/^let s:tlist_def_asm_settings = 'asm;d:define;l:label;m:macro;t:type'$/;"	v
s:tlist_def_aspperl_settings	plugin/taglist.vim	/^let s:tlist_def_aspperl_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_aspvbs_settings	plugin/taglist.vim	/^let s:tlist_def_aspvbs_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_awk_settings	plugin/taglist.vim	/^let s:tlist_def_awk_settings = 'awk;f:function'$/;"	v
s:tlist_def_beta_settings	plugin/taglist.vim	/^let s:tlist_def_beta_settings = 'beta;f:fragment;s:slot;v:pattern'$/;"	v
s:tlist_def_c_settings	plugin/taglist.vim	/^let s:tlist_def_c_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;' .$/;"	v
s:tlist_def_cobol_settings	plugin/taglist.vim	/^let s:tlist_def_cobol_settings = 'cobol;d:data;f:file;g:group;p:paragraph;' .$/;"	v
s:tlist_def_cpp_settings	plugin/taglist.vim	/^let s:tlist_def_cpp_settings = 'c++;n:namespace;v:variable;d:macro;t:typedef;' .$/;"	v
s:tlist_def_cs_settings	plugin/taglist.vim	/^let s:tlist_def_cs_settings = 'c#;d:macro;t:typedef;n:namespace;c:class;' .$/;"	v
s:tlist_def_csh_settings	plugin/taglist.vim	/^let s:tlist_def_csh_settings = 'sh;f:function'$/;"	v
s:tlist_def_eiffel_settings	plugin/taglist.vim	/^let s:tlist_def_eiffel_settings = 'eiffel;c:class;f:feature'$/;"	v
s:tlist_def_erlang_settings	plugin/taglist.vim	/^let s:tlist_def_erlang_settings = 'erlang;d:macro;r:record;m:module;f:function'$/;"	v
s:tlist_def_expect_settings	plugin/taglist.vim	/^let s:tlist_def_expect_settings = 'tcl;c:class;f:method;p:procedure'$/;"	v
s:tlist_def_fortran_settings	plugin/taglist.vim	/^let s:tlist_def_fortran_settings = 'fortran;p:program;b:block data;' .$/;"	v
s:tlist_def_html_settings	plugin/taglist.vim	/^let s:tlist_def_html_settings = 'html;a:anchor;f:javascript function'$/;"	v
s:tlist_def_java_settings	plugin/taglist.vim	/^let s:tlist_def_java_settings = 'java;p:package;c:class;i:interface;' .$/;"	v
s:tlist_def_javascript_settings	plugin/taglist.vim	/^let s:tlist_def_javascript_settings = 'javascript;f:function'$/;"	v
s:tlist_def_lisp_settings	plugin/taglist.vim	/^let s:tlist_def_lisp_settings = 'lisp;f:function'$/;"	v
s:tlist_def_lua_settings	plugin/taglist.vim	/^let s:tlist_def_lua_settings = 'lua;f:function'$/;"	v
s:tlist_def_make_settings	plugin/taglist.vim	/^let s:tlist_def_make_settings = 'make;m:macro'$/;"	v
s:tlist_def_pascal_settings	plugin/taglist.vim	/^let s:tlist_def_pascal_settings = 'pascal;f:function;p:procedure'$/;"	v
s:tlist_def_perl_settings	plugin/taglist.vim	/^let s:tlist_def_perl_settings = 'perl;c:constant;l:label;p:package;s:subroutine'$/;"	v
s:tlist_def_php_settings	plugin/taglist.vim	/^let s:tlist_def_php_settings = 'php;c:class;d:constant;v:variable;f:function'$/;"	v
s:tlist_def_python_settings	plugin/taglist.vim	/^let s:tlist_def_python_settings = 'python;c:class;m:member;f:function'$/;"	v
s:tlist_def_rexx_settings	plugin/taglist.vim	/^let s:tlist_def_rexx_settings = 'rexx;s:subroutine'$/;"	v
s:tlist_def_ruby_settings	plugin/taglist.vim	/^let s:tlist_def_ruby_settings = 'ruby;c:class;f:method;F:function;' .$/;"	v
s:tlist_def_scheme_settings	plugin/taglist.vim	/^let s:tlist_def_scheme_settings = 'scheme;s:set;f:function'$/;"	v
s:tlist_def_sh_settings	plugin/taglist.vim	/^let s:tlist_def_sh_settings = 'sh;f:function'$/;"	v
s:tlist_def_slang_settings	plugin/taglist.vim	/^let s:tlist_def_slang_settings = 'slang;n:namespace;f:function'$/;"	v
s:tlist_def_sml_settings	plugin/taglist.vim	/^let s:tlist_def_sml_settings = 'sml;e:exception;c:functor;s:signature;' .$/;"	v
s:tlist_def_sql_settings	plugin/taglist.vim	/^let s:tlist_def_sql_settings = 'sql;c:cursor;F:field;P:package;r:record;' .$/;"	v
s:tlist_def_tcl_settings	plugin/taglist.vim	/^let s:tlist_def_tcl_settings = 'tcl;c:class;f:method;m:method;p:procedure'$/;"	v
s:tlist_def_vera_settings	plugin/taglist.vim	/^let s:tlist_def_vera_settings = 'vera;c:class;d:macro;e:enumerator;' .$/;"	v
s:tlist_def_verilog_settings	plugin/taglist.vim	/^let s:tlist_def_verilog_settings = 'verilog;m:module;c:constant;P:parameter;' .$/;"	v
s:tlist_def_vim_settings	plugin/taglist.vim	/^let s:tlist_def_vim_settings = 'vim;a:autocmds;v:variable;f:function'$/;"	v
s:tlist_def_yacc_settings	plugin/taglist.vim	/^let s:tlist_def_yacc_settings = 'yacc;l:label'$/;"	v
s:tlist_def_zsh_settings	plugin/taglist.vim	/^let s:tlist_def_zsh_settings = 'sh;f:function'$/;"	v
s:tlist_file_count	plugin/taglist.vim	/^let s:tlist_file_count = 0$/;"	v
s:tlist_file_lnum_idx_cache	plugin/taglist.vim	/^let s:tlist_file_lnum_idx_cache = -1$/;"	v
s:tlist_file_name_idx_cache	plugin/taglist.vim	/^let s:tlist_file_name_idx_cache = -1$/;"	v
s:tlist_file_names	plugin/taglist.vim	/^let s:tlist_file_names=''$/;"	v
s:tlist_ftype_count	plugin/taglist.vim	/^let s:tlist_ftype_count = 0$/;"	v
s:tlist_menu_empty	plugin/taglist.vim	/^let s:tlist_menu_empty = 1$/;"	v
s:tlist_msg	plugin/taglist.vim	/^    let s:tlist_msg = ''$/;"	v
s:tlist_removed_flist	plugin/taglist.vim	/^let s:tlist_removed_flist = ""$/;"	v
s:tlist_sid	plugin/taglist.vim	/^    let s:tlist_sid = substitute(maparg('<SID>xx'), '<SNR>\\(\\d\\+_\\)xx$',$/;"	v
s:tlist_win_maximized	plugin/taglist.vim	/^let s:tlist_win_maximized = 0$/;"	v
s:tlist_winsize_chgd	plugin/taglist.vim	/^let s:tlist_winsize_chgd = -1$/;"	v
s:tmp	ftplugin/html/HTML.vim	/^      let s:tmp = confirm(s:tmp, "&Dismiss\\nView &Help", 1, 'Warning')$/;"	v
s:tmp	ftplugin/html/HTML.vim	/^      let s:tmp = confirm(s:tmp, "&Dismiss\\nView &Help\\nGet &Bitmaps", 1, 'Warning')$/;"	v
s:tmp	ftplugin/html/HTML.vim	/^    let s:tmp = "Warning:\\nYou need to install the Toolbar Bitmaps for the "$/;"	v
s:token_pattern	indent/dtd.vim	/^let s:token_pattern = '^[^[:space:]]\\+'$/;"	v
s:tree_markup_reg	plugin/NERD_tree.vim	/^let s:tree_markup_reg = '^[ `|]*[\\-+~]'$/;"	v
s:tree_up_dir_line	plugin/NERD_tree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:tree_wid	plugin/NERD_tree.vim	/^let s:tree_wid = 2$/;"	v
s:trust_user_indent	indent/eiffel.vim	/^let s:trust_user_indent = '\\(+\\)\\(\\s*\\(--\\).*\\)\\=$'$/;"	v
s:tutorfile	tutor/tutor.vim	/^let s:tutorfile = "\/tutor\/tutor"$/;"	v
s:tutorxx	tutor/tutor.vim	/^let s:tutorxx = $VIMRUNTIME . s:tutorfile . s:ext$/;"	v
s:type	indent/ocaml.vim	/^let s:type = '^\\s*\\%(class\\|let\\|type\\)\\>.*='$/;"	v
s:type	indent/sml.vim	/^let s:type = '^\\s*\\%(let\\|type\\)\\>.*='$/;"	v
s:types	plugin/bufexplorer.vim	/^let s:types = {"fullname": ':p', "path": ':p:h', "relativename": ':~:.', "relativepath": ':~:.:h', "shortname": ':t'}$/;"	v
s:u_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:u_standsfor = 'type'$/;"	v
s:ulbg	colors/astronaut.vim	/^  let s:ulbg     = "ctermbg=darkmagenta guibg=magenta4"$/;"	v
s:ulbg	colors/astronaut.vim	/^  let s:ulbg     = "ctermbg=magenta guibg=magenta"$/;"	v
s:ulbg	colors/astronaut.vim	/^ let s:ulbg     = ""$/;"	v
s:underline	colors/astronaut.vim	/^ let s:underline= ",underline"$/;"	v
s:underline	colors/astronaut.vim	/^ let s:underline= "none"$/;"	v
s:undo_ftplugin	ftplugin/ant.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	ftplugin/ant.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	ftplugin/aspvbs.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	ftplugin/aspvbs.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	ftplugin/config.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	ftplugin/config.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	ftplugin/eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	ftplugin/eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	ftplugin/eruby.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	ftplugin/haml.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	ftplugin/haml.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	ftplugin/haml.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	ftplugin/jsp.vim	/^    let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	ftplugin/jsp.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	ftplugin/jsp.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	ftplugin/php.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	ftplugin/php.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	ftplugin/sgml.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	ftplugin/sgml.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	ftplugin/svg.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	ftplugin/svg.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	ftplugin/tcsh.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	ftplugin/tcsh.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	ftplugin/xhtml.vim	/^    let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	ftplugin/xhtml.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	ftplugin/xhtml.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	ftplugin/xsd.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	ftplugin/xsd.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_spellang	menu.vim	/^  let s:undo_spellang = ['aun &Tools.&Spelling.&Find\\ More\\ Languages']$/;"	v
s:up_path	ftplugin/latex-suite/texmenuconf.vim	/^let s:up_path = fnameescape(expand("<sfile>:p:h:h"))$/;"	v
s:v_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:v_standsfor = 'volume'$/;"	v
s:val	indent/sml.vim	/^let s:val = '^\\s*\\(val\\|external\\)\\>.*:'$/;"	v
s:valuerange	plugin/ScreenShot.vim	/^    let s:valuerange = [0x00, 0x5F, 0x87, 0xAF, 0xD7, 0xFF] $/;"	v
s:values	autoload/csscomplete.vim	/^	let s:values = split("azimuth background background-attachment background-color background-image background-position background-repeat border bottom border-collapse border-color border-spacing border-style border-top border-right border-bottom border-left border-top-color border-right-color border-bottom-color border-left-color  border-top-style border-right-style border-bottom-style border-left-style border-top-width border-right-width border-bottom-width border-left-width border-width caption-side clear clip color content counter-increment counter-reset cue cue-after cue-before cursor display direction elevation empty-cells float font font-family font-size font-style font-variant font-weight height left letter-spacing line-height list-style list-style-image list-style-position list-style-type margin margin-right margin-left margin-top margin-bottom max-height max-width min-height min-width orphans outline outline-color outline-style outline-width overflow padding padding-top padding-right padding-bottom padding-left page-break-after page-break-before page-break-inside pause pause-after pause-before pitch pitch-range play-during position quotes right richness speak speak-header speak-numeral speak-punctuation speech-rate stress table-layout text-align text-decoration text-indent text-transform top unicode-bidi vertical-align visibility voice-family volume white-space width widows word-spacing z-index")$/;"	v
s:variousMenuLoc	ftplugin/latex-suite/elementmacros.vim	/^let s:variousMenuLoc    = g:Tex_ElementsMenuLocation.'Various.'$/;"	v
s:version	plugin/tar-1.00.vim	/^let s:version = "1.00"$/;"	v
s:vim_encoding	syntax/2html.vim	/^    let s:vim_encoding = substitute(s:vim_encoding, '^8bit-\\|^2byte-', '', '')$/;"	v
s:vim_encoding	syntax/2html.vim	/^  let s:vim_encoding = &encoding$/;"	v
s:violet	colors/twilight.vim	/^let s:violet = '#a999ac'$/;"	v
s:vis_center_left	ftplugin/latex-suite/envmacros.vim	/^	let s:vis_center_left = '\\centerline{'$/;"	v
s:vis_center_right	ftplugin/latex-suite/envmacros.vim	/^	let s:vis_center_right = '}'$/;"	v
s:vis_flushright_left	ftplugin/latex-suite/envmacros.vim	/^	let s:vis_flushright_left =  '{\\raggedright '$/;"	v
s:vis_flushright_right	ftplugin/latex-suite/envmacros.vim	/^	let s:vis_flushright_right = '}'$/;"	v
s:vis_fushleft_left	ftplugin/latex-suite/envmacros.vim	/^	let s:vis_fushleft_left = '{\\raggedleft '$/;"	v
s:vis_fushleft_right	ftplugin/latex-suite/envmacros.vim	/^	let s:vis_fushleft_right = '}'$/;"	v
s:vis_lrbox_left	ftplugin/latex-suite/envmacros.vim	/^	let s:vis_lrbox_left = '\\sbox{'$/;"	v
s:vis_lrbox_right	ftplugin/latex-suite/envmacros.vim	/^	let s:vis_lrbox_right = '}'$/;"	v
s:vis_verbatim_left	ftplugin/latex-suite/envmacros.vim	/^	let s:vis_verbatim_left = '\\verb\\|'$/;"	v
s:vis_verbatim_right	ftplugin/latex-suite/envmacros.vim	/^	let s:vis_verbatim_right = '\\|'$/;"	v
s:w_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:w_standsfor = 'address'$/;"	v
s:warningicon	plugin/errormarker.vim	/^    let s:warningicon = " icon=" . escape (g:errormarker_warningicon, '| \\')$/;"	v
s:warningicon	plugin/errormarker.vim	/^let s:warningicon = ""$/;"	v
s:warnopt	compiler/perl.vim	/^	let s:warnopt = 'W'$/;"	v
s:warnopt	compiler/perl.vim	/^	let s:warnopt = 'w'$/;"	v
s:whatterm	syntax/2html.vim	/^  let s:whatterm = "cterm"$/;"	v
s:whatterm	syntax/2html.vim	/^  let s:whatterm = "gui"$/;"	v
s:when_no_matched_or_others	ftplugin/sql.vim	/^let s:when_no_matched_or_others = '\\%(\\<when\\>\\%(\\s\\+\\%(\\%(\\<not\\>\\s\\+\\)\\?<matched\\>\\)\\|\\<others\\>\\)\\@!\\)'$/;"	v
s:white	colors/astronaut.vim	/^ let s:white   = "white"$/;"	v
s:white	colors/twilight.vim	/^let s:white = '#fffedc'$/;"	v
s:wrapscan	syntax/hitest.vim	/^let s:wrapscan    = &wrapscan$/;"	v
s:wsh_cpo_save	syntax/wsh.vim	/^let s:wsh_cpo_save = &cpo$/;"	v
s:xml_cpo_save	syntax/xml.vim	/^let s:xml_cpo_save = &cpo$/;"	v
s:y_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:y_standsfor = 'year'$/;"	v
s:yellow	colors/astronaut.vim	/^ let s:yellow  = "darkyellow"$/;"	v
s:yellow	colors/astronaut.vim	/^ let s:yellow  = "yellow"$/;"	v
s:yellow	colors/twilight.vim	/^let s:yellow = '#e3d796'$/;"	v
s:z_standsfor	ftplugin/latex-suite/bibtex.vim	/^let s:z_standsfor = 'note'$/;"	v
s:zipfile_escape	autoload/zip.vim	/^let s:zipfile_escape = ' ?&;\\'$/;"	v
s:zsh_syntax_variables	syntax/zsh.vim	/^  let s:zsh_syntax_variables = 'all'$/;"	v
s:zsh_syntax_variables	syntax/zsh.vim	/^  let s:zsh_syntax_variables = g:zsh_syntax_variables$/;"	v
satisfies	ftplugin/latex-suite/bibtools.py	/^    def satisfies(self, filters):$/;"	m	class:Bibliography
save	ftplugin/c.vim	/^  let save=&dictionary$/;"	v
save	ftplugin/sh.vim	/^  let save=&dictionary$/;"	v
saveScreenState	plugin/NERD_tree.vim	/^function! s:saveScreenState()$/;"	f
save_cpo	colors/candycode.vim	/^let save_cpo = &cpo$/;"	v
searchsyn	ftplugin/ruby.vim	/^function! s:searchsyn(pattern,syn,flags)$/;"	f
sed_delimiter	syntax/sed.vim	/^    let __sed_delimiter = escape(nr2char(__sed_i), __sed_metacharacters)$/;"	v
sed_i	syntax/sed.vim	/^	let __sed_i = __sed_i + 1$/;"	v
sed_i	syntax/sed.vim	/^    let __sed_i = 32$/;"	v
sed_i	syntax/sed.vim	/^    let __sed_i = __sed_i + 1$/;"	v
sed_i	syntax/sed.vim	/^let __sed_i = char2nr(" ")$/;"	v
sed_last	syntax/sed.vim	/^    let __sed_last = 126$/;"	v
sed_last	syntax/sed.vim	/^    let __sed_last = 255$/;"	v
sed_metacharacters	syntax/sed.vim	/^let __sed_metacharacters = '$*.\\^[~'$/;"	v
send_eof	vimsh.py	/^    def send_eof( self ):$/;"	m	class:vimsh
send_intr	vimsh.py	/^    def send_intr( self ):$/;"	m	class:vimsh
set_compression	autoload/gzip.vim	/^fun s:set_compression(line)$/;"	f
set_timeout	vimsh.py	/^    def set_timeout( self ):$/;"	m	class:vimsh
setupStatusline	plugin/NERD_tree.vim	/^function! s:setupStatusline()$/;"	f
setupSyntaxHighlighting	plugin/NERD_tree.vim	/^function! s:setupSyntaxHighlighting()$/;"	f
setup_pty	vimsh.py	/^    def setup_pty( self, _use_pty ):$/;"	m	class:vimsh
sh_maxlines	syntax/sh.vim	/^  let sh_maxlines = 2 * sh_minlines$/;"	v
sh_minlines	syntax/sh.vim	/^  let sh_minlines = 200$/;"	v
showMenu	plugin/NERD_tree.vim	/^function! s:showMenu()$/;"	f
sigchld_handler	vimsh.py	/^    def sigchld_handler( self, _sig, _frame ):$/;"	m	class:vimsh
sigint_handler	vimsh.py	/^    def sigint_handler( self, _sig, _frame ):$/;"	m	class:vimsh
sladk	tutor/tutor.cs	/^      6)  Cukr je sladký,$/;"	v
slova	tutor/tutor.cs	/^     kurzoru do konce slova,  c$  zmìní text do konce øádku.$/;"	v
slovo	tutor/tutor.cs	/^V¹imni si, ¾e  cw  nejen nahrazuje slovo, ale také pøemístí do vkládání.$/;"	v
sort	ftplugin/latex-suite/bibtools.py	/^    def sort(self):$/;"	m	class:BibFile
spawn_buf	vimsh.py	/^def spawn_buf( _filename ):$/;"	f
spellfile#LoadFile	autoload/spellfile.vim	/^function! spellfile#LoadFile(lang)$/;"	f
spellfile#Nread	autoload/spellfile.vim	/^function! spellfile#Nread(fname)$/;"	f
sqlcomplete#Complete	autoload/sqlcomplete.vim	/^function! sqlcomplete#Complete(findstart, base)$/;"	f
sqlcomplete#DrillIntoTable	autoload/sqlcomplete.vim	/^function! sqlcomplete#DrillIntoTable()$/;"	f
sqlcomplete#DrillOutOfColumns	autoload/sqlcomplete.vim	/^function! sqlcomplete#DrillOutOfColumns()$/;"	f
sqlcomplete#Map	autoload/sqlcomplete.vim	/^function! sqlcomplete#Map(type)$/;"	f
sqlcomplete#PreCacheSyntax	autoload/sqlcomplete.vim	/^function! sqlcomplete#PreCacheSyntax(...)$/;"	f
sto	tutor/tutor.cs	/^     první znak za místo, kde má být text vlo¾ený.$/;"	v
strip	indent/bst.vim	/^function! s:strip(lnum)$/;"	f
stripComments	ftplugin/latex-suite/outline.py	/^def stripComments(contents):$/;"	f
stripMarkupFromLine	plugin/NERD_tree.vim	/^function! s:stripMarkupFromLine(line, removeLeadingSpaces)$/;"	f
stripped	indent/cobol.vim	/^function! s:stripped(lnum)$/;"	f
substitute_items	ftplugin/changelog.vim	/^  function! s:substitute_items(str, date, user)$/;"	f
support_jisx0213	lang/menu_ja_jp.euc-jp.vim	/^  let support_jisx0213 = (iconv("\\x87\\x64\\x87\\x6a", 'cp932', 'euc-jisx0213') ==# "\\xad\\xc5\\xad\\xcb") ? 1 : 0$/;"	v
support_jisx0213	lang/menu_ja_jp.utf-8.vim	/^  let support_jisx0213 = (iconv("\\x87\\x64\\x87\\x6a", 'cp932', 'euc-jisx0213') ==# "\\xad\\xc5\\xad\\xcb") ? 1 : 0$/;"	v
support_jisx0213	lang/menu_japanese_japan.932.vim	/^  let support_jisx0213 = (iconv("\\x87\\x64\\x87\\x6a", 'cp932', 'euc-jisx0213') ==# "\\xad\\xc5\\xad\\xcb") ? 1 : 0$/;"	v
svkFunctions.Add	plugin/vcssvk.vim	/^function! s:svkFunctions.Add(argList)$/;"	f
svkFunctions.Annotate	plugin/vcssvk.vim	/^function! s:svkFunctions.Annotate(argList)$/;"	f
svkFunctions.Commit	plugin/vcssvk.vim	/^function! s:svkFunctions.Commit(argList)$/;"	f
svkFunctions.Delete	plugin/vcssvk.vim	/^function! s:svkFunctions.Delete(argList)$/;"	f
svkFunctions.Diff	plugin/vcssvk.vim	/^function! s:svkFunctions.Diff(argList)$/;"	f
svkFunctions.GetBufferInfo	plugin/vcssvk.vim	/^function! s:svkFunctions.GetBufferInfo()$/;"	f
svkFunctions.Identify	plugin/vcssvk.vim	/^function! s:svkFunctions.Identify(buffer)$/;"	f
svkFunctions.Info	plugin/vcssvk.vim	/^function! s:svkFunctions.Info(argList)$/;"	f
svkFunctions.Lock	plugin/vcssvk.vim	/^function! s:svkFunctions.Lock(argList)$/;"	f
svkFunctions.Log	plugin/vcssvk.vim	/^function! s:svkFunctions.Log(argList)$/;"	f
svkFunctions.Revert	plugin/vcssvk.vim	/^function! s:svkFunctions.Revert(argList)$/;"	f
svkFunctions.Review	plugin/vcssvk.vim	/^function! s:svkFunctions.Review(argList)$/;"	f
svkFunctions.Status	plugin/vcssvk.vim	/^function! s:svkFunctions.Status(argList)$/;"	f
svkFunctions.Unlock	plugin/vcssvk.vim	/^function! s:svkFunctions.Unlock(argList)$/;"	f
svkFunctions.Update	plugin/vcssvk.vim	/^function! s:svkFunctions.Update(argList)$/;"	f
svnFunctions.Add	plugin/vcssvn.vim	/^function! s:svnFunctions.Add(argList)$/;"	f
svnFunctions.Annotate	plugin/vcssvn.vim	/^function! s:svnFunctions.Annotate(argList)$/;"	f
svnFunctions.Commit	plugin/vcssvn.vim	/^function! s:svnFunctions.Commit(argList)$/;"	f
svnFunctions.Delete	plugin/vcssvn.vim	/^function! s:svnFunctions.Delete(argList)$/;"	f
svnFunctions.Diff	plugin/vcssvn.vim	/^function! s:svnFunctions.Diff(argList)$/;"	f
svnFunctions.GetBufferInfo	plugin/vcssvn.vim	/^function! s:svnFunctions.GetBufferInfo()$/;"	f
svnFunctions.Identify	plugin/vcssvn.vim	/^function! s:svnFunctions.Identify(buffer)$/;"	f
svnFunctions.Info	plugin/vcssvn.vim	/^function! s:svnFunctions.Info(argList)$/;"	f
svnFunctions.Lock	plugin/vcssvn.vim	/^function! s:svnFunctions.Lock(argList)$/;"	f
svnFunctions.Log	plugin/vcssvn.vim	/^function! s:svnFunctions.Log(argList)$/;"	f
svnFunctions.Revert	plugin/vcssvn.vim	/^function! s:svnFunctions.Revert(argList)$/;"	f
svnFunctions.Review	plugin/vcssvn.vim	/^function! s:svnFunctions.Review(argList)$/;"	f
svnFunctions.Status	plugin/vcssvn.vim	/^function! s:svnFunctions.Status(argList)$/;"	f
svnFunctions.Unlock	plugin/vcssvn.vim	/^function! s:svnFunctions.Unlock(argList)$/;"	f
svnFunctions.Update	plugin/vcssvn.vim	/^function! s:svnFunctions.Update(argList)$/;"	f
synIDSpec	plugin/ScreenShot.vim	/^function! s:synIDSpec(y,x,normal)$/;"	f
synname	ftplugin/ruby.vim	/^function! s:synname()$/;"	f
syntax_manual	syntax/manual.vim	/^let syntax_manual = 1$/;"	v
syntax_on	syntax/synload.vim	/^let syntax_on = 1$/;"	v
syntaxcomplete#Complete	autoload/syntaxcomplete.vim	/^function! syntaxcomplete#Complete(findstart, base)$/;"	f
syntaxset	syntax/nosyntax.vim	/^augroup syntaxset$/;"	a
syntaxset	syntax/syntax.vim	/^augroup syntaxset$/;"	a
t	macros/hanoi/hanoi.vim	/^map t 7$/;"	m
t	macros/hanoi/hanoi.vim	/^map! t 7$/;"	m
t	tutor/tutor.cs	/^  7. Stlaè CTRL-R (klávesu CTRL dr¾ stlaèenou a stiskni R) nìkolikrát,$/;"	v
tabpagevar	plugin/NERD_tree.vim	/^function! s:tabpagevar(tabnr, var)$/;"	f
tads_minlines	syntax/tads.vim	/^  let tads_minlines = 15$/;"	v
tads_sync_dist	syntax/tads.vim	/^  let tads_sync_dist = 100$/;"	v
tag	ftplugin/html/HTML.vim	/^function! s:tag(tag, mode)$/;"	f
tar	plugin/tar-1.00.vim	/^augroup tar$/;"	a
tar	plugin/tarPlugin.vim	/^augroup tar$/;"	a
tar#Browse	autoload/tar.vim	/^fun! tar#Browse(tarfile)$/;"	f
tar#Read	autoload/tar.vim	/^fun! tar#Read(fname,mode)$/;"	f
tar#Write	autoload/tar.vim	/^fun! tar#Write(fname)$/;"	f
te	tutor/tutor.cs	/^     Nyní se pøesvìdète, ¾e Shift-Lock NENÍ stlaèený a nìkolikrát stisknìte$/;"	v
tempname	autoload/gzip.vim	/^fun s:tempname(name)$/;"	f
test_and_set	vimsh.py	/^def test_and_set( _vim_var, _default_val ):$/;"	f
tlist_txt_settings	ftplugin/txt.vim	/^let tlist_txt_settings = 'txt;c:content;f:figures;t:tables'$/;"	v
tmplang	gvimrc_example.vim	/^  let tmplang = "en_US"$/;"	v
tmplang	gvimrc_example.vim	/^  let tmplang = $LANG$/;"	v
tmplang	gvimrc_example.vim	/^  let tmplang = $LC_CTYPE$/;"	v
tmplang	gvimrc_example.vim	/^let tmplang = $LC_ALL$/;"	v
to	tutor/tutor.cs	/^     Vim je velmi výkonný editor, který má pøíli¹ mnoho pøíkazù na to, aby$/;"	v
toend	ftplugin/cobol.vim	/^function! s:toend(direction)$/;"	f
toggle	plugin/NERD_tree.vim	/^function! s:toggle(dir)$/;"	f
toggleIgnoreFilter	plugin/NERD_tree.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	plugin/NERD_tree.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	plugin/NERD_tree.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	plugin/NERD_tree.vim	/^function! s:toggleShowHidden()$/;"	f
toggleZoom	plugin/NERD_tree.vim	/^function! s:toggleZoom()$/;"	f
tom	tutor/tutor.cs	/^     na tom, kolik èasu strávíte pøezku¹ováním.$/;"	v
topindent	ftplugin/ocaml.vim	/^function s:topindent(lnum)$/;"	f
treeExistsForBuf	plugin/NERD_tree.vim	/^function! s:treeExistsForBuf()$/;"	f
treeExistsForTab	plugin/NERD_tree.vim	/^function! s:treeExistsForTab()$/;"	f
trytcl	syntax/vim.vim	/^ let trytcl= (&shell !~ '\\<\\%(bash\\>\\|4[nN][tT]\\|\\<zsh\\)\\>\\%(\\.exe\\)\\=$')$/;"	v
trytcl	syntax/vim.vim	/^ let trytcl= 1$/;"	v
txtfiles	doc/Makefile	/^txtfiles = $(addsuffix .txt, $(projects))$/;"	m
u	macros/less.vim	/^noremap <script> u <C-U><SID>L$/;"	m
u	tutor/tutor.cs	/^     c) Inteligence se uèí,$/;"	v
uc_minlines	syntax/uc.vim	/^  let uc_minlines = 10$/;"	v
unique	plugin/NERD_tree.vim	/^function! s:unique(list)$/;"	f
unload	optwin.vim	/^fun! <SID>unload()$/;"	f
upDir	plugin/NERD_tree.vim	/^function! s:upDir(keepState)$/;"	f
usage	doc/vim2html.pl	/^sub usage$/;"	s
usage	doc/vim2html.pl	/^usage:$/;"	l
usage	tools/efm_perl.pl	/^sub usage {$/;"	s
usage	tools/shtags.pl	/^sub usage$/;"	s
v	macros/less.vim	/^map v :silent call <SID>End()<CR>$/;"	m
vera_comment_strings	syntax/vera.vim	/^let vera_comment_strings = 1$/;"	v
version	tools/shtags.pl	/^sub version$/;"	s
vim	ftplugin/fortran_codecomplete.vim	/^import vim$/;"	m
vim2html	doc/vim2html.pl	/^sub vim2html$/;"	s
vimball#Decompress	autoload/vimball.vim	/^fun! vimball#Decompress(fname)$/;"	f
vimball#MkVimball	autoload/vimball.vim	/^fun! vimball#MkVimball(line1,line2,writelevel,...) range$/;"	f
vimball#RestoreSettings	autoload/vimball.vim	/^fun! vimball#RestoreSettings()$/;"	f
vimball#RmVimball	autoload/vimball.vim	/^fun! vimball#RmVimball(...)$/;"	f
vimball#SaveSettings	autoload/vimball.vim	/^fun! vimball#SaveSettings()$/;"	f
vimball#ShowMesg	autoload/vimball.vim	/^fun! vimball#ShowMesg(level,msg)$/;"	f
vimball#Vimball	autoload/vimball.vim	/^fun! vimball#Vimball(really,...)$/;"	f
vimrcEx	vimrc.vim	/^  augroup vimrcEx$/;"	a
vimrcEx	vimrc_example.vim	/^  augroup vimrcEx$/;"	a
vimsh	vimsh.py	/^class vimsh:$/;"	c
w	macros/less.vim	/^map w b$/;"	m
w	tutor/tutor.cs	/^       objekt - udává rozsah pøíkazu, napøíklad  w  (slovo),$/;"	m
w	tutor/tutor.cs	/^  2. Objekty jsou také shodné, jako napø.: w (slovo), $ (konec øádku), atd.$/;"	m
waitpid	vimsh.py	/^    def waitpid( self ):$/;"	m	class:vimsh
wpisanie	tutor/tutor.pl	/^     wpisanie:		:set ic$/;"	l
wpisz	tutor/tutor.pl	/^     wpisz  :%s\/stare\/nowe\/g   by zmieniæ wszystkie wyst±pienia w ca³ym pliku.$/;"	l
wpisz	tutor/tutor.pl	/^     wpisz  :%s\/stare\/nowe\/gc  by zmieniæ wszystkie wyst±pienia w ca³ym$/;"	l
wpisz	tutor/tutor.pl	/^     wpisz:			:wq<ENTER>$/;"	l
wpisz	tutor/tutor.pl	/^     wpisz: :#,#s\/stare\/nowe\/g gdzie #,# s± numerami linii ograniczaj±cych$/;"	l
wpisz	tutor/tutor.pl	/^  wpisz :q<ENTER>        aby zamkn±æ okno pomocy.$/;"	l
write	vimsh.py	/^    def write( self, _cmd ):$/;"	m	class:vimsh
writeCSS	doc/vim2html.pl	/^sub writeCSS$/;"	s
xmlcomplete#CompleteTags	autoload/xmlcomplete.vim	/^function! xmlcomplete#CompleteTags(findstart, base)$/;"	f
xmlcomplete#CreateConnection	autoload/xmlcomplete.vim	/^function! xmlcomplete#CreateConnection(canonical, ...) " {{{$/;"	f
xmlcomplete#CreateEntConnection	autoload/xmlcomplete.vim	/^function! xmlcomplete#CreateEntConnection(...) " {{{$/;"	f
xmlcomplete#GetLastOpenTag	autoload/xmlcomplete.vim	/^function! xmlcomplete#GetLastOpenTag(unaryTagsStack)$/;"	f
xsltproc	doc/Makefile	/^xsltproc=xsltproc$/;"	m
y	macros/less.vim	/^map y k$/;"	m
z	macros/less.vim	/^map z <Space>$/;"	m
z	macros/life/life.vim	/^map z ,^,&,*,&<1,*<2$/;"	m
zip	plugin/zipPlugin.vim	/^augroup zip$/;"	a
zip#Browse	autoload/zip.vim	/^fun! zip#Browse(zipfile)$/;"	f
zip#Read	autoload/zip.vim	/^fun! zip#Read(fname,mode)$/;"	f
zip#Write	autoload/zip.vim	/^fun! zip#Write(fname)$/;"	f
znak	tutor/tutor.cs	/^  2. Pro nahrazení znaku pod kurzorem, napi¹  r  a potom znak, kterým$/;"	v
{<CR>	ftplugin/c.vim	/^inoremap  <buffer>  {<CR>    {<CR>}<Esc>O$/;"	m
{<CR>	ftplugin/c.vim	/^vnoremap  <buffer>  {<CR>   S{<CR>}<Esc>Pk=iB$/;"	m
ã®	keymap/kana.vim	/^no ã®$/;"	m
